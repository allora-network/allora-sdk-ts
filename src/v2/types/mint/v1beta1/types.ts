// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: mint/v1beta1/types.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "mint.v1beta1";

/** Params defines the parameters for the x/mint module. */
export interface Params {
  /** type of coin to mint */
  mintDenom: string;
  /** maximum total supply of the coin */
  maxSupply: string;
  /** ecosystem treasury fraction ideally emitted per unit time */
  fEmission: string;
  /** one month exponential moving average smoothing factor, alpha_e in the paper */
  oneMonthSmoothingDegree: string;
  /**
   * percentage of the total supply is reserved and locked in the ecosystem
   * treasury
   */
  ecosystemTreasuryPercentOfTotalSupply: string;
  /**
   * percentage of the total supply that is unlocked and usable in the
   * foundation treasury
   */
  foundationTreasuryPercentOfTotalSupply: string;
  /**
   * percentage of the total supply that is unlocked and usable by partipicants
   * at the genesis
   */
  participantsPercentOfTotalSupply: string;
  /**
   * percentage of the total supply that is locked in the investors bucket at
   * the genesis
   */
  investorsPercentOfTotalSupply: string;
  /**
   * percentage of the total supply that is locked in the team bucket at the
   * genesis
   */
  teamPercentOfTotalSupply: string;
  /** The capped max monthly percentage yield (like %APY) */
  maximumMonthlyPercentageYield: string;
  /**
   * percentage of the total supply that is locked in the preseed investors
   * bucket at the genesis
   */
  investorsPreseedPercentOfTotalSupply: string;
}

function createBaseParams(): Params {
  return {
    mintDenom: "",
    maxSupply: "",
    fEmission: "",
    oneMonthSmoothingDegree: "",
    ecosystemTreasuryPercentOfTotalSupply: "",
    foundationTreasuryPercentOfTotalSupply: "",
    participantsPercentOfTotalSupply: "",
    investorsPercentOfTotalSupply: "",
    teamPercentOfTotalSupply: "",
    maximumMonthlyPercentageYield: "",
    investorsPreseedPercentOfTotalSupply: "",
  };
}

export const Params: MessageFns<Params> = {
  encode(message: Params, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.mintDenom !== "") {
      writer.uint32(10).string(message.mintDenom);
    }
    if (message.maxSupply !== "") {
      writer.uint32(18).string(message.maxSupply);
    }
    if (message.fEmission !== "") {
      writer.uint32(26).string(message.fEmission);
    }
    if (message.oneMonthSmoothingDegree !== "") {
      writer.uint32(34).string(message.oneMonthSmoothingDegree);
    }
    if (message.ecosystemTreasuryPercentOfTotalSupply !== "") {
      writer.uint32(42).string(message.ecosystemTreasuryPercentOfTotalSupply);
    }
    if (message.foundationTreasuryPercentOfTotalSupply !== "") {
      writer.uint32(50).string(message.foundationTreasuryPercentOfTotalSupply);
    }
    if (message.participantsPercentOfTotalSupply !== "") {
      writer.uint32(58).string(message.participantsPercentOfTotalSupply);
    }
    if (message.investorsPercentOfTotalSupply !== "") {
      writer.uint32(66).string(message.investorsPercentOfTotalSupply);
    }
    if (message.teamPercentOfTotalSupply !== "") {
      writer.uint32(74).string(message.teamPercentOfTotalSupply);
    }
    if (message.maximumMonthlyPercentageYield !== "") {
      writer.uint32(82).string(message.maximumMonthlyPercentageYield);
    }
    if (message.investorsPreseedPercentOfTotalSupply !== "") {
      writer.uint32(90).string(message.investorsPreseedPercentOfTotalSupply);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Params {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.mintDenom = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.maxSupply = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.fEmission = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.oneMonthSmoothingDegree = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.ecosystemTreasuryPercentOfTotalSupply = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.foundationTreasuryPercentOfTotalSupply = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.participantsPercentOfTotalSupply = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.investorsPercentOfTotalSupply = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.teamPercentOfTotalSupply = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.maximumMonthlyPercentageYield = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.investorsPreseedPercentOfTotalSupply = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Params {
    return {
      mintDenom: isSet(object.mintDenom) ? globalThis.String(object.mintDenom) : "",
      maxSupply: isSet(object.maxSupply) ? globalThis.String(object.maxSupply) : "",
      fEmission: isSet(object.fEmission) ? globalThis.String(object.fEmission) : "",
      oneMonthSmoothingDegree: isSet(object.oneMonthSmoothingDegree)
        ? globalThis.String(object.oneMonthSmoothingDegree)
        : "",
      ecosystemTreasuryPercentOfTotalSupply: isSet(object.ecosystemTreasuryPercentOfTotalSupply)
        ? globalThis.String(object.ecosystemTreasuryPercentOfTotalSupply)
        : "",
      foundationTreasuryPercentOfTotalSupply: isSet(object.foundationTreasuryPercentOfTotalSupply)
        ? globalThis.String(object.foundationTreasuryPercentOfTotalSupply)
        : "",
      participantsPercentOfTotalSupply: isSet(object.participantsPercentOfTotalSupply)
        ? globalThis.String(object.participantsPercentOfTotalSupply)
        : "",
      investorsPercentOfTotalSupply: isSet(object.investorsPercentOfTotalSupply)
        ? globalThis.String(object.investorsPercentOfTotalSupply)
        : "",
      teamPercentOfTotalSupply: isSet(object.teamPercentOfTotalSupply)
        ? globalThis.String(object.teamPercentOfTotalSupply)
        : "",
      maximumMonthlyPercentageYield: isSet(object.maximumMonthlyPercentageYield)
        ? globalThis.String(object.maximumMonthlyPercentageYield)
        : "",
      investorsPreseedPercentOfTotalSupply: isSet(object.investorsPreseedPercentOfTotalSupply)
        ? globalThis.String(object.investorsPreseedPercentOfTotalSupply)
        : "",
    };
  },

  toJSON(message: Params): unknown {
    const obj: any = {};
    if (message.mintDenom !== "") {
      obj.mintDenom = message.mintDenom;
    }
    if (message.maxSupply !== "") {
      obj.maxSupply = message.maxSupply;
    }
    if (message.fEmission !== "") {
      obj.fEmission = message.fEmission;
    }
    if (message.oneMonthSmoothingDegree !== "") {
      obj.oneMonthSmoothingDegree = message.oneMonthSmoothingDegree;
    }
    if (message.ecosystemTreasuryPercentOfTotalSupply !== "") {
      obj.ecosystemTreasuryPercentOfTotalSupply = message.ecosystemTreasuryPercentOfTotalSupply;
    }
    if (message.foundationTreasuryPercentOfTotalSupply !== "") {
      obj.foundationTreasuryPercentOfTotalSupply = message.foundationTreasuryPercentOfTotalSupply;
    }
    if (message.participantsPercentOfTotalSupply !== "") {
      obj.participantsPercentOfTotalSupply = message.participantsPercentOfTotalSupply;
    }
    if (message.investorsPercentOfTotalSupply !== "") {
      obj.investorsPercentOfTotalSupply = message.investorsPercentOfTotalSupply;
    }
    if (message.teamPercentOfTotalSupply !== "") {
      obj.teamPercentOfTotalSupply = message.teamPercentOfTotalSupply;
    }
    if (message.maximumMonthlyPercentageYield !== "") {
      obj.maximumMonthlyPercentageYield = message.maximumMonthlyPercentageYield;
    }
    if (message.investorsPreseedPercentOfTotalSupply !== "") {
      obj.investorsPreseedPercentOfTotalSupply = message.investorsPreseedPercentOfTotalSupply;
    }
    return obj;
  },

  create(base?: DeepPartial<Params>): Params {
    return Params.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Params>): Params {
    const message = createBaseParams();
    message.mintDenom = object.mintDenom ?? "";
    message.maxSupply = object.maxSupply ?? "";
    message.fEmission = object.fEmission ?? "";
    message.oneMonthSmoothingDegree = object.oneMonthSmoothingDegree ?? "";
    message.ecosystemTreasuryPercentOfTotalSupply = object.ecosystemTreasuryPercentOfTotalSupply ?? "";
    message.foundationTreasuryPercentOfTotalSupply = object.foundationTreasuryPercentOfTotalSupply ?? "";
    message.participantsPercentOfTotalSupply = object.participantsPercentOfTotalSupply ?? "";
    message.investorsPercentOfTotalSupply = object.investorsPercentOfTotalSupply ?? "";
    message.teamPercentOfTotalSupply = object.teamPercentOfTotalSupply ?? "";
    message.maximumMonthlyPercentageYield = object.maximumMonthlyPercentageYield ?? "";
    message.investorsPreseedPercentOfTotalSupply = object.investorsPreseedPercentOfTotalSupply ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
