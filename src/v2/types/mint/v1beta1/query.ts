// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: mint/v1beta1/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Params } from "./types";

export const protobufPackage = "mint.v1beta1";

/** QueryParamsRequest is the request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}

/** QueryParamsResponse is the response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
  /** params defines the parameters of the module. */
  params?: Params | undefined;
}

/** QueryInflationRequest is the request type for the Query/Inflation RPC method. */
export interface QueryInflationRequest {
}

/**
 * QueryInflationResponse is the response type for the Query/Inflation RPC
 * method.
 */
export interface QueryInflationResponse {
  /** inflation is the current minting inflation value. */
  inflation: Uint8Array;
}

/** query for a big dump of mint module info */
export interface QueryEmissionInfoRequest {
}

/** return information about the emissions rate on query */
export interface QueryEmissionInfoResponse {
  params?: Params | undefined;
  ecosystemBalance: string;
  previousBlockEmission: string;
  ecosystemMintSupplyRemaining: string;
  blocksPerMonth: string;
  blockHeightTargetEILastCalculated: string;
  blockHeightTargetEINextCalculated: string;
  networkStakedTokens: string;
  lockedVestingTokensTotal: string;
  lockedVestingTokensInvestorsPreseed: string;
  lockedVestingTokensInvestorsSeed: string;
  lockedVestingTokensTeam: string;
  ecosystemLocked: string;
  circulatingSupply: string;
  maxSupply: string;
  targetEmissionRatePerUnitStakedToken: string;
  reputersPercent: string;
  validatorsPercent: string;
  maximumMonthlyEmissionPerUnitStakedToken: string;
  targetRewardEmissionPerUnitStakedToken: string;
  emissionPerUnitStakedToken: string;
  emissionPerMonth: string;
  blockEmission: string;
  validatorCut: string;
  alloraRewardsCut: string;
  previousRewardEmissionPerUnitStakedToken: string;
}

function createBaseQueryParamsRequest(): QueryParamsRequest {
  return {};
}

export const QueryParamsRequest: MessageFns<QueryParamsRequest> = {
  encode(_: QueryParamsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryParamsRequest {
    return {};
  },

  toJSON(_: QueryParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<QueryParamsRequest>): QueryParamsRequest {
    return QueryParamsRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<QueryParamsRequest>): QueryParamsRequest {
    const message = createBaseQueryParamsRequest();
    return message;
  },
};

function createBaseQueryParamsResponse(): QueryParamsResponse {
  return { params: undefined };
}

export const QueryParamsResponse: MessageFns<QueryParamsResponse> = {
  encode(message: QueryParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParamsResponse {
    return { params: isSet(object.params) ? Params.fromJSON(object.params) : undefined };
  },

  toJSON(message: QueryParamsResponse): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryParamsResponse>): QueryParamsResponse {
    return QueryParamsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryParamsResponse>): QueryParamsResponse {
    const message = createBaseQueryParamsResponse();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseQueryInflationRequest(): QueryInflationRequest {
  return {};
}

export const QueryInflationRequest: MessageFns<QueryInflationRequest> = {
  encode(_: QueryInflationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryInflationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryInflationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryInflationRequest {
    return {};
  },

  toJSON(_: QueryInflationRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<QueryInflationRequest>): QueryInflationRequest {
    return QueryInflationRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<QueryInflationRequest>): QueryInflationRequest {
    const message = createBaseQueryInflationRequest();
    return message;
  },
};

function createBaseQueryInflationResponse(): QueryInflationResponse {
  return { inflation: new Uint8Array(0) };
}

export const QueryInflationResponse: MessageFns<QueryInflationResponse> = {
  encode(message: QueryInflationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.inflation.length !== 0) {
      writer.uint32(10).bytes(message.inflation);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryInflationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryInflationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.inflation = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryInflationResponse {
    return { inflation: isSet(object.inflation) ? bytesFromBase64(object.inflation) : new Uint8Array(0) };
  },

  toJSON(message: QueryInflationResponse): unknown {
    const obj: any = {};
    if (message.inflation.length !== 0) {
      obj.inflation = base64FromBytes(message.inflation);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryInflationResponse>): QueryInflationResponse {
    return QueryInflationResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryInflationResponse>): QueryInflationResponse {
    const message = createBaseQueryInflationResponse();
    message.inflation = object.inflation ?? new Uint8Array(0);
    return message;
  },
};

function createBaseQueryEmissionInfoRequest(): QueryEmissionInfoRequest {
  return {};
}

export const QueryEmissionInfoRequest: MessageFns<QueryEmissionInfoRequest> = {
  encode(_: QueryEmissionInfoRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryEmissionInfoRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryEmissionInfoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryEmissionInfoRequest {
    return {};
  },

  toJSON(_: QueryEmissionInfoRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<QueryEmissionInfoRequest>): QueryEmissionInfoRequest {
    return QueryEmissionInfoRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<QueryEmissionInfoRequest>): QueryEmissionInfoRequest {
    const message = createBaseQueryEmissionInfoRequest();
    return message;
  },
};

function createBaseQueryEmissionInfoResponse(): QueryEmissionInfoResponse {
  return {
    params: undefined,
    ecosystemBalance: "",
    previousBlockEmission: "",
    ecosystemMintSupplyRemaining: "",
    blocksPerMonth: "0",
    blockHeightTargetEILastCalculated: "0",
    blockHeightTargetEINextCalculated: "0",
    networkStakedTokens: "",
    lockedVestingTokensTotal: "",
    lockedVestingTokensInvestorsPreseed: "",
    lockedVestingTokensInvestorsSeed: "",
    lockedVestingTokensTeam: "",
    ecosystemLocked: "",
    circulatingSupply: "",
    maxSupply: "",
    targetEmissionRatePerUnitStakedToken: "",
    reputersPercent: "",
    validatorsPercent: "",
    maximumMonthlyEmissionPerUnitStakedToken: "",
    targetRewardEmissionPerUnitStakedToken: "",
    emissionPerUnitStakedToken: "",
    emissionPerMonth: "",
    blockEmission: "",
    validatorCut: "",
    alloraRewardsCut: "",
    previousRewardEmissionPerUnitStakedToken: "",
  };
}

export const QueryEmissionInfoResponse: MessageFns<QueryEmissionInfoResponse> = {
  encode(message: QueryEmissionInfoResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    if (message.ecosystemBalance !== "") {
      writer.uint32(18).string(message.ecosystemBalance);
    }
    if (message.previousBlockEmission !== "") {
      writer.uint32(26).string(message.previousBlockEmission);
    }
    if (message.ecosystemMintSupplyRemaining !== "") {
      writer.uint32(34).string(message.ecosystemMintSupplyRemaining);
    }
    if (message.blocksPerMonth !== "0") {
      writer.uint32(40).uint64(message.blocksPerMonth);
    }
    if (message.blockHeightTargetEILastCalculated !== "0") {
      writer.uint32(48).uint64(message.blockHeightTargetEILastCalculated);
    }
    if (message.blockHeightTargetEINextCalculated !== "0") {
      writer.uint32(56).uint64(message.blockHeightTargetEINextCalculated);
    }
    if (message.networkStakedTokens !== "") {
      writer.uint32(66).string(message.networkStakedTokens);
    }
    if (message.lockedVestingTokensTotal !== "") {
      writer.uint32(74).string(message.lockedVestingTokensTotal);
    }
    if (message.lockedVestingTokensInvestorsPreseed !== "") {
      writer.uint32(82).string(message.lockedVestingTokensInvestorsPreseed);
    }
    if (message.lockedVestingTokensInvestorsSeed !== "") {
      writer.uint32(90).string(message.lockedVestingTokensInvestorsSeed);
    }
    if (message.lockedVestingTokensTeam !== "") {
      writer.uint32(98).string(message.lockedVestingTokensTeam);
    }
    if (message.ecosystemLocked !== "") {
      writer.uint32(106).string(message.ecosystemLocked);
    }
    if (message.circulatingSupply !== "") {
      writer.uint32(114).string(message.circulatingSupply);
    }
    if (message.maxSupply !== "") {
      writer.uint32(122).string(message.maxSupply);
    }
    if (message.targetEmissionRatePerUnitStakedToken !== "") {
      writer.uint32(130).string(message.targetEmissionRatePerUnitStakedToken);
    }
    if (message.reputersPercent !== "") {
      writer.uint32(138).string(message.reputersPercent);
    }
    if (message.validatorsPercent !== "") {
      writer.uint32(146).string(message.validatorsPercent);
    }
    if (message.maximumMonthlyEmissionPerUnitStakedToken !== "") {
      writer.uint32(154).string(message.maximumMonthlyEmissionPerUnitStakedToken);
    }
    if (message.targetRewardEmissionPerUnitStakedToken !== "") {
      writer.uint32(162).string(message.targetRewardEmissionPerUnitStakedToken);
    }
    if (message.emissionPerUnitStakedToken !== "") {
      writer.uint32(170).string(message.emissionPerUnitStakedToken);
    }
    if (message.emissionPerMonth !== "") {
      writer.uint32(178).string(message.emissionPerMonth);
    }
    if (message.blockEmission !== "") {
      writer.uint32(186).string(message.blockEmission);
    }
    if (message.validatorCut !== "") {
      writer.uint32(194).string(message.validatorCut);
    }
    if (message.alloraRewardsCut !== "") {
      writer.uint32(202).string(message.alloraRewardsCut);
    }
    if (message.previousRewardEmissionPerUnitStakedToken !== "") {
      writer.uint32(210).string(message.previousRewardEmissionPerUnitStakedToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryEmissionInfoResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryEmissionInfoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.ecosystemBalance = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.previousBlockEmission = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.ecosystemMintSupplyRemaining = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.blocksPerMonth = reader.uint64().toString();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.blockHeightTargetEILastCalculated = reader.uint64().toString();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.blockHeightTargetEINextCalculated = reader.uint64().toString();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.networkStakedTokens = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.lockedVestingTokensTotal = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.lockedVestingTokensInvestorsPreseed = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.lockedVestingTokensInvestorsSeed = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.lockedVestingTokensTeam = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.ecosystemLocked = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.circulatingSupply = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.maxSupply = reader.string();
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.targetEmissionRatePerUnitStakedToken = reader.string();
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.reputersPercent = reader.string();
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.validatorsPercent = reader.string();
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.maximumMonthlyEmissionPerUnitStakedToken = reader.string();
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.targetRewardEmissionPerUnitStakedToken = reader.string();
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.emissionPerUnitStakedToken = reader.string();
          continue;
        }
        case 22: {
          if (tag !== 178) {
            break;
          }

          message.emissionPerMonth = reader.string();
          continue;
        }
        case 23: {
          if (tag !== 186) {
            break;
          }

          message.blockEmission = reader.string();
          continue;
        }
        case 24: {
          if (tag !== 194) {
            break;
          }

          message.validatorCut = reader.string();
          continue;
        }
        case 25: {
          if (tag !== 202) {
            break;
          }

          message.alloraRewardsCut = reader.string();
          continue;
        }
        case 26: {
          if (tag !== 210) {
            break;
          }

          message.previousRewardEmissionPerUnitStakedToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryEmissionInfoResponse {
    return {
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
      ecosystemBalance: isSet(object.ecosystemBalance) ? globalThis.String(object.ecosystemBalance) : "",
      previousBlockEmission: isSet(object.previousBlockEmission) ? globalThis.String(object.previousBlockEmission) : "",
      ecosystemMintSupplyRemaining: isSet(object.ecosystemMintSupplyRemaining)
        ? globalThis.String(object.ecosystemMintSupplyRemaining)
        : "",
      blocksPerMonth: isSet(object.blocksPerMonth) ? globalThis.String(object.blocksPerMonth) : "0",
      blockHeightTargetEILastCalculated: isSet(object.blockHeightTargetEILastCalculated)
        ? globalThis.String(object.blockHeightTargetEILastCalculated)
        : "0",
      blockHeightTargetEINextCalculated: isSet(object.blockHeightTargetEINextCalculated)
        ? globalThis.String(object.blockHeightTargetEINextCalculated)
        : "0",
      networkStakedTokens: isSet(object.networkStakedTokens) ? globalThis.String(object.networkStakedTokens) : "",
      lockedVestingTokensTotal: isSet(object.lockedVestingTokensTotal)
        ? globalThis.String(object.lockedVestingTokensTotal)
        : "",
      lockedVestingTokensInvestorsPreseed: isSet(object.lockedVestingTokensInvestorsPreseed)
        ? globalThis.String(object.lockedVestingTokensInvestorsPreseed)
        : "",
      lockedVestingTokensInvestorsSeed: isSet(object.lockedVestingTokensInvestorsSeed)
        ? globalThis.String(object.lockedVestingTokensInvestorsSeed)
        : "",
      lockedVestingTokensTeam: isSet(object.lockedVestingTokensTeam)
        ? globalThis.String(object.lockedVestingTokensTeam)
        : "",
      ecosystemLocked: isSet(object.ecosystemLocked) ? globalThis.String(object.ecosystemLocked) : "",
      circulatingSupply: isSet(object.circulatingSupply) ? globalThis.String(object.circulatingSupply) : "",
      maxSupply: isSet(object.maxSupply) ? globalThis.String(object.maxSupply) : "",
      targetEmissionRatePerUnitStakedToken: isSet(object.targetEmissionRatePerUnitStakedToken)
        ? globalThis.String(object.targetEmissionRatePerUnitStakedToken)
        : "",
      reputersPercent: isSet(object.reputersPercent) ? globalThis.String(object.reputersPercent) : "",
      validatorsPercent: isSet(object.validatorsPercent) ? globalThis.String(object.validatorsPercent) : "",
      maximumMonthlyEmissionPerUnitStakedToken: isSet(object.maximumMonthlyEmissionPerUnitStakedToken)
        ? globalThis.String(object.maximumMonthlyEmissionPerUnitStakedToken)
        : "",
      targetRewardEmissionPerUnitStakedToken: isSet(object.targetRewardEmissionPerUnitStakedToken)
        ? globalThis.String(object.targetRewardEmissionPerUnitStakedToken)
        : "",
      emissionPerUnitStakedToken: isSet(object.emissionPerUnitStakedToken)
        ? globalThis.String(object.emissionPerUnitStakedToken)
        : "",
      emissionPerMonth: isSet(object.emissionPerMonth) ? globalThis.String(object.emissionPerMonth) : "",
      blockEmission: isSet(object.blockEmission) ? globalThis.String(object.blockEmission) : "",
      validatorCut: isSet(object.validatorCut) ? globalThis.String(object.validatorCut) : "",
      alloraRewardsCut: isSet(object.alloraRewardsCut) ? globalThis.String(object.alloraRewardsCut) : "",
      previousRewardEmissionPerUnitStakedToken: isSet(object.previousRewardEmissionPerUnitStakedToken)
        ? globalThis.String(object.previousRewardEmissionPerUnitStakedToken)
        : "",
    };
  },

  toJSON(message: QueryEmissionInfoResponse): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    if (message.ecosystemBalance !== "") {
      obj.ecosystemBalance = message.ecosystemBalance;
    }
    if (message.previousBlockEmission !== "") {
      obj.previousBlockEmission = message.previousBlockEmission;
    }
    if (message.ecosystemMintSupplyRemaining !== "") {
      obj.ecosystemMintSupplyRemaining = message.ecosystemMintSupplyRemaining;
    }
    if (message.blocksPerMonth !== "0") {
      obj.blocksPerMonth = message.blocksPerMonth;
    }
    if (message.blockHeightTargetEILastCalculated !== "0") {
      obj.blockHeightTargetEILastCalculated = message.blockHeightTargetEILastCalculated;
    }
    if (message.blockHeightTargetEINextCalculated !== "0") {
      obj.blockHeightTargetEINextCalculated = message.blockHeightTargetEINextCalculated;
    }
    if (message.networkStakedTokens !== "") {
      obj.networkStakedTokens = message.networkStakedTokens;
    }
    if (message.lockedVestingTokensTotal !== "") {
      obj.lockedVestingTokensTotal = message.lockedVestingTokensTotal;
    }
    if (message.lockedVestingTokensInvestorsPreseed !== "") {
      obj.lockedVestingTokensInvestorsPreseed = message.lockedVestingTokensInvestorsPreseed;
    }
    if (message.lockedVestingTokensInvestorsSeed !== "") {
      obj.lockedVestingTokensInvestorsSeed = message.lockedVestingTokensInvestorsSeed;
    }
    if (message.lockedVestingTokensTeam !== "") {
      obj.lockedVestingTokensTeam = message.lockedVestingTokensTeam;
    }
    if (message.ecosystemLocked !== "") {
      obj.ecosystemLocked = message.ecosystemLocked;
    }
    if (message.circulatingSupply !== "") {
      obj.circulatingSupply = message.circulatingSupply;
    }
    if (message.maxSupply !== "") {
      obj.maxSupply = message.maxSupply;
    }
    if (message.targetEmissionRatePerUnitStakedToken !== "") {
      obj.targetEmissionRatePerUnitStakedToken = message.targetEmissionRatePerUnitStakedToken;
    }
    if (message.reputersPercent !== "") {
      obj.reputersPercent = message.reputersPercent;
    }
    if (message.validatorsPercent !== "") {
      obj.validatorsPercent = message.validatorsPercent;
    }
    if (message.maximumMonthlyEmissionPerUnitStakedToken !== "") {
      obj.maximumMonthlyEmissionPerUnitStakedToken = message.maximumMonthlyEmissionPerUnitStakedToken;
    }
    if (message.targetRewardEmissionPerUnitStakedToken !== "") {
      obj.targetRewardEmissionPerUnitStakedToken = message.targetRewardEmissionPerUnitStakedToken;
    }
    if (message.emissionPerUnitStakedToken !== "") {
      obj.emissionPerUnitStakedToken = message.emissionPerUnitStakedToken;
    }
    if (message.emissionPerMonth !== "") {
      obj.emissionPerMonth = message.emissionPerMonth;
    }
    if (message.blockEmission !== "") {
      obj.blockEmission = message.blockEmission;
    }
    if (message.validatorCut !== "") {
      obj.validatorCut = message.validatorCut;
    }
    if (message.alloraRewardsCut !== "") {
      obj.alloraRewardsCut = message.alloraRewardsCut;
    }
    if (message.previousRewardEmissionPerUnitStakedToken !== "") {
      obj.previousRewardEmissionPerUnitStakedToken = message.previousRewardEmissionPerUnitStakedToken;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryEmissionInfoResponse>): QueryEmissionInfoResponse {
    return QueryEmissionInfoResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryEmissionInfoResponse>): QueryEmissionInfoResponse {
    const message = createBaseQueryEmissionInfoResponse();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    message.ecosystemBalance = object.ecosystemBalance ?? "";
    message.previousBlockEmission = object.previousBlockEmission ?? "";
    message.ecosystemMintSupplyRemaining = object.ecosystemMintSupplyRemaining ?? "";
    message.blocksPerMonth = object.blocksPerMonth ?? "0";
    message.blockHeightTargetEILastCalculated = object.blockHeightTargetEILastCalculated ?? "0";
    message.blockHeightTargetEINextCalculated = object.blockHeightTargetEINextCalculated ?? "0";
    message.networkStakedTokens = object.networkStakedTokens ?? "";
    message.lockedVestingTokensTotal = object.lockedVestingTokensTotal ?? "";
    message.lockedVestingTokensInvestorsPreseed = object.lockedVestingTokensInvestorsPreseed ?? "";
    message.lockedVestingTokensInvestorsSeed = object.lockedVestingTokensInvestorsSeed ?? "";
    message.lockedVestingTokensTeam = object.lockedVestingTokensTeam ?? "";
    message.ecosystemLocked = object.ecosystemLocked ?? "";
    message.circulatingSupply = object.circulatingSupply ?? "";
    message.maxSupply = object.maxSupply ?? "";
    message.targetEmissionRatePerUnitStakedToken = object.targetEmissionRatePerUnitStakedToken ?? "";
    message.reputersPercent = object.reputersPercent ?? "";
    message.validatorsPercent = object.validatorsPercent ?? "";
    message.maximumMonthlyEmissionPerUnitStakedToken = object.maximumMonthlyEmissionPerUnitStakedToken ?? "";
    message.targetRewardEmissionPerUnitStakedToken = object.targetRewardEmissionPerUnitStakedToken ?? "";
    message.emissionPerUnitStakedToken = object.emissionPerUnitStakedToken ?? "";
    message.emissionPerMonth = object.emissionPerMonth ?? "";
    message.blockEmission = object.blockEmission ?? "";
    message.validatorCut = object.validatorCut ?? "";
    message.alloraRewardsCut = object.alloraRewardsCut ?? "";
    message.previousRewardEmissionPerUnitStakedToken = object.previousRewardEmissionPerUnitStakedToken ?? "";
    return message;
  },
};

/** Query provides defines the gRPC querier service. */
export interface Query {
  /** Params returns the total set of minting parameters. */
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
  /** Inflation returns the current minting inflation value. */
  Inflation(request: QueryInflationRequest): Promise<QueryInflationResponse>;
  EmissionInfo(request: QueryEmissionInfoRequest): Promise<QueryEmissionInfoResponse>;
}

export const QueryServiceName = "mint.v1beta1.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.Params = this.Params.bind(this);
    this.Inflation = this.Inflation.bind(this);
    this.EmissionInfo = this.EmissionInfo.bind(this);
  }
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse> {
    const data = QueryParamsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Params", data);
    return promise.then((data) => QueryParamsResponse.decode(new BinaryReader(data)));
  }

  Inflation(request: QueryInflationRequest): Promise<QueryInflationResponse> {
    const data = QueryInflationRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Inflation", data);
    return promise.then((data) => QueryInflationResponse.decode(new BinaryReader(data)));
  }

  EmissionInfo(request: QueryEmissionInfoRequest): Promise<QueryEmissionInfoResponse> {
    const data = QueryEmissionInfoRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "EmissionInfo", data);
    return promise.then((data) => QueryEmissionInfoResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
