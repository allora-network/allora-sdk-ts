// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: cosmos/protocolpool/v1/genesis.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Budget, ContinuousFund } from "./types";

export const protobufPackage = "cosmos.protocolpool.v1";

/** GenesisState defines the protocolpool module's genesis state. */
export interface GenesisState {
  /** ContinuousFund defines the continuous funds at genesis. */
  continuousFund: ContinuousFund[];
  /** Budget defines the budget proposals at genesis. */
  budget: Budget[];
  toDistribute: string;
}

function createBaseGenesisState(): GenesisState {
  return { continuousFund: [], budget: [], toDistribute: "" };
}

export const GenesisState: MessageFns<GenesisState> = {
  encode(message: GenesisState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.continuousFund) {
      ContinuousFund.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.budget) {
      Budget.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.toDistribute !== "") {
      writer.uint32(26).string(message.toDistribute);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenesisState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.continuousFund.push(ContinuousFund.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.budget.push(Budget.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.toDistribute = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenesisState {
    return {
      continuousFund: globalThis.Array.isArray(object?.continuousFund)
        ? object.continuousFund.map((e: any) => ContinuousFund.fromJSON(e))
        : [],
      budget: globalThis.Array.isArray(object?.budget) ? object.budget.map((e: any) => Budget.fromJSON(e)) : [],
      toDistribute: isSet(object.toDistribute) ? globalThis.String(object.toDistribute) : "",
    };
  },

  toJSON(message: GenesisState): unknown {
    const obj: any = {};
    if (message.continuousFund?.length) {
      obj.continuousFund = message.continuousFund.map((e) => ContinuousFund.toJSON(e));
    }
    if (message.budget?.length) {
      obj.budget = message.budget.map((e) => Budget.toJSON(e));
    }
    if (message.toDistribute !== "") {
      obj.toDistribute = message.toDistribute;
    }
    return obj;
  },

  create(base?: DeepPartial<GenesisState>): GenesisState {
    return GenesisState.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenesisState>): GenesisState {
    const message = createBaseGenesisState();
    message.continuousFund = object.continuousFund?.map((e) => ContinuousFund.fromPartial(e)) || [];
    message.budget = object.budget?.map((e) => Budget.fromPartial(e)) || [];
    message.toDistribute = object.toDistribute ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
