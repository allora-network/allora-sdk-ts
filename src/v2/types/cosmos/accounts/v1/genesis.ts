// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: cosmos/accounts/v1/genesis.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "cosmos.accounts.v1";

/** GenesisState defines the accounts' module's genesis state. */
export interface GenesisState {
  /** account_number is the latest account number. */
  accountNumber: string;
  /** accounts are the genesis accounts. */
  accounts: GenesisAccount[];
}

/** GenesisAccount defines an account to be initialized in the genesis state. */
export interface GenesisAccount {
  /** address is the address of the account. */
  address: string;
  /** account_type is the account type of the account. */
  accountType: string;
  /** account_number is the account number of the account. */
  accountNumber: string;
  /** state is the account state represented as a slice of raw key value byte pairs. */
  state: KVPair[];
}

/** KVPair defines a key value pair. */
export interface KVPair {
  /** key is the key of the pair. */
  key: Uint8Array;
  /** value is the value of the pair. */
  value: Uint8Array;
}

function createBaseGenesisState(): GenesisState {
  return { accountNumber: "0", accounts: [] };
}

export const GenesisState: MessageFns<GenesisState> = {
  encode(message: GenesisState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accountNumber !== "0") {
      writer.uint32(8).uint64(message.accountNumber);
    }
    for (const v of message.accounts) {
      GenesisAccount.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenesisState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.accountNumber = reader.uint64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.accounts.push(GenesisAccount.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenesisState {
    return {
      accountNumber: isSet(object.accountNumber) ? globalThis.String(object.accountNumber) : "0",
      accounts: globalThis.Array.isArray(object?.accounts)
        ? object.accounts.map((e: any) => GenesisAccount.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GenesisState): unknown {
    const obj: any = {};
    if (message.accountNumber !== "0") {
      obj.accountNumber = message.accountNumber;
    }
    if (message.accounts?.length) {
      obj.accounts = message.accounts.map((e) => GenesisAccount.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<GenesisState>): GenesisState {
    return GenesisState.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenesisState>): GenesisState {
    const message = createBaseGenesisState();
    message.accountNumber = object.accountNumber ?? "0";
    message.accounts = object.accounts?.map((e) => GenesisAccount.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGenesisAccount(): GenesisAccount {
  return { address: "", accountType: "", accountNumber: "0", state: [] };
}

export const GenesisAccount: MessageFns<GenesisAccount> = {
  encode(message: GenesisAccount, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.accountType !== "") {
      writer.uint32(18).string(message.accountType);
    }
    if (message.accountNumber !== "0") {
      writer.uint32(24).uint64(message.accountNumber);
    }
    for (const v of message.state) {
      KVPair.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenesisAccount {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisAccount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.accountType = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.accountNumber = reader.uint64().toString();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.state.push(KVPair.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenesisAccount {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      accountType: isSet(object.accountType) ? globalThis.String(object.accountType) : "",
      accountNumber: isSet(object.accountNumber) ? globalThis.String(object.accountNumber) : "0",
      state: globalThis.Array.isArray(object?.state) ? object.state.map((e: any) => KVPair.fromJSON(e)) : [],
    };
  },

  toJSON(message: GenesisAccount): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.accountType !== "") {
      obj.accountType = message.accountType;
    }
    if (message.accountNumber !== "0") {
      obj.accountNumber = message.accountNumber;
    }
    if (message.state?.length) {
      obj.state = message.state.map((e) => KVPair.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<GenesisAccount>): GenesisAccount {
    return GenesisAccount.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenesisAccount>): GenesisAccount {
    const message = createBaseGenesisAccount();
    message.address = object.address ?? "";
    message.accountType = object.accountType ?? "";
    message.accountNumber = object.accountNumber ?? "0";
    message.state = object.state?.map((e) => KVPair.fromPartial(e)) || [];
    return message;
  },
};

function createBaseKVPair(): KVPair {
  return { key: new Uint8Array(0), value: new Uint8Array(0) };
}

export const KVPair: MessageFns<KVPair> = {
  encode(message: KVPair, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key.length !== 0) {
      writer.uint32(10).bytes(message.key);
    }
    if (message.value.length !== 0) {
      writer.uint32(18).bytes(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KVPair {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKVPair();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KVPair {
    return {
      key: isSet(object.key) ? bytesFromBase64(object.key) : new Uint8Array(0),
      value: isSet(object.value) ? bytesFromBase64(object.value) : new Uint8Array(0),
    };
  },

  toJSON(message: KVPair): unknown {
    const obj: any = {};
    if (message.key.length !== 0) {
      obj.key = base64FromBytes(message.key);
    }
    if (message.value.length !== 0) {
      obj.value = base64FromBytes(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<KVPair>): KVPair {
    return KVPair.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<KVPair>): KVPair {
    const message = createBaseKVPair();
    message.key = object.key ?? new Uint8Array(0);
    message.value = object.value ?? new Uint8Array(0);
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
