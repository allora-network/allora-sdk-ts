// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: cosmos/group/module/v1/module.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Duration } from "../../../../google/protobuf/duration";

export const protobufPackage = "cosmos.group.module.v1";

/** Module is the config object of the group module. */
export interface Module {
  /**
   * max_execution_period defines the max duration after a proposal's voting period ends that members can send a MsgExec
   * to execute the proposal.
   */
  maxExecutionPeriod?:
    | Duration
    | undefined;
  /**
   * MaxMetadataLen defines the max chars allowed in all
   * messages that allows creating or updating a group
   * with a metadata field
   * Defaults to 255 if not explicitly set.
   */
  maxMetadataLen: string;
  /**
   * MaxProposalTitleLen defines the max chars allowed
   * in string for the MsgSubmitProposal and Proposal
   * summary field
   * Defaults to 255 if not explicitly set.
   */
  maxProposalTitleLen: string;
  /**
   * MaxProposalSummaryLen defines the max chars allowed
   * in string for the MsgSubmitProposal and Proposal
   * summary field
   * Defaults to 10200 if not explicitly set.
   */
  maxProposalSummaryLen: string;
}

function createBaseModule(): Module {
  return { maxExecutionPeriod: undefined, maxMetadataLen: "0", maxProposalTitleLen: "0", maxProposalSummaryLen: "0" };
}

export const Module: MessageFns<Module> = {
  encode(message: Module, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.maxExecutionPeriod !== undefined) {
      Duration.encode(message.maxExecutionPeriod, writer.uint32(10).fork()).join();
    }
    if (message.maxMetadataLen !== "0") {
      writer.uint32(16).uint64(message.maxMetadataLen);
    }
    if (message.maxProposalTitleLen !== "0") {
      writer.uint32(24).uint64(message.maxProposalTitleLen);
    }
    if (message.maxProposalSummaryLen !== "0") {
      writer.uint32(32).uint64(message.maxProposalSummaryLen);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Module {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseModule();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.maxExecutionPeriod = Duration.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.maxMetadataLen = reader.uint64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.maxProposalTitleLen = reader.uint64().toString();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.maxProposalSummaryLen = reader.uint64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Module {
    return {
      maxExecutionPeriod: isSet(object.maxExecutionPeriod) ? Duration.fromJSON(object.maxExecutionPeriod) : undefined,
      maxMetadataLen: isSet(object.maxMetadataLen) ? globalThis.String(object.maxMetadataLen) : "0",
      maxProposalTitleLen: isSet(object.maxProposalTitleLen) ? globalThis.String(object.maxProposalTitleLen) : "0",
      maxProposalSummaryLen: isSet(object.maxProposalSummaryLen)
        ? globalThis.String(object.maxProposalSummaryLen)
        : "0",
    };
  },

  toJSON(message: Module): unknown {
    const obj: any = {};
    if (message.maxExecutionPeriod !== undefined) {
      obj.maxExecutionPeriod = Duration.toJSON(message.maxExecutionPeriod);
    }
    if (message.maxMetadataLen !== "0") {
      obj.maxMetadataLen = message.maxMetadataLen;
    }
    if (message.maxProposalTitleLen !== "0") {
      obj.maxProposalTitleLen = message.maxProposalTitleLen;
    }
    if (message.maxProposalSummaryLen !== "0") {
      obj.maxProposalSummaryLen = message.maxProposalSummaryLen;
    }
    return obj;
  },

  create(base?: DeepPartial<Module>): Module {
    return Module.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Module>): Module {
    const message = createBaseModule();
    message.maxExecutionPeriod = (object.maxExecutionPeriod !== undefined && object.maxExecutionPeriod !== null)
      ? Duration.fromPartial(object.maxExecutionPeriod)
      : undefined;
    message.maxMetadataLen = object.maxMetadataLen ?? "0";
    message.maxProposalTitleLen = object.maxProposalTitleLen ?? "0";
    message.maxProposalSummaryLen = object.maxProposalSummaryLen ?? "0";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
