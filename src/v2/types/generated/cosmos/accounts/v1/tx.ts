// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: cosmos/accounts/v1/tx.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Any } from "../../../google/protobuf/any";
import { Coin } from "../../base/v1beta1/coin";
import { TxRaw } from "../../tx/v1beta1/tx";

export const protobufPackage = "cosmos.accounts.v1";

/** MsgInit defines the Create request type for the Msg/Create RPC method. */
export interface MsgInit {
  /** sender is the address of the sender of this message. */
  sender: string;
  /** account_type is the type of the account to be created. */
  accountType: string;
  /** message is the message to be sent to the account. */
  message?:
    | Any
    | undefined;
  /**
   * funds contains the coins that the account wants to
   * send alongside the request.
   */
  funds: Coin[];
}

/** MsgInitResponse defines the Create response type for the Msg/Create RPC method. */
export interface MsgInitResponse {
  /** account_address is the address of the newly created account. */
  accountAddress: string;
  /** response is the response returned by the account implementation. */
  response?: Any | undefined;
}

/** MsgExecute defines the Execute request type for the Msg/Execute RPC method. */
export interface MsgExecute {
  /** sender is the address of the sender of this message. */
  sender: string;
  /** target is the address of the account to be executed. */
  target: string;
  /** message is the message to be sent to the account. */
  message?:
    | Any
    | undefined;
  /**
   * funds contains the coins that the account wants to
   * send alongside the request.
   */
  funds: Coin[];
}

/** MsgExecuteResponse defines the Execute response type for the Msg/Execute RPC method. */
export interface MsgExecuteResponse {
  /** response is the response returned by the account implementation. */
  response?: Any | undefined;
}

/** MsgExecuteBundle defines the ExecuteBundle request type for the Msg/ExecuteBundle RPC method. */
export interface MsgExecuteBundle {
  /**
   * bundler defines the entity going through the standard TX flow
   * to execute one or multiple UserOperations on behalf of others.
   */
  bundler: string;
  /** txs defines the txs to execute on behalf of other users. */
  txs: TxRaw[];
}

/** BundledTxResponse defines the response of a bundled tx. */
export interface BundledTxResponse {
  execResponses?: Any | undefined;
  error: string;
}

/** MsgExecuteBundleResponse defines the ExecuteBundle response type for the Msg/ExecuteBundle RPC method. */
export interface MsgExecuteBundleResponse {
  /** responses is the list of responses returned by the account implementations. */
  responses: BundledTxResponse[];
}

function createBaseMsgInit(): MsgInit {
  return { sender: "", accountType: "", message: undefined, funds: [] };
}

export const MsgInit: MessageFns<MsgInit> = {
  encode(message: MsgInit, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.accountType !== "") {
      writer.uint32(18).string(message.accountType);
    }
    if (message.message !== undefined) {
      Any.encode(message.message, writer.uint32(26).fork()).join();
    }
    for (const v of message.funds) {
      Coin.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgInit {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgInit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sender = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.accountType = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.message = Any.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.funds.push(Coin.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgInit {
    return {
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      accountType: isSet(object.accountType) ? globalThis.String(object.accountType) : "",
      message: isSet(object.message) ? Any.fromJSON(object.message) : undefined,
      funds: globalThis.Array.isArray(object?.funds) ? object.funds.map((e: any) => Coin.fromJSON(e)) : [],
    };
  },

  toJSON(message: MsgInit): unknown {
    const obj: any = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.accountType !== "") {
      obj.accountType = message.accountType;
    }
    if (message.message !== undefined) {
      obj.message = Any.toJSON(message.message);
    }
    if (message.funds?.length) {
      obj.funds = message.funds.map((e) => Coin.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<MsgInit>): MsgInit {
    return MsgInit.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgInit>): MsgInit {
    const message = createBaseMsgInit();
    message.sender = object.sender ?? "";
    message.accountType = object.accountType ?? "";
    message.message = (object.message !== undefined && object.message !== null)
      ? Any.fromPartial(object.message)
      : undefined;
    message.funds = object.funds?.map((e) => Coin.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMsgInitResponse(): MsgInitResponse {
  return { accountAddress: "", response: undefined };
}

export const MsgInitResponse: MessageFns<MsgInitResponse> = {
  encode(message: MsgInitResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accountAddress !== "") {
      writer.uint32(10).string(message.accountAddress);
    }
    if (message.response !== undefined) {
      Any.encode(message.response, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgInitResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgInitResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.accountAddress = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.response = Any.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgInitResponse {
    return {
      accountAddress: isSet(object.accountAddress) ? globalThis.String(object.accountAddress) : "",
      response: isSet(object.response) ? Any.fromJSON(object.response) : undefined,
    };
  },

  toJSON(message: MsgInitResponse): unknown {
    const obj: any = {};
    if (message.accountAddress !== "") {
      obj.accountAddress = message.accountAddress;
    }
    if (message.response !== undefined) {
      obj.response = Any.toJSON(message.response);
    }
    return obj;
  },

  create(base?: DeepPartial<MsgInitResponse>): MsgInitResponse {
    return MsgInitResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgInitResponse>): MsgInitResponse {
    const message = createBaseMsgInitResponse();
    message.accountAddress = object.accountAddress ?? "";
    message.response = (object.response !== undefined && object.response !== null)
      ? Any.fromPartial(object.response)
      : undefined;
    return message;
  },
};

function createBaseMsgExecute(): MsgExecute {
  return { sender: "", target: "", message: undefined, funds: [] };
}

export const MsgExecute: MessageFns<MsgExecute> = {
  encode(message: MsgExecute, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.target !== "") {
      writer.uint32(18).string(message.target);
    }
    if (message.message !== undefined) {
      Any.encode(message.message, writer.uint32(26).fork()).join();
    }
    for (const v of message.funds) {
      Coin.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgExecute {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgExecute();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sender = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.target = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.message = Any.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.funds.push(Coin.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgExecute {
    return {
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      target: isSet(object.target) ? globalThis.String(object.target) : "",
      message: isSet(object.message) ? Any.fromJSON(object.message) : undefined,
      funds: globalThis.Array.isArray(object?.funds) ? object.funds.map((e: any) => Coin.fromJSON(e)) : [],
    };
  },

  toJSON(message: MsgExecute): unknown {
    const obj: any = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.target !== "") {
      obj.target = message.target;
    }
    if (message.message !== undefined) {
      obj.message = Any.toJSON(message.message);
    }
    if (message.funds?.length) {
      obj.funds = message.funds.map((e) => Coin.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<MsgExecute>): MsgExecute {
    return MsgExecute.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgExecute>): MsgExecute {
    const message = createBaseMsgExecute();
    message.sender = object.sender ?? "";
    message.target = object.target ?? "";
    message.message = (object.message !== undefined && object.message !== null)
      ? Any.fromPartial(object.message)
      : undefined;
    message.funds = object.funds?.map((e) => Coin.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMsgExecuteResponse(): MsgExecuteResponse {
  return { response: undefined };
}

export const MsgExecuteResponse: MessageFns<MsgExecuteResponse> = {
  encode(message: MsgExecuteResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.response !== undefined) {
      Any.encode(message.response, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgExecuteResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgExecuteResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.response = Any.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgExecuteResponse {
    return { response: isSet(object.response) ? Any.fromJSON(object.response) : undefined };
  },

  toJSON(message: MsgExecuteResponse): unknown {
    const obj: any = {};
    if (message.response !== undefined) {
      obj.response = Any.toJSON(message.response);
    }
    return obj;
  },

  create(base?: DeepPartial<MsgExecuteResponse>): MsgExecuteResponse {
    return MsgExecuteResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgExecuteResponse>): MsgExecuteResponse {
    const message = createBaseMsgExecuteResponse();
    message.response = (object.response !== undefined && object.response !== null)
      ? Any.fromPartial(object.response)
      : undefined;
    return message;
  },
};

function createBaseMsgExecuteBundle(): MsgExecuteBundle {
  return { bundler: "", txs: [] };
}

export const MsgExecuteBundle: MessageFns<MsgExecuteBundle> = {
  encode(message: MsgExecuteBundle, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bundler !== "") {
      writer.uint32(10).string(message.bundler);
    }
    for (const v of message.txs) {
      TxRaw.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgExecuteBundle {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgExecuteBundle();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.bundler = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.txs.push(TxRaw.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgExecuteBundle {
    return {
      bundler: isSet(object.bundler) ? globalThis.String(object.bundler) : "",
      txs: globalThis.Array.isArray(object?.txs) ? object.txs.map((e: any) => TxRaw.fromJSON(e)) : [],
    };
  },

  toJSON(message: MsgExecuteBundle): unknown {
    const obj: any = {};
    if (message.bundler !== "") {
      obj.bundler = message.bundler;
    }
    if (message.txs?.length) {
      obj.txs = message.txs.map((e) => TxRaw.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<MsgExecuteBundle>): MsgExecuteBundle {
    return MsgExecuteBundle.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgExecuteBundle>): MsgExecuteBundle {
    const message = createBaseMsgExecuteBundle();
    message.bundler = object.bundler ?? "";
    message.txs = object.txs?.map((e) => TxRaw.fromPartial(e)) || [];
    return message;
  },
};

function createBaseBundledTxResponse(): BundledTxResponse {
  return { execResponses: undefined, error: "" };
}

export const BundledTxResponse: MessageFns<BundledTxResponse> = {
  encode(message: BundledTxResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.execResponses !== undefined) {
      Any.encode(message.execResponses, writer.uint32(10).fork()).join();
    }
    if (message.error !== "") {
      writer.uint32(18).string(message.error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BundledTxResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBundledTxResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.execResponses = Any.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.error = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BundledTxResponse {
    return {
      execResponses: isSet(object.execResponses) ? Any.fromJSON(object.execResponses) : undefined,
      error: isSet(object.error) ? globalThis.String(object.error) : "",
    };
  },

  toJSON(message: BundledTxResponse): unknown {
    const obj: any = {};
    if (message.execResponses !== undefined) {
      obj.execResponses = Any.toJSON(message.execResponses);
    }
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create(base?: DeepPartial<BundledTxResponse>): BundledTxResponse {
    return BundledTxResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BundledTxResponse>): BundledTxResponse {
    const message = createBaseBundledTxResponse();
    message.execResponses = (object.execResponses !== undefined && object.execResponses !== null)
      ? Any.fromPartial(object.execResponses)
      : undefined;
    message.error = object.error ?? "";
    return message;
  },
};

function createBaseMsgExecuteBundleResponse(): MsgExecuteBundleResponse {
  return { responses: [] };
}

export const MsgExecuteBundleResponse: MessageFns<MsgExecuteBundleResponse> = {
  encode(message: MsgExecuteBundleResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.responses) {
      BundledTxResponse.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgExecuteBundleResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgExecuteBundleResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.responses.push(BundledTxResponse.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgExecuteBundleResponse {
    return {
      responses: globalThis.Array.isArray(object?.responses)
        ? object.responses.map((e: any) => BundledTxResponse.fromJSON(e))
        : [],
    };
  },

  toJSON(message: MsgExecuteBundleResponse): unknown {
    const obj: any = {};
    if (message.responses?.length) {
      obj.responses = message.responses.map((e) => BundledTxResponse.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<MsgExecuteBundleResponse>): MsgExecuteBundleResponse {
    return MsgExecuteBundleResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgExecuteBundleResponse>): MsgExecuteBundleResponse {
    const message = createBaseMsgExecuteBundleResponse();
    message.responses = object.responses?.map((e) => BundledTxResponse.fromPartial(e)) || [];
    return message;
  },
};

/** Msg defines the Msg service for the x/accounts module. */
export interface Msg {
  /** Init creates a new account in the chain. */
  Init(request: MsgInit): Promise<MsgInitResponse>;
  /** Execute executes a message to the target account. */
  Execute(request: MsgExecute): Promise<MsgExecuteResponse>;
  /**
   * ExecuteBundle pertains account abstraction, it is used by the bundler
   * to execute multiple UserOperations in a single transaction message.
   */
  ExecuteBundle(request: MsgExecuteBundle): Promise<MsgExecuteBundleResponse>;
}

export const MsgServiceName = "cosmos.accounts.v1.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.Init = this.Init.bind(this);
    this.Execute = this.Execute.bind(this);
    this.ExecuteBundle = this.ExecuteBundle.bind(this);
  }
  Init(request: MsgInit): Promise<MsgInitResponse> {
    const data = MsgInit.encode(request).finish();
    const promise = this.rpc.request(this.service, "Init", data);
    return promise.then((data) => MsgInitResponse.decode(new BinaryReader(data)));
  }

  Execute(request: MsgExecute): Promise<MsgExecuteResponse> {
    const data = MsgExecute.encode(request).finish();
    const promise = this.rpc.request(this.service, "Execute", data);
    return promise.then((data) => MsgExecuteResponse.decode(new BinaryReader(data)));
  }

  ExecuteBundle(request: MsgExecuteBundle): Promise<MsgExecuteBundleResponse> {
    const data = MsgExecuteBundle.encode(request).finish();
    const promise = this.rpc.request(this.service, "ExecuteBundle", data);
    return promise.then((data) => MsgExecuteBundleResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
