// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: cosmos/accounts/defaults/base/v1/base.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "cosmos.accounts.defaults.base.v1";

/** MsgInit is used to initialize a base account. */
export interface MsgInit {
  /** pub_key defines the secp256k1 pubkey for the account. */
  pubKey: Uint8Array;
}

/**
 * MsgInitResponse is the response returned after base account initialization.
 * This is empty.
 */
export interface MsgInitResponse {
}

/** MsgSwapPubKey is used to change the pubkey for the account. */
export interface MsgSwapPubKey {
  /** new_pub_key defines the secp256k1 pubkey to swap the account to. */
  newPubKey: Uint8Array;
}

/**
 * MsgSwapPubKeyResponse is the response for the MsgSwapPubKey message.
 * This is empty.
 */
export interface MsgSwapPubKeyResponse {
}

/** QuerySequence is the request for the account sequence. */
export interface QuerySequence {
}

/** QuerySequenceResponse returns the sequence of the account. */
export interface QuerySequenceResponse {
  /** sequence is the current sequence of the account. */
  sequence: string;
}

function createBaseMsgInit(): MsgInit {
  return { pubKey: new Uint8Array(0) };
}

export const MsgInit: MessageFns<MsgInit> = {
  encode(message: MsgInit, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pubKey.length !== 0) {
      writer.uint32(10).bytes(message.pubKey);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgInit {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgInit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pubKey = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgInit {
    return { pubKey: isSet(object.pubKey) ? bytesFromBase64(object.pubKey) : new Uint8Array(0) };
  },

  toJSON(message: MsgInit): unknown {
    const obj: any = {};
    if (message.pubKey.length !== 0) {
      obj.pubKey = base64FromBytes(message.pubKey);
    }
    return obj;
  },

  create(base?: DeepPartial<MsgInit>): MsgInit {
    return MsgInit.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgInit>): MsgInit {
    const message = createBaseMsgInit();
    message.pubKey = object.pubKey ?? new Uint8Array(0);
    return message;
  },
};

function createBaseMsgInitResponse(): MsgInitResponse {
  return {};
}

export const MsgInitResponse: MessageFns<MsgInitResponse> = {
  encode(_: MsgInitResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgInitResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgInitResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgInitResponse {
    return {};
  },

  toJSON(_: MsgInitResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgInitResponse>): MsgInitResponse {
    return MsgInitResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgInitResponse>): MsgInitResponse {
    const message = createBaseMsgInitResponse();
    return message;
  },
};

function createBaseMsgSwapPubKey(): MsgSwapPubKey {
  return { newPubKey: new Uint8Array(0) };
}

export const MsgSwapPubKey: MessageFns<MsgSwapPubKey> = {
  encode(message: MsgSwapPubKey, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.newPubKey.length !== 0) {
      writer.uint32(10).bytes(message.newPubKey);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgSwapPubKey {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSwapPubKey();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.newPubKey = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgSwapPubKey {
    return { newPubKey: isSet(object.newPubKey) ? bytesFromBase64(object.newPubKey) : new Uint8Array(0) };
  },

  toJSON(message: MsgSwapPubKey): unknown {
    const obj: any = {};
    if (message.newPubKey.length !== 0) {
      obj.newPubKey = base64FromBytes(message.newPubKey);
    }
    return obj;
  },

  create(base?: DeepPartial<MsgSwapPubKey>): MsgSwapPubKey {
    return MsgSwapPubKey.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgSwapPubKey>): MsgSwapPubKey {
    const message = createBaseMsgSwapPubKey();
    message.newPubKey = object.newPubKey ?? new Uint8Array(0);
    return message;
  },
};

function createBaseMsgSwapPubKeyResponse(): MsgSwapPubKeyResponse {
  return {};
}

export const MsgSwapPubKeyResponse: MessageFns<MsgSwapPubKeyResponse> = {
  encode(_: MsgSwapPubKeyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgSwapPubKeyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSwapPubKeyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgSwapPubKeyResponse {
    return {};
  },

  toJSON(_: MsgSwapPubKeyResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgSwapPubKeyResponse>): MsgSwapPubKeyResponse {
    return MsgSwapPubKeyResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgSwapPubKeyResponse>): MsgSwapPubKeyResponse {
    const message = createBaseMsgSwapPubKeyResponse();
    return message;
  },
};

function createBaseQuerySequence(): QuerySequence {
  return {};
}

export const QuerySequence: MessageFns<QuerySequence> = {
  encode(_: QuerySequence, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QuerySequence {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQuerySequence();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QuerySequence {
    return {};
  },

  toJSON(_: QuerySequence): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<QuerySequence>): QuerySequence {
    return QuerySequence.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<QuerySequence>): QuerySequence {
    const message = createBaseQuerySequence();
    return message;
  },
};

function createBaseQuerySequenceResponse(): QuerySequenceResponse {
  return { sequence: "0" };
}

export const QuerySequenceResponse: MessageFns<QuerySequenceResponse> = {
  encode(message: QuerySequenceResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sequence !== "0") {
      writer.uint32(8).uint64(message.sequence);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QuerySequenceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQuerySequenceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.sequence = reader.uint64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QuerySequenceResponse {
    return { sequence: isSet(object.sequence) ? globalThis.String(object.sequence) : "0" };
  },

  toJSON(message: QuerySequenceResponse): unknown {
    const obj: any = {};
    if (message.sequence !== "0") {
      obj.sequence = message.sequence;
    }
    return obj;
  },

  create(base?: DeepPartial<QuerySequenceResponse>): QuerySequenceResponse {
    return QuerySequenceResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QuerySequenceResponse>): QuerySequenceResponse {
    const message = createBaseQuerySequenceResponse();
    message.sequence = object.sequence ?? "0";
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
