// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: cosmos/accounts/interfaces/account_abstraction/v1/interface.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Tx, TxRaw } from "../../../../tx/v1beta1/tx";

export const protobufPackage = "cosmos.accounts.interfaces.account_abstraction.v1";

/**
 * MsgAuthenticate is a message that an x/account account abstraction implementer
 * must handle to authenticate a transaction. Always ensure the caller is the Accounts module.
 */
export interface MsgAuthenticate {
  /**
   * bundler defines the address of the bundler that sent the operation.
   * NOTE: in case the operation was sent directly by the user, this field will reflect
   * the user address.
   */
  bundler: string;
  /** raw_tx defines the raw version of the tx, this is useful to compute the signature quickly. */
  rawTx?:
    | TxRaw
    | undefined;
  /** tx defines the decoded version of the tx, coming from raw_tx. */
  tx?:
    | Tx
    | undefined;
  /**
   * signer_index defines the index of the signer in the tx.
   * Specifically this can be used to extract the signature at the correct
   * index.
   */
  signerIndex: number;
}

/**
 * MsgAuthenticateResponse is the response to MsgAuthenticate.
 * The authentication either fails or succeeds, this is why
 * there are no auxiliary fields to the response.
 */
export interface MsgAuthenticateResponse {
}

/**
 * QueryAuthenticationMethods is a query that an x/account account abstraction implementer
 * must handle to return the authentication methods that the account supports.
 */
export interface QueryAuthenticationMethods {
}

/** QueryAuthenticationMethodsResponse is the response to QueryAuthenticationMethods. */
export interface QueryAuthenticationMethodsResponse {
  /** authentication_methods are the authentication methods that the account supports. */
  authenticationMethods: string[];
}

function createBaseMsgAuthenticate(): MsgAuthenticate {
  return { bundler: "", rawTx: undefined, tx: undefined, signerIndex: 0 };
}

export const MsgAuthenticate: MessageFns<MsgAuthenticate> = {
  encode(message: MsgAuthenticate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bundler !== "") {
      writer.uint32(10).string(message.bundler);
    }
    if (message.rawTx !== undefined) {
      TxRaw.encode(message.rawTx, writer.uint32(18).fork()).join();
    }
    if (message.tx !== undefined) {
      Tx.encode(message.tx, writer.uint32(26).fork()).join();
    }
    if (message.signerIndex !== 0) {
      writer.uint32(32).uint32(message.signerIndex);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgAuthenticate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgAuthenticate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.bundler = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.rawTx = TxRaw.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.tx = Tx.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.signerIndex = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgAuthenticate {
    return {
      bundler: isSet(object.bundler) ? globalThis.String(object.bundler) : "",
      rawTx: isSet(object.rawTx) ? TxRaw.fromJSON(object.rawTx) : undefined,
      tx: isSet(object.tx) ? Tx.fromJSON(object.tx) : undefined,
      signerIndex: isSet(object.signerIndex) ? globalThis.Number(object.signerIndex) : 0,
    };
  },

  toJSON(message: MsgAuthenticate): unknown {
    const obj: any = {};
    if (message.bundler !== "") {
      obj.bundler = message.bundler;
    }
    if (message.rawTx !== undefined) {
      obj.rawTx = TxRaw.toJSON(message.rawTx);
    }
    if (message.tx !== undefined) {
      obj.tx = Tx.toJSON(message.tx);
    }
    if (message.signerIndex !== 0) {
      obj.signerIndex = Math.round(message.signerIndex);
    }
    return obj;
  },

  create(base?: DeepPartial<MsgAuthenticate>): MsgAuthenticate {
    return MsgAuthenticate.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgAuthenticate>): MsgAuthenticate {
    const message = createBaseMsgAuthenticate();
    message.bundler = object.bundler ?? "";
    message.rawTx = (object.rawTx !== undefined && object.rawTx !== null) ? TxRaw.fromPartial(object.rawTx) : undefined;
    message.tx = (object.tx !== undefined && object.tx !== null) ? Tx.fromPartial(object.tx) : undefined;
    message.signerIndex = object.signerIndex ?? 0;
    return message;
  },
};

function createBaseMsgAuthenticateResponse(): MsgAuthenticateResponse {
  return {};
}

export const MsgAuthenticateResponse: MessageFns<MsgAuthenticateResponse> = {
  encode(_: MsgAuthenticateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgAuthenticateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgAuthenticateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgAuthenticateResponse {
    return {};
  },

  toJSON(_: MsgAuthenticateResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgAuthenticateResponse>): MsgAuthenticateResponse {
    return MsgAuthenticateResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgAuthenticateResponse>): MsgAuthenticateResponse {
    const message = createBaseMsgAuthenticateResponse();
    return message;
  },
};

function createBaseQueryAuthenticationMethods(): QueryAuthenticationMethods {
  return {};
}

export const QueryAuthenticationMethods: MessageFns<QueryAuthenticationMethods> = {
  encode(_: QueryAuthenticationMethods, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAuthenticationMethods {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAuthenticationMethods();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryAuthenticationMethods {
    return {};
  },

  toJSON(_: QueryAuthenticationMethods): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<QueryAuthenticationMethods>): QueryAuthenticationMethods {
    return QueryAuthenticationMethods.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<QueryAuthenticationMethods>): QueryAuthenticationMethods {
    const message = createBaseQueryAuthenticationMethods();
    return message;
  },
};

function createBaseQueryAuthenticationMethodsResponse(): QueryAuthenticationMethodsResponse {
  return { authenticationMethods: [] };
}

export const QueryAuthenticationMethodsResponse: MessageFns<QueryAuthenticationMethodsResponse> = {
  encode(message: QueryAuthenticationMethodsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.authenticationMethods) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAuthenticationMethodsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAuthenticationMethodsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authenticationMethods.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAuthenticationMethodsResponse {
    return {
      authenticationMethods: globalThis.Array.isArray(object?.authenticationMethods)
        ? object.authenticationMethods.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: QueryAuthenticationMethodsResponse): unknown {
    const obj: any = {};
    if (message.authenticationMethods?.length) {
      obj.authenticationMethods = message.authenticationMethods;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryAuthenticationMethodsResponse>): QueryAuthenticationMethodsResponse {
    return QueryAuthenticationMethodsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryAuthenticationMethodsResponse>): QueryAuthenticationMethodsResponse {
    const message = createBaseQueryAuthenticationMethodsResponse();
    message.authenticationMethods = object.authenticationMethods?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
