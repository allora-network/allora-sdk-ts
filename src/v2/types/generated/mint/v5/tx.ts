// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: mint/v5/tx.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Params } from "./types";

export const protobufPackage = "mint.v5";

/** UpdateParams allows an update to the minting parameters of the module. */
export interface UpdateParamsRequest {
  sender: string;
  /**
   * params defines the x/mint parameters to update.
   *
   * NOTE: All parameters must be supplied.
   */
  params?:
    | Params
    | undefined;
  /** allow updating params to also force a recalculation of the target emission */
  recalculateTargetEmission: boolean;
  /** blocksPerMonth is used/updateable by both the mint and emissions module. */
  blocksPerMonth: string;
}

/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 */
export interface UpdateParamsResponse {
}

/**
 * Force a recalculation of the target emission right now.
 * This indirectly controls recalculating the inflation rate for the network
 * and the stakers APY %.
 */
export interface RecalculateTargetEmissionRequest {
  sender: string;
}

/** response from recalculating the target emission */
export interface RecalculateTargetEmissionResponse {
}

function createBaseUpdateParamsRequest(): UpdateParamsRequest {
  return { sender: "", params: undefined, recalculateTargetEmission: false, blocksPerMonth: "0" };
}

export const UpdateParamsRequest: MessageFns<UpdateParamsRequest> = {
  encode(message: UpdateParamsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(18).fork()).join();
    }
    if (message.recalculateTargetEmission !== false) {
      writer.uint32(24).bool(message.recalculateTargetEmission);
    }
    if (message.blocksPerMonth !== "0") {
      writer.uint32(32).uint64(message.blocksPerMonth);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateParamsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sender = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.recalculateTargetEmission = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.blocksPerMonth = reader.uint64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateParamsRequest {
    return {
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
      recalculateTargetEmission: isSet(object.recalculateTargetEmission)
        ? globalThis.Boolean(object.recalculateTargetEmission)
        : false,
      blocksPerMonth: isSet(object.blocksPerMonth) ? globalThis.String(object.blocksPerMonth) : "0",
    };
  },

  toJSON(message: UpdateParamsRequest): unknown {
    const obj: any = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    if (message.recalculateTargetEmission !== false) {
      obj.recalculateTargetEmission = message.recalculateTargetEmission;
    }
    if (message.blocksPerMonth !== "0") {
      obj.blocksPerMonth = message.blocksPerMonth;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateParamsRequest>): UpdateParamsRequest {
    return UpdateParamsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateParamsRequest>): UpdateParamsRequest {
    const message = createBaseUpdateParamsRequest();
    message.sender = object.sender ?? "";
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    message.recalculateTargetEmission = object.recalculateTargetEmission ?? false;
    message.blocksPerMonth = object.blocksPerMonth ?? "0";
    return message;
  },
};

function createBaseUpdateParamsResponse(): UpdateParamsResponse {
  return {};
}

export const UpdateParamsResponse: MessageFns<UpdateParamsResponse> = {
  encode(_: UpdateParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): UpdateParamsResponse {
    return {};
  },

  toJSON(_: UpdateParamsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<UpdateParamsResponse>): UpdateParamsResponse {
    return UpdateParamsResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<UpdateParamsResponse>): UpdateParamsResponse {
    const message = createBaseUpdateParamsResponse();
    return message;
  },
};

function createBaseRecalculateTargetEmissionRequest(): RecalculateTargetEmissionRequest {
  return { sender: "" };
}

export const RecalculateTargetEmissionRequest: MessageFns<RecalculateTargetEmissionRequest> = {
  encode(message: RecalculateTargetEmissionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RecalculateTargetEmissionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRecalculateTargetEmissionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sender = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RecalculateTargetEmissionRequest {
    return { sender: isSet(object.sender) ? globalThis.String(object.sender) : "" };
  },

  toJSON(message: RecalculateTargetEmissionRequest): unknown {
    const obj: any = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    return obj;
  },

  create(base?: DeepPartial<RecalculateTargetEmissionRequest>): RecalculateTargetEmissionRequest {
    return RecalculateTargetEmissionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RecalculateTargetEmissionRequest>): RecalculateTargetEmissionRequest {
    const message = createBaseRecalculateTargetEmissionRequest();
    message.sender = object.sender ?? "";
    return message;
  },
};

function createBaseRecalculateTargetEmissionResponse(): RecalculateTargetEmissionResponse {
  return {};
}

export const RecalculateTargetEmissionResponse: MessageFns<RecalculateTargetEmissionResponse> = {
  encode(_: RecalculateTargetEmissionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RecalculateTargetEmissionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRecalculateTargetEmissionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RecalculateTargetEmissionResponse {
    return {};
  },

  toJSON(_: RecalculateTargetEmissionResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<RecalculateTargetEmissionResponse>): RecalculateTargetEmissionResponse {
    return RecalculateTargetEmissionResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<RecalculateTargetEmissionResponse>): RecalculateTargetEmissionResponse {
    const message = createBaseRecalculateTargetEmissionResponse();
    return message;
  },
};

/** Msg defines the x/mint Msg service. */
export interface MsgService {
  /** update params. Only callable by someone on the emissions module whitelist */
  UpdateParams(request: UpdateParamsRequest): Promise<UpdateParamsResponse>;
  /**
   * force a target emission calculation right now. Otherwise waits until the
   * end of params.BlocksPerMonth
   */
  RecalculateTargetEmission(request: RecalculateTargetEmissionRequest): Promise<RecalculateTargetEmissionResponse>;
}

export const MsgServiceServiceName = "mint.v5.MsgService";
export class MsgServiceClientImpl implements MsgService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceServiceName;
    this.rpc = rpc;
    this.UpdateParams = this.UpdateParams.bind(this);
    this.RecalculateTargetEmission = this.RecalculateTargetEmission.bind(this);
  }
  UpdateParams(request: UpdateParamsRequest): Promise<UpdateParamsResponse> {
    const data = UpdateParamsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateParams", data);
    return promise.then((data) => UpdateParamsResponse.decode(new BinaryReader(data)));
  }

  RecalculateTargetEmission(request: RecalculateTargetEmissionRequest): Promise<RecalculateTargetEmissionResponse> {
    const data = RecalculateTargetEmissionRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "RecalculateTargetEmission", data);
    return promise.then((data) => RecalculateTargetEmissionResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
