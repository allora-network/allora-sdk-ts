// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: emissions/v2/score.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "emissions.v2";

export interface Score {
  topicId: string;
  blockHeight: string;
  address: string;
  score: string;
}

export interface Scores {
  scores: Score[];
}

function createBaseScore(): Score {
  return { topicId: "0", blockHeight: "0", address: "", score: "" };
}

export const Score: MessageFns<Score> = {
  encode(message: Score, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.topicId !== "0") {
      writer.uint32(8).uint64(message.topicId);
    }
    if (message.blockHeight !== "0") {
      writer.uint32(16).int64(message.blockHeight);
    }
    if (message.address !== "") {
      writer.uint32(26).string(message.address);
    }
    if (message.score !== "") {
      writer.uint32(34).string(message.score);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Score {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseScore();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.blockHeight = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.score = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Score {
    return {
      topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
      blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      score: isSet(object.score) ? globalThis.String(object.score) : "",
    };
  },

  toJSON(message: Score): unknown {
    const obj: any = {};
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    if (message.blockHeight !== "0") {
      obj.blockHeight = message.blockHeight;
    }
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.score !== "") {
      obj.score = message.score;
    }
    return obj;
  },

  create(base?: DeepPartial<Score>): Score {
    return Score.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Score>): Score {
    const message = createBaseScore();
    message.topicId = object.topicId ?? "0";
    message.blockHeight = object.blockHeight ?? "0";
    message.address = object.address ?? "";
    message.score = object.score ?? "";
    return message;
  },
};

function createBaseScores(): Scores {
  return { scores: [] };
}

export const Scores: MessageFns<Scores> = {
  encode(message: Scores, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.scores) {
      Score.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Scores {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseScores();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.scores.push(Score.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Scores {
    return { scores: globalThis.Array.isArray(object?.scores) ? object.scores.map((e: any) => Score.fromJSON(e)) : [] };
  },

  toJSON(message: Scores): unknown {
    const obj: any = {};
    if (message.scores?.length) {
      obj.scores = message.scores.map((e) => Score.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Scores>): Scores {
    return Scores.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Scores>): Scores {
    const message = createBaseScores();
    message.scores = object.scores?.map((e) => Score.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
