// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: emissions/v2/worker.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Nonce } from "./nonce";

export const protobufPackage = "emissions.v2";

export interface TimestampedValue {
  /** height at which value calculated or received */
  blockHeight: string;
  value: string;
}

export interface Inference {
  topicId: string;
  blockHeight: string;
  inferer: string;
  value: string;
  extraData: Uint8Array;
  proof: string;
}

export interface Inferences {
  inferences: Inference[];
}

export interface ForecastElement {
  inferer: string;
  value: string;
}

export interface Forecast {
  topicId: string;
  blockHeight: string;
  forecaster: string;
  forecastElements: ForecastElement[];
  extraData: Uint8Array;
}

export interface Forecasts {
  forecasts: Forecast[];
}

export interface InferenceForecastBundle {
  inference?: Inference | undefined;
  forecast?: Forecast | undefined;
}

export interface WorkerDataBundle {
  worker: string;
  nonce?: Nonce | undefined;
  topicId: string;
  inferenceForecastsBundle?: InferenceForecastBundle | undefined;
  inferencesForecastsBundleSignature: Uint8Array;
  pubkey: string;
}

/** This will be in the incoming message, sent by leader */
export interface WorkerDataBundles {
  workerDataBundles: WorkerDataBundle[];
}

function createBaseTimestampedValue(): TimestampedValue {
  return { blockHeight: "0", value: "" };
}

export const TimestampedValue: MessageFns<TimestampedValue> = {
  encode(message: TimestampedValue, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.blockHeight !== "0") {
      writer.uint32(8).int64(message.blockHeight);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TimestampedValue {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTimestampedValue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.blockHeight = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TimestampedValue {
    return {
      blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: TimestampedValue): unknown {
    const obj: any = {};
    if (message.blockHeight !== "0") {
      obj.blockHeight = message.blockHeight;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<TimestampedValue>): TimestampedValue {
    return TimestampedValue.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TimestampedValue>): TimestampedValue {
    const message = createBaseTimestampedValue();
    message.blockHeight = object.blockHeight ?? "0";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseInference(): Inference {
  return { topicId: "0", blockHeight: "0", inferer: "", value: "", extraData: new Uint8Array(0), proof: "" };
}

export const Inference: MessageFns<Inference> = {
  encode(message: Inference, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.topicId !== "0") {
      writer.uint32(8).uint64(message.topicId);
    }
    if (message.blockHeight !== "0") {
      writer.uint32(16).int64(message.blockHeight);
    }
    if (message.inferer !== "") {
      writer.uint32(26).string(message.inferer);
    }
    if (message.value !== "") {
      writer.uint32(34).string(message.value);
    }
    if (message.extraData.length !== 0) {
      writer.uint32(42).bytes(message.extraData);
    }
    if (message.proof !== "") {
      writer.uint32(50).string(message.proof);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Inference {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInference();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.blockHeight = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.inferer = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.value = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.extraData = reader.bytes();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.proof = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Inference {
    return {
      topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
      blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
      inferer: isSet(object.inferer) ? globalThis.String(object.inferer) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
      extraData: isSet(object.extraData) ? bytesFromBase64(object.extraData) : new Uint8Array(0),
      proof: isSet(object.proof) ? globalThis.String(object.proof) : "",
    };
  },

  toJSON(message: Inference): unknown {
    const obj: any = {};
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    if (message.blockHeight !== "0") {
      obj.blockHeight = message.blockHeight;
    }
    if (message.inferer !== "") {
      obj.inferer = message.inferer;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    if (message.extraData.length !== 0) {
      obj.extraData = base64FromBytes(message.extraData);
    }
    if (message.proof !== "") {
      obj.proof = message.proof;
    }
    return obj;
  },

  create(base?: DeepPartial<Inference>): Inference {
    return Inference.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Inference>): Inference {
    const message = createBaseInference();
    message.topicId = object.topicId ?? "0";
    message.blockHeight = object.blockHeight ?? "0";
    message.inferer = object.inferer ?? "";
    message.value = object.value ?? "";
    message.extraData = object.extraData ?? new Uint8Array(0);
    message.proof = object.proof ?? "";
    return message;
  },
};

function createBaseInferences(): Inferences {
  return { inferences: [] };
}

export const Inferences: MessageFns<Inferences> = {
  encode(message: Inferences, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.inferences) {
      Inference.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Inferences {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInferences();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.inferences.push(Inference.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Inferences {
    return {
      inferences: globalThis.Array.isArray(object?.inferences)
        ? object.inferences.map((e: any) => Inference.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Inferences): unknown {
    const obj: any = {};
    if (message.inferences?.length) {
      obj.inferences = message.inferences.map((e) => Inference.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Inferences>): Inferences {
    return Inferences.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Inferences>): Inferences {
    const message = createBaseInferences();
    message.inferences = object.inferences?.map((e) => Inference.fromPartial(e)) || [];
    return message;
  },
};

function createBaseForecastElement(): ForecastElement {
  return { inferer: "", value: "" };
}

export const ForecastElement: MessageFns<ForecastElement> = {
  encode(message: ForecastElement, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.inferer !== "") {
      writer.uint32(10).string(message.inferer);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ForecastElement {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseForecastElement();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.inferer = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ForecastElement {
    return {
      inferer: isSet(object.inferer) ? globalThis.String(object.inferer) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: ForecastElement): unknown {
    const obj: any = {};
    if (message.inferer !== "") {
      obj.inferer = message.inferer;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<ForecastElement>): ForecastElement {
    return ForecastElement.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ForecastElement>): ForecastElement {
    const message = createBaseForecastElement();
    message.inferer = object.inferer ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseForecast(): Forecast {
  return { topicId: "0", blockHeight: "0", forecaster: "", forecastElements: [], extraData: new Uint8Array(0) };
}

export const Forecast: MessageFns<Forecast> = {
  encode(message: Forecast, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.topicId !== "0") {
      writer.uint32(8).uint64(message.topicId);
    }
    if (message.blockHeight !== "0") {
      writer.uint32(16).int64(message.blockHeight);
    }
    if (message.forecaster !== "") {
      writer.uint32(26).string(message.forecaster);
    }
    for (const v of message.forecastElements) {
      ForecastElement.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.extraData.length !== 0) {
      writer.uint32(42).bytes(message.extraData);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Forecast {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseForecast();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.blockHeight = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.forecaster = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.forecastElements.push(ForecastElement.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.extraData = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Forecast {
    return {
      topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
      blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
      forecaster: isSet(object.forecaster) ? globalThis.String(object.forecaster) : "",
      forecastElements: globalThis.Array.isArray(object?.forecastElements)
        ? object.forecastElements.map((e: any) => ForecastElement.fromJSON(e))
        : [],
      extraData: isSet(object.extraData) ? bytesFromBase64(object.extraData) : new Uint8Array(0),
    };
  },

  toJSON(message: Forecast): unknown {
    const obj: any = {};
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    if (message.blockHeight !== "0") {
      obj.blockHeight = message.blockHeight;
    }
    if (message.forecaster !== "") {
      obj.forecaster = message.forecaster;
    }
    if (message.forecastElements?.length) {
      obj.forecastElements = message.forecastElements.map((e) => ForecastElement.toJSON(e));
    }
    if (message.extraData.length !== 0) {
      obj.extraData = base64FromBytes(message.extraData);
    }
    return obj;
  },

  create(base?: DeepPartial<Forecast>): Forecast {
    return Forecast.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Forecast>): Forecast {
    const message = createBaseForecast();
    message.topicId = object.topicId ?? "0";
    message.blockHeight = object.blockHeight ?? "0";
    message.forecaster = object.forecaster ?? "";
    message.forecastElements = object.forecastElements?.map((e) => ForecastElement.fromPartial(e)) || [];
    message.extraData = object.extraData ?? new Uint8Array(0);
    return message;
  },
};

function createBaseForecasts(): Forecasts {
  return { forecasts: [] };
}

export const Forecasts: MessageFns<Forecasts> = {
  encode(message: Forecasts, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.forecasts) {
      Forecast.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Forecasts {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseForecasts();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.forecasts.push(Forecast.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Forecasts {
    return {
      forecasts: globalThis.Array.isArray(object?.forecasts)
        ? object.forecasts.map((e: any) => Forecast.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Forecasts): unknown {
    const obj: any = {};
    if (message.forecasts?.length) {
      obj.forecasts = message.forecasts.map((e) => Forecast.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Forecasts>): Forecasts {
    return Forecasts.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Forecasts>): Forecasts {
    const message = createBaseForecasts();
    message.forecasts = object.forecasts?.map((e) => Forecast.fromPartial(e)) || [];
    return message;
  },
};

function createBaseInferenceForecastBundle(): InferenceForecastBundle {
  return { inference: undefined, forecast: undefined };
}

export const InferenceForecastBundle: MessageFns<InferenceForecastBundle> = {
  encode(message: InferenceForecastBundle, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.inference !== undefined) {
      Inference.encode(message.inference, writer.uint32(10).fork()).join();
    }
    if (message.forecast !== undefined) {
      Forecast.encode(message.forecast, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InferenceForecastBundle {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInferenceForecastBundle();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.inference = Inference.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.forecast = Forecast.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InferenceForecastBundle {
    return {
      inference: isSet(object.inference) ? Inference.fromJSON(object.inference) : undefined,
      forecast: isSet(object.forecast) ? Forecast.fromJSON(object.forecast) : undefined,
    };
  },

  toJSON(message: InferenceForecastBundle): unknown {
    const obj: any = {};
    if (message.inference !== undefined) {
      obj.inference = Inference.toJSON(message.inference);
    }
    if (message.forecast !== undefined) {
      obj.forecast = Forecast.toJSON(message.forecast);
    }
    return obj;
  },

  create(base?: DeepPartial<InferenceForecastBundle>): InferenceForecastBundle {
    return InferenceForecastBundle.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InferenceForecastBundle>): InferenceForecastBundle {
    const message = createBaseInferenceForecastBundle();
    message.inference = (object.inference !== undefined && object.inference !== null)
      ? Inference.fromPartial(object.inference)
      : undefined;
    message.forecast = (object.forecast !== undefined && object.forecast !== null)
      ? Forecast.fromPartial(object.forecast)
      : undefined;
    return message;
  },
};

function createBaseWorkerDataBundle(): WorkerDataBundle {
  return {
    worker: "",
    nonce: undefined,
    topicId: "0",
    inferenceForecastsBundle: undefined,
    inferencesForecastsBundleSignature: new Uint8Array(0),
    pubkey: "",
  };
}

export const WorkerDataBundle: MessageFns<WorkerDataBundle> = {
  encode(message: WorkerDataBundle, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.worker !== "") {
      writer.uint32(10).string(message.worker);
    }
    if (message.nonce !== undefined) {
      Nonce.encode(message.nonce, writer.uint32(18).fork()).join();
    }
    if (message.topicId !== "0") {
      writer.uint32(24).uint64(message.topicId);
    }
    if (message.inferenceForecastsBundle !== undefined) {
      InferenceForecastBundle.encode(message.inferenceForecastsBundle, writer.uint32(34).fork()).join();
    }
    if (message.inferencesForecastsBundleSignature.length !== 0) {
      writer.uint32(42).bytes(message.inferencesForecastsBundleSignature);
    }
    if (message.pubkey !== "") {
      writer.uint32(50).string(message.pubkey);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkerDataBundle {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkerDataBundle();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.worker = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nonce = Nonce.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.inferenceForecastsBundle = InferenceForecastBundle.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.inferencesForecastsBundleSignature = reader.bytes();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.pubkey = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WorkerDataBundle {
    return {
      worker: isSet(object.worker) ? globalThis.String(object.worker) : "",
      nonce: isSet(object.nonce) ? Nonce.fromJSON(object.nonce) : undefined,
      topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
      inferenceForecastsBundle: isSet(object.inferenceForecastsBundle)
        ? InferenceForecastBundle.fromJSON(object.inferenceForecastsBundle)
        : undefined,
      inferencesForecastsBundleSignature: isSet(object.inferencesForecastsBundleSignature)
        ? bytesFromBase64(object.inferencesForecastsBundleSignature)
        : new Uint8Array(0),
      pubkey: isSet(object.pubkey) ? globalThis.String(object.pubkey) : "",
    };
  },

  toJSON(message: WorkerDataBundle): unknown {
    const obj: any = {};
    if (message.worker !== "") {
      obj.worker = message.worker;
    }
    if (message.nonce !== undefined) {
      obj.nonce = Nonce.toJSON(message.nonce);
    }
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    if (message.inferenceForecastsBundle !== undefined) {
      obj.inferenceForecastsBundle = InferenceForecastBundle.toJSON(message.inferenceForecastsBundle);
    }
    if (message.inferencesForecastsBundleSignature.length !== 0) {
      obj.inferencesForecastsBundleSignature = base64FromBytes(message.inferencesForecastsBundleSignature);
    }
    if (message.pubkey !== "") {
      obj.pubkey = message.pubkey;
    }
    return obj;
  },

  create(base?: DeepPartial<WorkerDataBundle>): WorkerDataBundle {
    return WorkerDataBundle.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WorkerDataBundle>): WorkerDataBundle {
    const message = createBaseWorkerDataBundle();
    message.worker = object.worker ?? "";
    message.nonce = (object.nonce !== undefined && object.nonce !== null) ? Nonce.fromPartial(object.nonce) : undefined;
    message.topicId = object.topicId ?? "0";
    message.inferenceForecastsBundle =
      (object.inferenceForecastsBundle !== undefined && object.inferenceForecastsBundle !== null)
        ? InferenceForecastBundle.fromPartial(object.inferenceForecastsBundle)
        : undefined;
    message.inferencesForecastsBundleSignature = object.inferencesForecastsBundleSignature ?? new Uint8Array(0);
    message.pubkey = object.pubkey ?? "";
    return message;
  },
};

function createBaseWorkerDataBundles(): WorkerDataBundles {
  return { workerDataBundles: [] };
}

export const WorkerDataBundles: MessageFns<WorkerDataBundles> = {
  encode(message: WorkerDataBundles, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.workerDataBundles) {
      WorkerDataBundle.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkerDataBundles {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkerDataBundles();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.workerDataBundles.push(WorkerDataBundle.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WorkerDataBundles {
    return {
      workerDataBundles: globalThis.Array.isArray(object?.workerDataBundles)
        ? object.workerDataBundles.map((e: any) => WorkerDataBundle.fromJSON(e))
        : [],
    };
  },

  toJSON(message: WorkerDataBundles): unknown {
    const obj: any = {};
    if (message.workerDataBundles?.length) {
      obj.workerDataBundles = message.workerDataBundles.map((e) => WorkerDataBundle.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<WorkerDataBundles>): WorkerDataBundles {
    return WorkerDataBundles.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WorkerDataBundles>): WorkerDataBundles {
    const message = createBaseWorkerDataBundles();
    message.workerDataBundles = object.workerDataBundles?.map((e) => WorkerDataBundle.fromPartial(e)) || [];
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
