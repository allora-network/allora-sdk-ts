// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: emissions/v5/params.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "emissions.v5";

/** Params defines the parameters of the module. */
export interface Params {
  /** version of the protocol should be in lockstep with */
  version: string;
  /** github release tag version */
  maxSerializedMsgLength: string;
  /** total unmet demand for a topic < this => don't run inference */
  minTopicWeight: string;
  /** solicatation or weight-adjustment */
  requiredMinimumStake: string;
  /** how long to wait (blocks) before allowed to remove stake */
  removeStakeDelayWindow: string;
  /** fastest allowable topic epoch and cadence of a */
  minEpochLength: string;
  /** repeating inference request */
  betaEntropy: string;
  /** speed of gradient descent */
  learningRate: string;
  /** gradient descent stops when gradient falls below this */
  maxGradientThreshold: string;
  /** minimum fraction of stake to listen to when setting consensus listening */
  minStakeFraction: string;
  /** coefficients */
  maxUnfulfilledWorkerRequests: string;
  /** max num reputer request nonces to keep track of per topic */
  maxUnfulfilledReputerRequests: string;
  /** The exponent Î¼ represents the importance of stake in the reward of a */
  topicRewardStakeImportance: string;
  /** topic and has a fiducial value of 0.5 */
  topicRewardFeeRevenueImportance: string;
  /** a topic and has a fiducial value of 0.5 */
  topicRewardAlpha: string;
  /** a monthly timescale, 0.5 for weekly updates */
  taskRewardAlpha: string;
  /** to calculate ~U_ij, ~V_ik, ~W_im */
  validatorsVsAlloraPercentReward: string;
  /** to allora reputers workers etc */
  maxSamplesToScaleScores: string;
  /** max number of top inferers by score to reward */
  maxTopInferersToReward: string;
  /** max number of top forecasters by score to reward */
  maxTopForecastersToReward: string;
  /** max number of top reputers by score to reward */
  maxTopReputersToReward: string;
  /** topic registration fee */
  createTopicFee: string;
  /** max number of gradient descent iterations */
  gradientDescentMaxIters: string;
  /** registration fee for reputer or worker */
  registrationFee: string;
  /** default limit for pagination */
  defaultPageLimit: string;
  /** max limit for pagination */
  maxPageLimit: string;
  /**
   * min number of epochs to keep network losses, reputer losses, inferences,
   * forecasts
   */
  minEpochLengthRecordLimit: string;
  /** block emission rate in number of blocks expected per month */
  blocksPerMonth: string;
  pRewardInference: string;
  pRewardForecast: string;
  pRewardReputer: string;
  cRewardInference: string;
  cRewardForecast: string;
  cNorm: string;
  /** a small tolerance quantity used to cap reputer scores at infinitesimally */
  epsilonReputer: string;
  /** close proximities */
  halfMaxProcessStakeRemovalsEndBlock: string;
  /**
   * Applied twice once for stakeRemovals and once for
   * DelegateStakeRemovals, so actual max is this number times two
   */
  epsilonSafeDiv: string;
  /** / a small tolerance quantity used to cap division by zero */
  dataSendingFee: string;
  /** payload sending fee for reputer or worker */
  maxElementsPerForecast: string;
  /** max number of active topics per block */
  maxActiveTopicsPerBlock: string;
  /** max permittible length of strings uploaded to the chain */
  maxStringLength: string;
  initialRegretQuantile: string;
  pNormSafeDiv: string;
}

function createBaseParams(): Params {
  return {
    version: "",
    maxSerializedMsgLength: "0",
    minTopicWeight: "",
    requiredMinimumStake: "",
    removeStakeDelayWindow: "0",
    minEpochLength: "0",
    betaEntropy: "",
    learningRate: "",
    maxGradientThreshold: "",
    minStakeFraction: "",
    maxUnfulfilledWorkerRequests: "0",
    maxUnfulfilledReputerRequests: "0",
    topicRewardStakeImportance: "",
    topicRewardFeeRevenueImportance: "",
    topicRewardAlpha: "",
    taskRewardAlpha: "",
    validatorsVsAlloraPercentReward: "",
    maxSamplesToScaleScores: "0",
    maxTopInferersToReward: "0",
    maxTopForecastersToReward: "0",
    maxTopReputersToReward: "0",
    createTopicFee: "",
    gradientDescentMaxIters: "0",
    registrationFee: "",
    defaultPageLimit: "0",
    maxPageLimit: "0",
    minEpochLengthRecordLimit: "0",
    blocksPerMonth: "0",
    pRewardInference: "",
    pRewardForecast: "",
    pRewardReputer: "",
    cRewardInference: "",
    cRewardForecast: "",
    cNorm: "",
    epsilonReputer: "",
    halfMaxProcessStakeRemovalsEndBlock: "0",
    epsilonSafeDiv: "",
    dataSendingFee: "",
    maxElementsPerForecast: "0",
    maxActiveTopicsPerBlock: "0",
    maxStringLength: "0",
    initialRegretQuantile: "",
    pNormSafeDiv: "",
  };
}

export const Params: MessageFns<Params> = {
  encode(message: Params, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.version !== "") {
      writer.uint32(10).string(message.version);
    }
    if (message.maxSerializedMsgLength !== "0") {
      writer.uint32(16).int64(message.maxSerializedMsgLength);
    }
    if (message.minTopicWeight !== "") {
      writer.uint32(26).string(message.minTopicWeight);
    }
    if (message.requiredMinimumStake !== "") {
      writer.uint32(42).string(message.requiredMinimumStake);
    }
    if (message.removeStakeDelayWindow !== "0") {
      writer.uint32(48).int64(message.removeStakeDelayWindow);
    }
    if (message.minEpochLength !== "0") {
      writer.uint32(56).int64(message.minEpochLength);
    }
    if (message.betaEntropy !== "") {
      writer.uint32(66).string(message.betaEntropy);
    }
    if (message.learningRate !== "") {
      writer.uint32(74).string(message.learningRate);
    }
    if (message.maxGradientThreshold !== "") {
      writer.uint32(82).string(message.maxGradientThreshold);
    }
    if (message.minStakeFraction !== "") {
      writer.uint32(90).string(message.minStakeFraction);
    }
    if (message.maxUnfulfilledWorkerRequests !== "0") {
      writer.uint32(104).uint64(message.maxUnfulfilledWorkerRequests);
    }
    if (message.maxUnfulfilledReputerRequests !== "0") {
      writer.uint32(112).uint64(message.maxUnfulfilledReputerRequests);
    }
    if (message.topicRewardStakeImportance !== "") {
      writer.uint32(122).string(message.topicRewardStakeImportance);
    }
    if (message.topicRewardFeeRevenueImportance !== "") {
      writer.uint32(130).string(message.topicRewardFeeRevenueImportance);
    }
    if (message.topicRewardAlpha !== "") {
      writer.uint32(138).string(message.topicRewardAlpha);
    }
    if (message.taskRewardAlpha !== "") {
      writer.uint32(146).string(message.taskRewardAlpha);
    }
    if (message.validatorsVsAlloraPercentReward !== "") {
      writer.uint32(154).string(message.validatorsVsAlloraPercentReward);
    }
    if (message.maxSamplesToScaleScores !== "0") {
      writer.uint32(160).uint64(message.maxSamplesToScaleScores);
    }
    if (message.maxTopInferersToReward !== "0") {
      writer.uint32(168).uint64(message.maxTopInferersToReward);
    }
    if (message.maxTopForecastersToReward !== "0") {
      writer.uint32(176).uint64(message.maxTopForecastersToReward);
    }
    if (message.maxTopReputersToReward !== "0") {
      writer.uint32(184).uint64(message.maxTopReputersToReward);
    }
    if (message.createTopicFee !== "") {
      writer.uint32(194).string(message.createTopicFee);
    }
    if (message.gradientDescentMaxIters !== "0") {
      writer.uint32(200).uint64(message.gradientDescentMaxIters);
    }
    if (message.registrationFee !== "") {
      writer.uint32(226).string(message.registrationFee);
    }
    if (message.defaultPageLimit !== "0") {
      writer.uint32(232).uint64(message.defaultPageLimit);
    }
    if (message.maxPageLimit !== "0") {
      writer.uint32(240).uint64(message.maxPageLimit);
    }
    if (message.minEpochLengthRecordLimit !== "0") {
      writer.uint32(248).int64(message.minEpochLengthRecordLimit);
    }
    if (message.blocksPerMonth !== "0") {
      writer.uint32(256).uint64(message.blocksPerMonth);
    }
    if (message.pRewardInference !== "") {
      writer.uint32(266).string(message.pRewardInference);
    }
    if (message.pRewardForecast !== "") {
      writer.uint32(274).string(message.pRewardForecast);
    }
    if (message.pRewardReputer !== "") {
      writer.uint32(282).string(message.pRewardReputer);
    }
    if (message.cRewardInference !== "") {
      writer.uint32(290).string(message.cRewardInference);
    }
    if (message.cRewardForecast !== "") {
      writer.uint32(298).string(message.cRewardForecast);
    }
    if (message.cNorm !== "") {
      writer.uint32(306).string(message.cNorm);
    }
    if (message.epsilonReputer !== "") {
      writer.uint32(322).string(message.epsilonReputer);
    }
    if (message.halfMaxProcessStakeRemovalsEndBlock !== "0") {
      writer.uint32(336).uint64(message.halfMaxProcessStakeRemovalsEndBlock);
    }
    if (message.epsilonSafeDiv !== "") {
      writer.uint32(346).string(message.epsilonSafeDiv);
    }
    if (message.dataSendingFee !== "") {
      writer.uint32(354).string(message.dataSendingFee);
    }
    if (message.maxElementsPerForecast !== "0") {
      writer.uint32(360).uint64(message.maxElementsPerForecast);
    }
    if (message.maxActiveTopicsPerBlock !== "0") {
      writer.uint32(368).uint64(message.maxActiveTopicsPerBlock);
    }
    if (message.maxStringLength !== "0") {
      writer.uint32(376).uint64(message.maxStringLength);
    }
    if (message.initialRegretQuantile !== "") {
      writer.uint32(386).string(message.initialRegretQuantile);
    }
    if (message.pNormSafeDiv !== "") {
      writer.uint32(394).string(message.pNormSafeDiv);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Params {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.version = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.maxSerializedMsgLength = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.minTopicWeight = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.requiredMinimumStake = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.removeStakeDelayWindow = reader.int64().toString();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.minEpochLength = reader.int64().toString();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.betaEntropy = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.learningRate = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.maxGradientThreshold = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.minStakeFraction = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.maxUnfulfilledWorkerRequests = reader.uint64().toString();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.maxUnfulfilledReputerRequests = reader.uint64().toString();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.topicRewardStakeImportance = reader.string();
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.topicRewardFeeRevenueImportance = reader.string();
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.topicRewardAlpha = reader.string();
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.taskRewardAlpha = reader.string();
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.validatorsVsAlloraPercentReward = reader.string();
          continue;
        }
        case 20: {
          if (tag !== 160) {
            break;
          }

          message.maxSamplesToScaleScores = reader.uint64().toString();
          continue;
        }
        case 21: {
          if (tag !== 168) {
            break;
          }

          message.maxTopInferersToReward = reader.uint64().toString();
          continue;
        }
        case 22: {
          if (tag !== 176) {
            break;
          }

          message.maxTopForecastersToReward = reader.uint64().toString();
          continue;
        }
        case 23: {
          if (tag !== 184) {
            break;
          }

          message.maxTopReputersToReward = reader.uint64().toString();
          continue;
        }
        case 24: {
          if (tag !== 194) {
            break;
          }

          message.createTopicFee = reader.string();
          continue;
        }
        case 25: {
          if (tag !== 200) {
            break;
          }

          message.gradientDescentMaxIters = reader.uint64().toString();
          continue;
        }
        case 28: {
          if (tag !== 226) {
            break;
          }

          message.registrationFee = reader.string();
          continue;
        }
        case 29: {
          if (tag !== 232) {
            break;
          }

          message.defaultPageLimit = reader.uint64().toString();
          continue;
        }
        case 30: {
          if (tag !== 240) {
            break;
          }

          message.maxPageLimit = reader.uint64().toString();
          continue;
        }
        case 31: {
          if (tag !== 248) {
            break;
          }

          message.minEpochLengthRecordLimit = reader.int64().toString();
          continue;
        }
        case 32: {
          if (tag !== 256) {
            break;
          }

          message.blocksPerMonth = reader.uint64().toString();
          continue;
        }
        case 33: {
          if (tag !== 266) {
            break;
          }

          message.pRewardInference = reader.string();
          continue;
        }
        case 34: {
          if (tag !== 274) {
            break;
          }

          message.pRewardForecast = reader.string();
          continue;
        }
        case 35: {
          if (tag !== 282) {
            break;
          }

          message.pRewardReputer = reader.string();
          continue;
        }
        case 36: {
          if (tag !== 290) {
            break;
          }

          message.cRewardInference = reader.string();
          continue;
        }
        case 37: {
          if (tag !== 298) {
            break;
          }

          message.cRewardForecast = reader.string();
          continue;
        }
        case 38: {
          if (tag !== 306) {
            break;
          }

          message.cNorm = reader.string();
          continue;
        }
        case 40: {
          if (tag !== 322) {
            break;
          }

          message.epsilonReputer = reader.string();
          continue;
        }
        case 42: {
          if (tag !== 336) {
            break;
          }

          message.halfMaxProcessStakeRemovalsEndBlock = reader.uint64().toString();
          continue;
        }
        case 43: {
          if (tag !== 346) {
            break;
          }

          message.epsilonSafeDiv = reader.string();
          continue;
        }
        case 44: {
          if (tag !== 354) {
            break;
          }

          message.dataSendingFee = reader.string();
          continue;
        }
        case 45: {
          if (tag !== 360) {
            break;
          }

          message.maxElementsPerForecast = reader.uint64().toString();
          continue;
        }
        case 46: {
          if (tag !== 368) {
            break;
          }

          message.maxActiveTopicsPerBlock = reader.uint64().toString();
          continue;
        }
        case 47: {
          if (tag !== 376) {
            break;
          }

          message.maxStringLength = reader.uint64().toString();
          continue;
        }
        case 48: {
          if (tag !== 386) {
            break;
          }

          message.initialRegretQuantile = reader.string();
          continue;
        }
        case 49: {
          if (tag !== 394) {
            break;
          }

          message.pNormSafeDiv = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Params {
    return {
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      maxSerializedMsgLength: isSet(object.maxSerializedMsgLength)
        ? globalThis.String(object.maxSerializedMsgLength)
        : "0",
      minTopicWeight: isSet(object.minTopicWeight) ? globalThis.String(object.minTopicWeight) : "",
      requiredMinimumStake: isSet(object.requiredMinimumStake) ? globalThis.String(object.requiredMinimumStake) : "",
      removeStakeDelayWindow: isSet(object.removeStakeDelayWindow)
        ? globalThis.String(object.removeStakeDelayWindow)
        : "0",
      minEpochLength: isSet(object.minEpochLength) ? globalThis.String(object.minEpochLength) : "0",
      betaEntropy: isSet(object.betaEntropy) ? globalThis.String(object.betaEntropy) : "",
      learningRate: isSet(object.learningRate) ? globalThis.String(object.learningRate) : "",
      maxGradientThreshold: isSet(object.maxGradientThreshold) ? globalThis.String(object.maxGradientThreshold) : "",
      minStakeFraction: isSet(object.minStakeFraction) ? globalThis.String(object.minStakeFraction) : "",
      maxUnfulfilledWorkerRequests: isSet(object.maxUnfulfilledWorkerRequests)
        ? globalThis.String(object.maxUnfulfilledWorkerRequests)
        : "0",
      maxUnfulfilledReputerRequests: isSet(object.maxUnfulfilledReputerRequests)
        ? globalThis.String(object.maxUnfulfilledReputerRequests)
        : "0",
      topicRewardStakeImportance: isSet(object.topicRewardStakeImportance)
        ? globalThis.String(object.topicRewardStakeImportance)
        : "",
      topicRewardFeeRevenueImportance: isSet(object.topicRewardFeeRevenueImportance)
        ? globalThis.String(object.topicRewardFeeRevenueImportance)
        : "",
      topicRewardAlpha: isSet(object.topicRewardAlpha) ? globalThis.String(object.topicRewardAlpha) : "",
      taskRewardAlpha: isSet(object.taskRewardAlpha) ? globalThis.String(object.taskRewardAlpha) : "",
      validatorsVsAlloraPercentReward: isSet(object.validatorsVsAlloraPercentReward)
        ? globalThis.String(object.validatorsVsAlloraPercentReward)
        : "",
      maxSamplesToScaleScores: isSet(object.maxSamplesToScaleScores)
        ? globalThis.String(object.maxSamplesToScaleScores)
        : "0",
      maxTopInferersToReward: isSet(object.maxTopInferersToReward)
        ? globalThis.String(object.maxTopInferersToReward)
        : "0",
      maxTopForecastersToReward: isSet(object.maxTopForecastersToReward)
        ? globalThis.String(object.maxTopForecastersToReward)
        : "0",
      maxTopReputersToReward: isSet(object.maxTopReputersToReward)
        ? globalThis.String(object.maxTopReputersToReward)
        : "0",
      createTopicFee: isSet(object.createTopicFee) ? globalThis.String(object.createTopicFee) : "",
      gradientDescentMaxIters: isSet(object.gradientDescentMaxIters)
        ? globalThis.String(object.gradientDescentMaxIters)
        : "0",
      registrationFee: isSet(object.registrationFee) ? globalThis.String(object.registrationFee) : "",
      defaultPageLimit: isSet(object.defaultPageLimit) ? globalThis.String(object.defaultPageLimit) : "0",
      maxPageLimit: isSet(object.maxPageLimit) ? globalThis.String(object.maxPageLimit) : "0",
      minEpochLengthRecordLimit: isSet(object.minEpochLengthRecordLimit)
        ? globalThis.String(object.minEpochLengthRecordLimit)
        : "0",
      blocksPerMonth: isSet(object.blocksPerMonth) ? globalThis.String(object.blocksPerMonth) : "0",
      pRewardInference: isSet(object.pRewardInference) ? globalThis.String(object.pRewardInference) : "",
      pRewardForecast: isSet(object.pRewardForecast) ? globalThis.String(object.pRewardForecast) : "",
      pRewardReputer: isSet(object.pRewardReputer) ? globalThis.String(object.pRewardReputer) : "",
      cRewardInference: isSet(object.cRewardInference) ? globalThis.String(object.cRewardInference) : "",
      cRewardForecast: isSet(object.cRewardForecast) ? globalThis.String(object.cRewardForecast) : "",
      cNorm: isSet(object.cNorm) ? globalThis.String(object.cNorm) : "",
      epsilonReputer: isSet(object.epsilonReputer) ? globalThis.String(object.epsilonReputer) : "",
      halfMaxProcessStakeRemovalsEndBlock: isSet(object.halfMaxProcessStakeRemovalsEndBlock)
        ? globalThis.String(object.halfMaxProcessStakeRemovalsEndBlock)
        : "0",
      epsilonSafeDiv: isSet(object.epsilonSafeDiv) ? globalThis.String(object.epsilonSafeDiv) : "",
      dataSendingFee: isSet(object.dataSendingFee) ? globalThis.String(object.dataSendingFee) : "",
      maxElementsPerForecast: isSet(object.maxElementsPerForecast)
        ? globalThis.String(object.maxElementsPerForecast)
        : "0",
      maxActiveTopicsPerBlock: isSet(object.maxActiveTopicsPerBlock)
        ? globalThis.String(object.maxActiveTopicsPerBlock)
        : "0",
      maxStringLength: isSet(object.maxStringLength) ? globalThis.String(object.maxStringLength) : "0",
      initialRegretQuantile: isSet(object.initialRegretQuantile) ? globalThis.String(object.initialRegretQuantile) : "",
      pNormSafeDiv: isSet(object.pNormSafeDiv) ? globalThis.String(object.pNormSafeDiv) : "",
    };
  },

  toJSON(message: Params): unknown {
    const obj: any = {};
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.maxSerializedMsgLength !== "0") {
      obj.maxSerializedMsgLength = message.maxSerializedMsgLength;
    }
    if (message.minTopicWeight !== "") {
      obj.minTopicWeight = message.minTopicWeight;
    }
    if (message.requiredMinimumStake !== "") {
      obj.requiredMinimumStake = message.requiredMinimumStake;
    }
    if (message.removeStakeDelayWindow !== "0") {
      obj.removeStakeDelayWindow = message.removeStakeDelayWindow;
    }
    if (message.minEpochLength !== "0") {
      obj.minEpochLength = message.minEpochLength;
    }
    if (message.betaEntropy !== "") {
      obj.betaEntropy = message.betaEntropy;
    }
    if (message.learningRate !== "") {
      obj.learningRate = message.learningRate;
    }
    if (message.maxGradientThreshold !== "") {
      obj.maxGradientThreshold = message.maxGradientThreshold;
    }
    if (message.minStakeFraction !== "") {
      obj.minStakeFraction = message.minStakeFraction;
    }
    if (message.maxUnfulfilledWorkerRequests !== "0") {
      obj.maxUnfulfilledWorkerRequests = message.maxUnfulfilledWorkerRequests;
    }
    if (message.maxUnfulfilledReputerRequests !== "0") {
      obj.maxUnfulfilledReputerRequests = message.maxUnfulfilledReputerRequests;
    }
    if (message.topicRewardStakeImportance !== "") {
      obj.topicRewardStakeImportance = message.topicRewardStakeImportance;
    }
    if (message.topicRewardFeeRevenueImportance !== "") {
      obj.topicRewardFeeRevenueImportance = message.topicRewardFeeRevenueImportance;
    }
    if (message.topicRewardAlpha !== "") {
      obj.topicRewardAlpha = message.topicRewardAlpha;
    }
    if (message.taskRewardAlpha !== "") {
      obj.taskRewardAlpha = message.taskRewardAlpha;
    }
    if (message.validatorsVsAlloraPercentReward !== "") {
      obj.validatorsVsAlloraPercentReward = message.validatorsVsAlloraPercentReward;
    }
    if (message.maxSamplesToScaleScores !== "0") {
      obj.maxSamplesToScaleScores = message.maxSamplesToScaleScores;
    }
    if (message.maxTopInferersToReward !== "0") {
      obj.maxTopInferersToReward = message.maxTopInferersToReward;
    }
    if (message.maxTopForecastersToReward !== "0") {
      obj.maxTopForecastersToReward = message.maxTopForecastersToReward;
    }
    if (message.maxTopReputersToReward !== "0") {
      obj.maxTopReputersToReward = message.maxTopReputersToReward;
    }
    if (message.createTopicFee !== "") {
      obj.createTopicFee = message.createTopicFee;
    }
    if (message.gradientDescentMaxIters !== "0") {
      obj.gradientDescentMaxIters = message.gradientDescentMaxIters;
    }
    if (message.registrationFee !== "") {
      obj.registrationFee = message.registrationFee;
    }
    if (message.defaultPageLimit !== "0") {
      obj.defaultPageLimit = message.defaultPageLimit;
    }
    if (message.maxPageLimit !== "0") {
      obj.maxPageLimit = message.maxPageLimit;
    }
    if (message.minEpochLengthRecordLimit !== "0") {
      obj.minEpochLengthRecordLimit = message.minEpochLengthRecordLimit;
    }
    if (message.blocksPerMonth !== "0") {
      obj.blocksPerMonth = message.blocksPerMonth;
    }
    if (message.pRewardInference !== "") {
      obj.pRewardInference = message.pRewardInference;
    }
    if (message.pRewardForecast !== "") {
      obj.pRewardForecast = message.pRewardForecast;
    }
    if (message.pRewardReputer !== "") {
      obj.pRewardReputer = message.pRewardReputer;
    }
    if (message.cRewardInference !== "") {
      obj.cRewardInference = message.cRewardInference;
    }
    if (message.cRewardForecast !== "") {
      obj.cRewardForecast = message.cRewardForecast;
    }
    if (message.cNorm !== "") {
      obj.cNorm = message.cNorm;
    }
    if (message.epsilonReputer !== "") {
      obj.epsilonReputer = message.epsilonReputer;
    }
    if (message.halfMaxProcessStakeRemovalsEndBlock !== "0") {
      obj.halfMaxProcessStakeRemovalsEndBlock = message.halfMaxProcessStakeRemovalsEndBlock;
    }
    if (message.epsilonSafeDiv !== "") {
      obj.epsilonSafeDiv = message.epsilonSafeDiv;
    }
    if (message.dataSendingFee !== "") {
      obj.dataSendingFee = message.dataSendingFee;
    }
    if (message.maxElementsPerForecast !== "0") {
      obj.maxElementsPerForecast = message.maxElementsPerForecast;
    }
    if (message.maxActiveTopicsPerBlock !== "0") {
      obj.maxActiveTopicsPerBlock = message.maxActiveTopicsPerBlock;
    }
    if (message.maxStringLength !== "0") {
      obj.maxStringLength = message.maxStringLength;
    }
    if (message.initialRegretQuantile !== "") {
      obj.initialRegretQuantile = message.initialRegretQuantile;
    }
    if (message.pNormSafeDiv !== "") {
      obj.pNormSafeDiv = message.pNormSafeDiv;
    }
    return obj;
  },

  create(base?: DeepPartial<Params>): Params {
    return Params.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Params>): Params {
    const message = createBaseParams();
    message.version = object.version ?? "";
    message.maxSerializedMsgLength = object.maxSerializedMsgLength ?? "0";
    message.minTopicWeight = object.minTopicWeight ?? "";
    message.requiredMinimumStake = object.requiredMinimumStake ?? "";
    message.removeStakeDelayWindow = object.removeStakeDelayWindow ?? "0";
    message.minEpochLength = object.minEpochLength ?? "0";
    message.betaEntropy = object.betaEntropy ?? "";
    message.learningRate = object.learningRate ?? "";
    message.maxGradientThreshold = object.maxGradientThreshold ?? "";
    message.minStakeFraction = object.minStakeFraction ?? "";
    message.maxUnfulfilledWorkerRequests = object.maxUnfulfilledWorkerRequests ?? "0";
    message.maxUnfulfilledReputerRequests = object.maxUnfulfilledReputerRequests ?? "0";
    message.topicRewardStakeImportance = object.topicRewardStakeImportance ?? "";
    message.topicRewardFeeRevenueImportance = object.topicRewardFeeRevenueImportance ?? "";
    message.topicRewardAlpha = object.topicRewardAlpha ?? "";
    message.taskRewardAlpha = object.taskRewardAlpha ?? "";
    message.validatorsVsAlloraPercentReward = object.validatorsVsAlloraPercentReward ?? "";
    message.maxSamplesToScaleScores = object.maxSamplesToScaleScores ?? "0";
    message.maxTopInferersToReward = object.maxTopInferersToReward ?? "0";
    message.maxTopForecastersToReward = object.maxTopForecastersToReward ?? "0";
    message.maxTopReputersToReward = object.maxTopReputersToReward ?? "0";
    message.createTopicFee = object.createTopicFee ?? "";
    message.gradientDescentMaxIters = object.gradientDescentMaxIters ?? "0";
    message.registrationFee = object.registrationFee ?? "";
    message.defaultPageLimit = object.defaultPageLimit ?? "0";
    message.maxPageLimit = object.maxPageLimit ?? "0";
    message.minEpochLengthRecordLimit = object.minEpochLengthRecordLimit ?? "0";
    message.blocksPerMonth = object.blocksPerMonth ?? "0";
    message.pRewardInference = object.pRewardInference ?? "";
    message.pRewardForecast = object.pRewardForecast ?? "";
    message.pRewardReputer = object.pRewardReputer ?? "";
    message.cRewardInference = object.cRewardInference ?? "";
    message.cRewardForecast = object.cRewardForecast ?? "";
    message.cNorm = object.cNorm ?? "";
    message.epsilonReputer = object.epsilonReputer ?? "";
    message.halfMaxProcessStakeRemovalsEndBlock = object.halfMaxProcessStakeRemovalsEndBlock ?? "0";
    message.epsilonSafeDiv = object.epsilonSafeDiv ?? "";
    message.dataSendingFee = object.dataSendingFee ?? "";
    message.maxElementsPerForecast = object.maxElementsPerForecast ?? "0";
    message.maxActiveTopicsPerBlock = object.maxActiveTopicsPerBlock ?? "0";
    message.maxStringLength = object.maxStringLength ?? "0";
    message.initialRegretQuantile = object.initialRegretQuantile ?? "";
    message.pNormSafeDiv = object.pNormSafeDiv ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
