// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: emissions/v3/events.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ValueBundle } from "./reputer";

export const protobufPackage = "emissions.v3";

export enum ActorType {
  INFERER = 0,
  FORECASTER = 1,
  REPUTER = 2,
  UNRECOGNIZED = -1,
}

export function actorTypeFromJSON(object: any): ActorType {
  switch (object) {
    case 0:
    case "INFERER":
      return ActorType.INFERER;
    case 1:
    case "FORECASTER":
      return ActorType.FORECASTER;
    case 2:
    case "REPUTER":
      return ActorType.REPUTER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ActorType.UNRECOGNIZED;
  }
}

export function actorTypeToJSON(object: ActorType): string {
  switch (object) {
    case ActorType.INFERER:
      return "INFERER";
    case ActorType.FORECASTER:
      return "FORECASTER";
    case ActorType.REPUTER:
      return "REPUTER";
    case ActorType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface EventScoresSet {
  actorType: ActorType;
  topicId: string;
  blockHeight: string;
  addresses: string[];
  scores: string[];
}

export interface EventRewardsSettled {
  actorType: ActorType;
  topicId: string;
  blockHeight: string;
  addresses: string[];
  rewards: string[];
}

export interface EventNetworkLossSet {
  topicId: string;
  blockHeight: string;
  valueBundle?: ValueBundle | undefined;
}

function createBaseEventScoresSet(): EventScoresSet {
  return { actorType: 0, topicId: "0", blockHeight: "0", addresses: [], scores: [] };
}

export const EventScoresSet: MessageFns<EventScoresSet> = {
  encode(message: EventScoresSet, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.actorType !== 0) {
      writer.uint32(8).int32(message.actorType);
    }
    if (message.topicId !== "0") {
      writer.uint32(16).uint64(message.topicId);
    }
    if (message.blockHeight !== "0") {
      writer.uint32(24).int64(message.blockHeight);
    }
    for (const v of message.addresses) {
      writer.uint32(34).string(v!);
    }
    for (const v of message.scores) {
      writer.uint32(42).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventScoresSet {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventScoresSet();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.actorType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.blockHeight = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.addresses.push(reader.string());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.scores.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventScoresSet {
    return {
      actorType: isSet(object.actorType) ? actorTypeFromJSON(object.actorType) : 0,
      topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
      blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
      addresses: globalThis.Array.isArray(object?.addresses)
        ? object.addresses.map((e: any) => globalThis.String(e))
        : [],
      scores: globalThis.Array.isArray(object?.scores) ? object.scores.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: EventScoresSet): unknown {
    const obj: any = {};
    if (message.actorType !== 0) {
      obj.actorType = actorTypeToJSON(message.actorType);
    }
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    if (message.blockHeight !== "0") {
      obj.blockHeight = message.blockHeight;
    }
    if (message.addresses?.length) {
      obj.addresses = message.addresses;
    }
    if (message.scores?.length) {
      obj.scores = message.scores;
    }
    return obj;
  },

  create(base?: DeepPartial<EventScoresSet>): EventScoresSet {
    return EventScoresSet.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EventScoresSet>): EventScoresSet {
    const message = createBaseEventScoresSet();
    message.actorType = object.actorType ?? 0;
    message.topicId = object.topicId ?? "0";
    message.blockHeight = object.blockHeight ?? "0";
    message.addresses = object.addresses?.map((e) => e) || [];
    message.scores = object.scores?.map((e) => e) || [];
    return message;
  },
};

function createBaseEventRewardsSettled(): EventRewardsSettled {
  return { actorType: 0, topicId: "0", blockHeight: "0", addresses: [], rewards: [] };
}

export const EventRewardsSettled: MessageFns<EventRewardsSettled> = {
  encode(message: EventRewardsSettled, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.actorType !== 0) {
      writer.uint32(8).int32(message.actorType);
    }
    if (message.topicId !== "0") {
      writer.uint32(16).uint64(message.topicId);
    }
    if (message.blockHeight !== "0") {
      writer.uint32(24).int64(message.blockHeight);
    }
    for (const v of message.addresses) {
      writer.uint32(34).string(v!);
    }
    for (const v of message.rewards) {
      writer.uint32(42).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventRewardsSettled {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventRewardsSettled();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.actorType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.blockHeight = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.addresses.push(reader.string());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.rewards.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventRewardsSettled {
    return {
      actorType: isSet(object.actorType) ? actorTypeFromJSON(object.actorType) : 0,
      topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
      blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
      addresses: globalThis.Array.isArray(object?.addresses)
        ? object.addresses.map((e: any) => globalThis.String(e))
        : [],
      rewards: globalThis.Array.isArray(object?.rewards) ? object.rewards.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: EventRewardsSettled): unknown {
    const obj: any = {};
    if (message.actorType !== 0) {
      obj.actorType = actorTypeToJSON(message.actorType);
    }
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    if (message.blockHeight !== "0") {
      obj.blockHeight = message.blockHeight;
    }
    if (message.addresses?.length) {
      obj.addresses = message.addresses;
    }
    if (message.rewards?.length) {
      obj.rewards = message.rewards;
    }
    return obj;
  },

  create(base?: DeepPartial<EventRewardsSettled>): EventRewardsSettled {
    return EventRewardsSettled.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EventRewardsSettled>): EventRewardsSettled {
    const message = createBaseEventRewardsSettled();
    message.actorType = object.actorType ?? 0;
    message.topicId = object.topicId ?? "0";
    message.blockHeight = object.blockHeight ?? "0";
    message.addresses = object.addresses?.map((e) => e) || [];
    message.rewards = object.rewards?.map((e) => e) || [];
    return message;
  },
};

function createBaseEventNetworkLossSet(): EventNetworkLossSet {
  return { topicId: "0", blockHeight: "0", valueBundle: undefined };
}

export const EventNetworkLossSet: MessageFns<EventNetworkLossSet> = {
  encode(message: EventNetworkLossSet, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.topicId !== "0") {
      writer.uint32(8).uint64(message.topicId);
    }
    if (message.blockHeight !== "0") {
      writer.uint32(16).int64(message.blockHeight);
    }
    if (message.valueBundle !== undefined) {
      ValueBundle.encode(message.valueBundle, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventNetworkLossSet {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventNetworkLossSet();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.blockHeight = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.valueBundle = ValueBundle.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventNetworkLossSet {
    return {
      topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
      blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
      valueBundle: isSet(object.valueBundle) ? ValueBundle.fromJSON(object.valueBundle) : undefined,
    };
  },

  toJSON(message: EventNetworkLossSet): unknown {
    const obj: any = {};
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    if (message.blockHeight !== "0") {
      obj.blockHeight = message.blockHeight;
    }
    if (message.valueBundle !== undefined) {
      obj.valueBundle = ValueBundle.toJSON(message.valueBundle);
    }
    return obj;
  },

  create(base?: DeepPartial<EventNetworkLossSet>): EventNetworkLossSet {
    return EventNetworkLossSet.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EventNetworkLossSet>): EventNetworkLossSet {
    const message = createBaseEventNetworkLossSet();
    message.topicId = object.topicId ?? "0";
    message.blockHeight = object.blockHeight ?? "0";
    message.valueBundle = (object.valueBundle !== undefined && object.valueBundle !== null)
      ? ValueBundle.fromPartial(object.valueBundle)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
