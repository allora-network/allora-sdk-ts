// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: emissions/v3/reputer.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ReputerRequestNonce } from "./nonce";

export const protobufPackage = "emissions.v3";

export interface WorkerAttributedValue {
  /** worker who created the value */
  worker: string;
  value: string;
}

export interface WithheldWorkerAttributedValue {
  worker: string;
  value: string;
}

export interface OneOutInfererForecasterValues {
  forecaster: string;
  oneOutInfererValues: WithheldWorkerAttributedValue[];
}

/**
 * These losses and inferences are calculated per reputer or by the network
 * The `m`s in the comments below exist for when they're made by reputers,
 * but they may be absent implying that they were made by the network
 */
export interface ValueBundle {
  topicId: string;
  reputerRequestNonce?: ReputerRequestNonce | undefined;
  reputer: string;
  extraData: Uint8Array;
  /** R_im || log10 L_im || I_i */
  combinedValue: string;
  /** R_ijm || log10 L_ijm || I_ij */
  infererValues: WorkerAttributedValue[];
  /** R_ikm || log10 L_ikm || I_ik */
  forecasterValues: WorkerAttributedValue[];
  /** R^-_im  || log10 L^-_im || I^-_i */
  naiveValue: string;
  /**
   * Note: forecast-implied inferences are recomputed for each left-out
   * inference
   */
  oneOutInfererValues: WithheldWorkerAttributedValue[];
  /** R^-_ilm || log10 L^-_ilm || I^-_il where l = any k */
  oneOutForecasterValues: WithheldWorkerAttributedValue[];
  /**
   * R^+_ikm || log10 L^+_ikm || I^+_ik
   * aka one_in_forecaster_values because equivalent to using only one
   * forecast-implied inference
   */
  oneInForecasterValues: WorkerAttributedValue[];
  /**
   * R^-_ilm || log10 L^-_ilm || I^-_il where l = any j
   * log10 L^-_j'ikm || I^-_j'ik
   */
  oneOutInfererForecasterValues: OneOutInfererForecasterValues[];
}

/**
 * For when the bundle is computed on a per-reputer basis (ie.. if there is an
 * index `m` in the above)
 */
export interface ReputerValueBundle {
  valueBundle?: ValueBundle | undefined;
  signature: Uint8Array;
  pubkey: string;
}

export interface ReputerValueBundles {
  reputerValueBundles: ReputerValueBundle[];
}

function createBaseWorkerAttributedValue(): WorkerAttributedValue {
  return { worker: "", value: "" };
}

export const WorkerAttributedValue: MessageFns<WorkerAttributedValue> = {
  encode(message: WorkerAttributedValue, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.worker !== "") {
      writer.uint32(10).string(message.worker);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkerAttributedValue {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkerAttributedValue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.worker = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WorkerAttributedValue {
    return {
      worker: isSet(object.worker) ? globalThis.String(object.worker) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: WorkerAttributedValue): unknown {
    const obj: any = {};
    if (message.worker !== "") {
      obj.worker = message.worker;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<WorkerAttributedValue>): WorkerAttributedValue {
    return WorkerAttributedValue.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WorkerAttributedValue>): WorkerAttributedValue {
    const message = createBaseWorkerAttributedValue();
    message.worker = object.worker ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseWithheldWorkerAttributedValue(): WithheldWorkerAttributedValue {
  return { worker: "", value: "" };
}

export const WithheldWorkerAttributedValue: MessageFns<WithheldWorkerAttributedValue> = {
  encode(message: WithheldWorkerAttributedValue, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.worker !== "") {
      writer.uint32(10).string(message.worker);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WithheldWorkerAttributedValue {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWithheldWorkerAttributedValue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.worker = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WithheldWorkerAttributedValue {
    return {
      worker: isSet(object.worker) ? globalThis.String(object.worker) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: WithheldWorkerAttributedValue): unknown {
    const obj: any = {};
    if (message.worker !== "") {
      obj.worker = message.worker;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<WithheldWorkerAttributedValue>): WithheldWorkerAttributedValue {
    return WithheldWorkerAttributedValue.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WithheldWorkerAttributedValue>): WithheldWorkerAttributedValue {
    const message = createBaseWithheldWorkerAttributedValue();
    message.worker = object.worker ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseOneOutInfererForecasterValues(): OneOutInfererForecasterValues {
  return { forecaster: "", oneOutInfererValues: [] };
}

export const OneOutInfererForecasterValues: MessageFns<OneOutInfererForecasterValues> = {
  encode(message: OneOutInfererForecasterValues, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.forecaster !== "") {
      writer.uint32(26).string(message.forecaster);
    }
    for (const v of message.oneOutInfererValues) {
      WithheldWorkerAttributedValue.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OneOutInfererForecasterValues {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOneOutInfererForecasterValues();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.forecaster = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.oneOutInfererValues.push(WithheldWorkerAttributedValue.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OneOutInfererForecasterValues {
    return {
      forecaster: isSet(object.forecaster) ? globalThis.String(object.forecaster) : "",
      oneOutInfererValues: globalThis.Array.isArray(object?.oneOutInfererValues)
        ? object.oneOutInfererValues.map((e: any) => WithheldWorkerAttributedValue.fromJSON(e))
        : [],
    };
  },

  toJSON(message: OneOutInfererForecasterValues): unknown {
    const obj: any = {};
    if (message.forecaster !== "") {
      obj.forecaster = message.forecaster;
    }
    if (message.oneOutInfererValues?.length) {
      obj.oneOutInfererValues = message.oneOutInfererValues.map((e) => WithheldWorkerAttributedValue.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<OneOutInfererForecasterValues>): OneOutInfererForecasterValues {
    return OneOutInfererForecasterValues.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OneOutInfererForecasterValues>): OneOutInfererForecasterValues {
    const message = createBaseOneOutInfererForecasterValues();
    message.forecaster = object.forecaster ?? "";
    message.oneOutInfererValues =
      object.oneOutInfererValues?.map((e) => WithheldWorkerAttributedValue.fromPartial(e)) || [];
    return message;
  },
};

function createBaseValueBundle(): ValueBundle {
  return {
    topicId: "0",
    reputerRequestNonce: undefined,
    reputer: "",
    extraData: new Uint8Array(0),
    combinedValue: "",
    infererValues: [],
    forecasterValues: [],
    naiveValue: "",
    oneOutInfererValues: [],
    oneOutForecasterValues: [],
    oneInForecasterValues: [],
    oneOutInfererForecasterValues: [],
  };
}

export const ValueBundle: MessageFns<ValueBundle> = {
  encode(message: ValueBundle, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.topicId !== "0") {
      writer.uint32(8).uint64(message.topicId);
    }
    if (message.reputerRequestNonce !== undefined) {
      ReputerRequestNonce.encode(message.reputerRequestNonce, writer.uint32(18).fork()).join();
    }
    if (message.reputer !== "") {
      writer.uint32(26).string(message.reputer);
    }
    if (message.extraData.length !== 0) {
      writer.uint32(34).bytes(message.extraData);
    }
    if (message.combinedValue !== "") {
      writer.uint32(42).string(message.combinedValue);
    }
    for (const v of message.infererValues) {
      WorkerAttributedValue.encode(v!, writer.uint32(50).fork()).join();
    }
    for (const v of message.forecasterValues) {
      WorkerAttributedValue.encode(v!, writer.uint32(58).fork()).join();
    }
    if (message.naiveValue !== "") {
      writer.uint32(66).string(message.naiveValue);
    }
    for (const v of message.oneOutInfererValues) {
      WithheldWorkerAttributedValue.encode(v!, writer.uint32(74).fork()).join();
    }
    for (const v of message.oneOutForecasterValues) {
      WithheldWorkerAttributedValue.encode(v!, writer.uint32(82).fork()).join();
    }
    for (const v of message.oneInForecasterValues) {
      WorkerAttributedValue.encode(v!, writer.uint32(90).fork()).join();
    }
    for (const v of message.oneOutInfererForecasterValues) {
      OneOutInfererForecasterValues.encode(v!, writer.uint32(98).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ValueBundle {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValueBundle();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.reputerRequestNonce = ReputerRequestNonce.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.reputer = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.extraData = reader.bytes();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.combinedValue = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.infererValues.push(WorkerAttributedValue.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.forecasterValues.push(WorkerAttributedValue.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.naiveValue = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.oneOutInfererValues.push(WithheldWorkerAttributedValue.decode(reader, reader.uint32()));
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.oneOutForecasterValues.push(WithheldWorkerAttributedValue.decode(reader, reader.uint32()));
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.oneInForecasterValues.push(WorkerAttributedValue.decode(reader, reader.uint32()));
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.oneOutInfererForecasterValues.push(OneOutInfererForecasterValues.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValueBundle {
    return {
      topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
      reputerRequestNonce: isSet(object.reputerRequestNonce)
        ? ReputerRequestNonce.fromJSON(object.reputerRequestNonce)
        : undefined,
      reputer: isSet(object.reputer) ? globalThis.String(object.reputer) : "",
      extraData: isSet(object.extraData) ? bytesFromBase64(object.extraData) : new Uint8Array(0),
      combinedValue: isSet(object.combinedValue) ? globalThis.String(object.combinedValue) : "",
      infererValues: globalThis.Array.isArray(object?.infererValues)
        ? object.infererValues.map((e: any) => WorkerAttributedValue.fromJSON(e))
        : [],
      forecasterValues: globalThis.Array.isArray(object?.forecasterValues)
        ? object.forecasterValues.map((e: any) => WorkerAttributedValue.fromJSON(e))
        : [],
      naiveValue: isSet(object.naiveValue) ? globalThis.String(object.naiveValue) : "",
      oneOutInfererValues: globalThis.Array.isArray(object?.oneOutInfererValues)
        ? object.oneOutInfererValues.map((e: any) => WithheldWorkerAttributedValue.fromJSON(e))
        : [],
      oneOutForecasterValues: globalThis.Array.isArray(object?.oneOutForecasterValues)
        ? object.oneOutForecasterValues.map((e: any) => WithheldWorkerAttributedValue.fromJSON(e))
        : [],
      oneInForecasterValues: globalThis.Array.isArray(object?.oneInForecasterValues)
        ? object.oneInForecasterValues.map((e: any) => WorkerAttributedValue.fromJSON(e))
        : [],
      oneOutInfererForecasterValues: globalThis.Array.isArray(object?.oneOutInfererForecasterValues)
        ? object.oneOutInfererForecasterValues.map((e: any) => OneOutInfererForecasterValues.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ValueBundle): unknown {
    const obj: any = {};
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    if (message.reputerRequestNonce !== undefined) {
      obj.reputerRequestNonce = ReputerRequestNonce.toJSON(message.reputerRequestNonce);
    }
    if (message.reputer !== "") {
      obj.reputer = message.reputer;
    }
    if (message.extraData.length !== 0) {
      obj.extraData = base64FromBytes(message.extraData);
    }
    if (message.combinedValue !== "") {
      obj.combinedValue = message.combinedValue;
    }
    if (message.infererValues?.length) {
      obj.infererValues = message.infererValues.map((e) => WorkerAttributedValue.toJSON(e));
    }
    if (message.forecasterValues?.length) {
      obj.forecasterValues = message.forecasterValues.map((e) => WorkerAttributedValue.toJSON(e));
    }
    if (message.naiveValue !== "") {
      obj.naiveValue = message.naiveValue;
    }
    if (message.oneOutInfererValues?.length) {
      obj.oneOutInfererValues = message.oneOutInfererValues.map((e) => WithheldWorkerAttributedValue.toJSON(e));
    }
    if (message.oneOutForecasterValues?.length) {
      obj.oneOutForecasterValues = message.oneOutForecasterValues.map((e) => WithheldWorkerAttributedValue.toJSON(e));
    }
    if (message.oneInForecasterValues?.length) {
      obj.oneInForecasterValues = message.oneInForecasterValues.map((e) => WorkerAttributedValue.toJSON(e));
    }
    if (message.oneOutInfererForecasterValues?.length) {
      obj.oneOutInfererForecasterValues = message.oneOutInfererForecasterValues.map((e) =>
        OneOutInfererForecasterValues.toJSON(e)
      );
    }
    return obj;
  },

  create(base?: DeepPartial<ValueBundle>): ValueBundle {
    return ValueBundle.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ValueBundle>): ValueBundle {
    const message = createBaseValueBundle();
    message.topicId = object.topicId ?? "0";
    message.reputerRequestNonce = (object.reputerRequestNonce !== undefined && object.reputerRequestNonce !== null)
      ? ReputerRequestNonce.fromPartial(object.reputerRequestNonce)
      : undefined;
    message.reputer = object.reputer ?? "";
    message.extraData = object.extraData ?? new Uint8Array(0);
    message.combinedValue = object.combinedValue ?? "";
    message.infererValues = object.infererValues?.map((e) => WorkerAttributedValue.fromPartial(e)) || [];
    message.forecasterValues = object.forecasterValues?.map((e) => WorkerAttributedValue.fromPartial(e)) || [];
    message.naiveValue = object.naiveValue ?? "";
    message.oneOutInfererValues =
      object.oneOutInfererValues?.map((e) => WithheldWorkerAttributedValue.fromPartial(e)) || [];
    message.oneOutForecasterValues =
      object.oneOutForecasterValues?.map((e) => WithheldWorkerAttributedValue.fromPartial(e)) || [];
    message.oneInForecasterValues = object.oneInForecasterValues?.map((e) => WorkerAttributedValue.fromPartial(e)) ||
      [];
    message.oneOutInfererForecasterValues =
      object.oneOutInfererForecasterValues?.map((e) => OneOutInfererForecasterValues.fromPartial(e)) || [];
    return message;
  },
};

function createBaseReputerValueBundle(): ReputerValueBundle {
  return { valueBundle: undefined, signature: new Uint8Array(0), pubkey: "" };
}

export const ReputerValueBundle: MessageFns<ReputerValueBundle> = {
  encode(message: ReputerValueBundle, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.valueBundle !== undefined) {
      ValueBundle.encode(message.valueBundle, writer.uint32(10).fork()).join();
    }
    if (message.signature.length !== 0) {
      writer.uint32(18).bytes(message.signature);
    }
    if (message.pubkey !== "") {
      writer.uint32(26).string(message.pubkey);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReputerValueBundle {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReputerValueBundle();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.valueBundle = ValueBundle.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.signature = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.pubkey = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReputerValueBundle {
    return {
      valueBundle: isSet(object.valueBundle) ? ValueBundle.fromJSON(object.valueBundle) : undefined,
      signature: isSet(object.signature) ? bytesFromBase64(object.signature) : new Uint8Array(0),
      pubkey: isSet(object.pubkey) ? globalThis.String(object.pubkey) : "",
    };
  },

  toJSON(message: ReputerValueBundle): unknown {
    const obj: any = {};
    if (message.valueBundle !== undefined) {
      obj.valueBundle = ValueBundle.toJSON(message.valueBundle);
    }
    if (message.signature.length !== 0) {
      obj.signature = base64FromBytes(message.signature);
    }
    if (message.pubkey !== "") {
      obj.pubkey = message.pubkey;
    }
    return obj;
  },

  create(base?: DeepPartial<ReputerValueBundle>): ReputerValueBundle {
    return ReputerValueBundle.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReputerValueBundle>): ReputerValueBundle {
    const message = createBaseReputerValueBundle();
    message.valueBundle = (object.valueBundle !== undefined && object.valueBundle !== null)
      ? ValueBundle.fromPartial(object.valueBundle)
      : undefined;
    message.signature = object.signature ?? new Uint8Array(0);
    message.pubkey = object.pubkey ?? "";
    return message;
  },
};

function createBaseReputerValueBundles(): ReputerValueBundles {
  return { reputerValueBundles: [] };
}

export const ReputerValueBundles: MessageFns<ReputerValueBundles> = {
  encode(message: ReputerValueBundles, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.reputerValueBundles) {
      ReputerValueBundle.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReputerValueBundles {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReputerValueBundles();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.reputerValueBundles.push(ReputerValueBundle.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReputerValueBundles {
    return {
      reputerValueBundles: globalThis.Array.isArray(object?.reputerValueBundles)
        ? object.reputerValueBundles.map((e: any) => ReputerValueBundle.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ReputerValueBundles): unknown {
    const obj: any = {};
    if (message.reputerValueBundles?.length) {
      obj.reputerValueBundles = message.reputerValueBundles.map((e) => ReputerValueBundle.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ReputerValueBundles>): ReputerValueBundles {
    return ReputerValueBundles.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReputerValueBundles>): ReputerValueBundles {
    const message = createBaseReputerValueBundles();
    message.reputerValueBundles = object.reputerValueBundles?.map((e) => ReputerValueBundle.fromPartial(e)) || [];
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
