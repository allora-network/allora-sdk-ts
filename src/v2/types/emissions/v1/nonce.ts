// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: emissions/v1/nonce.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "emissions.v1";

export interface Nonce {
  /** block height of the request */
  blockHeight: string;
}

export interface Nonces {
  nonces: Nonce[];
}

export interface ReputerRequestNonce {
  /**
   * the reputers should respond to the reputer request with losses for work
   * found at this worker nonce
   */
  reputerNonce?: Nonce | undefined;
}

export interface ReputerRequestNonces {
  nonces: ReputerRequestNonce[];
}

function createBaseNonce(): Nonce {
  return { blockHeight: "0" };
}

export const Nonce: MessageFns<Nonce> = {
  encode(message: Nonce, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.blockHeight !== "0") {
      writer.uint32(8).int64(message.blockHeight);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Nonce {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNonce();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.blockHeight = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Nonce {
    return { blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0" };
  },

  toJSON(message: Nonce): unknown {
    const obj: any = {};
    if (message.blockHeight !== "0") {
      obj.blockHeight = message.blockHeight;
    }
    return obj;
  },

  create(base?: DeepPartial<Nonce>): Nonce {
    return Nonce.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Nonce>): Nonce {
    const message = createBaseNonce();
    message.blockHeight = object.blockHeight ?? "0";
    return message;
  },
};

function createBaseNonces(): Nonces {
  return { nonces: [] };
}

export const Nonces: MessageFns<Nonces> = {
  encode(message: Nonces, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.nonces) {
      Nonce.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Nonces {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNonces();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.nonces.push(Nonce.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Nonces {
    return { nonces: globalThis.Array.isArray(object?.nonces) ? object.nonces.map((e: any) => Nonce.fromJSON(e)) : [] };
  },

  toJSON(message: Nonces): unknown {
    const obj: any = {};
    if (message.nonces?.length) {
      obj.nonces = message.nonces.map((e) => Nonce.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Nonces>): Nonces {
    return Nonces.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Nonces>): Nonces {
    const message = createBaseNonces();
    message.nonces = object.nonces?.map((e) => Nonce.fromPartial(e)) || [];
    return message;
  },
};

function createBaseReputerRequestNonce(): ReputerRequestNonce {
  return { reputerNonce: undefined };
}

export const ReputerRequestNonce: MessageFns<ReputerRequestNonce> = {
  encode(message: ReputerRequestNonce, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.reputerNonce !== undefined) {
      Nonce.encode(message.reputerNonce, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReputerRequestNonce {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReputerRequestNonce();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.reputerNonce = Nonce.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReputerRequestNonce {
    return { reputerNonce: isSet(object.reputerNonce) ? Nonce.fromJSON(object.reputerNonce) : undefined };
  },

  toJSON(message: ReputerRequestNonce): unknown {
    const obj: any = {};
    if (message.reputerNonce !== undefined) {
      obj.reputerNonce = Nonce.toJSON(message.reputerNonce);
    }
    return obj;
  },

  create(base?: DeepPartial<ReputerRequestNonce>): ReputerRequestNonce {
    return ReputerRequestNonce.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReputerRequestNonce>): ReputerRequestNonce {
    const message = createBaseReputerRequestNonce();
    message.reputerNonce = (object.reputerNonce !== undefined && object.reputerNonce !== null)
      ? Nonce.fromPartial(object.reputerNonce)
      : undefined;
    return message;
  },
};

function createBaseReputerRequestNonces(): ReputerRequestNonces {
  return { nonces: [] };
}

export const ReputerRequestNonces: MessageFns<ReputerRequestNonces> = {
  encode(message: ReputerRequestNonces, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.nonces) {
      ReputerRequestNonce.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReputerRequestNonces {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReputerRequestNonces();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.nonces.push(ReputerRequestNonce.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReputerRequestNonces {
    return {
      nonces: globalThis.Array.isArray(object?.nonces)
        ? object.nonces.map((e: any) => ReputerRequestNonce.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ReputerRequestNonces): unknown {
    const obj: any = {};
    if (message.nonces?.length) {
      obj.nonces = message.nonces.map((e) => ReputerRequestNonce.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ReputerRequestNonces>): ReputerRequestNonces {
    return ReputerRequestNonces.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReputerRequestNonces>): ReputerRequestNonces {
    const message = createBaseReputerRequestNonces();
    message.nonces = object.nonces?.map((e) => ReputerRequestNonce.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
