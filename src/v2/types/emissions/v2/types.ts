// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: emissions/v2/types.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "emissions.v2";

export interface SimpleCursorPaginationRequest {
  key: Uint8Array;
  limit: string;
}

export interface SimpleCursorPaginationResponse {
  nextKey: Uint8Array;
}

export interface ListeningCoefficient {
  coefficient: string;
}

function createBaseSimpleCursorPaginationRequest(): SimpleCursorPaginationRequest {
  return { key: new Uint8Array(0), limit: "0" };
}

export const SimpleCursorPaginationRequest: MessageFns<SimpleCursorPaginationRequest> = {
  encode(message: SimpleCursorPaginationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key.length !== 0) {
      writer.uint32(10).bytes(message.key);
    }
    if (message.limit !== "0") {
      writer.uint32(16).uint64(message.limit);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SimpleCursorPaginationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSimpleCursorPaginationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.limit = reader.uint64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SimpleCursorPaginationRequest {
    return {
      key: isSet(object.key) ? bytesFromBase64(object.key) : new Uint8Array(0),
      limit: isSet(object.limit) ? globalThis.String(object.limit) : "0",
    };
  },

  toJSON(message: SimpleCursorPaginationRequest): unknown {
    const obj: any = {};
    if (message.key.length !== 0) {
      obj.key = base64FromBytes(message.key);
    }
    if (message.limit !== "0") {
      obj.limit = message.limit;
    }
    return obj;
  },

  create(base?: DeepPartial<SimpleCursorPaginationRequest>): SimpleCursorPaginationRequest {
    return SimpleCursorPaginationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SimpleCursorPaginationRequest>): SimpleCursorPaginationRequest {
    const message = createBaseSimpleCursorPaginationRequest();
    message.key = object.key ?? new Uint8Array(0);
    message.limit = object.limit ?? "0";
    return message;
  },
};

function createBaseSimpleCursorPaginationResponse(): SimpleCursorPaginationResponse {
  return { nextKey: new Uint8Array(0) };
}

export const SimpleCursorPaginationResponse: MessageFns<SimpleCursorPaginationResponse> = {
  encode(message: SimpleCursorPaginationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.nextKey.length !== 0) {
      writer.uint32(10).bytes(message.nextKey);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SimpleCursorPaginationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSimpleCursorPaginationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.nextKey = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SimpleCursorPaginationResponse {
    return { nextKey: isSet(object.nextKey) ? bytesFromBase64(object.nextKey) : new Uint8Array(0) };
  },

  toJSON(message: SimpleCursorPaginationResponse): unknown {
    const obj: any = {};
    if (message.nextKey.length !== 0) {
      obj.nextKey = base64FromBytes(message.nextKey);
    }
    return obj;
  },

  create(base?: DeepPartial<SimpleCursorPaginationResponse>): SimpleCursorPaginationResponse {
    return SimpleCursorPaginationResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SimpleCursorPaginationResponse>): SimpleCursorPaginationResponse {
    const message = createBaseSimpleCursorPaginationResponse();
    message.nextKey = object.nextKey ?? new Uint8Array(0);
    return message;
  },
};

function createBaseListeningCoefficient(): ListeningCoefficient {
  return { coefficient: "" };
}

export const ListeningCoefficient: MessageFns<ListeningCoefficient> = {
  encode(message: ListeningCoefficient, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.coefficient !== "") {
      writer.uint32(10).string(message.coefficient);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListeningCoefficient {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListeningCoefficient();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.coefficient = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListeningCoefficient {
    return { coefficient: isSet(object.coefficient) ? globalThis.String(object.coefficient) : "" };
  },

  toJSON(message: ListeningCoefficient): unknown {
    const obj: any = {};
    if (message.coefficient !== "") {
      obj.coefficient = message.coefficient;
    }
    return obj;
  },

  create(base?: DeepPartial<ListeningCoefficient>): ListeningCoefficient {
    return ListeningCoefficient.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListeningCoefficient>): ListeningCoefficient {
    const message = createBaseListeningCoefficient();
    message.coefficient = object.coefficient ?? "";
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
