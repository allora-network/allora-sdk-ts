// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: emissions/v2/stake.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "emissions.v2";

/**
 * Bad naming convention, only used in StakeRemovals
 * DEPRECATED in ConsensusVersion = 2
 * TO BE DELETED in ConsensusVersion = 3
 */
export interface StakePlacement {
  blockRemovalStarted: string;
  topicId: string;
  reputer: string;
  amount: string;
}

/**
 * Bad naming convention, only used in StakeRemovals
 * DEPRECATED in ConsensusVersion = 2
 * TO BE DELETED in ConsensusVersion = 3
 */
export interface DelegateStakePlacement {
  blockRemovalStarted: string;
  topicId: string;
  reputer: string;
  delegator: string;
  amount: string;
}

/** Introduced in ConsensusVersion = 2 */
export interface StakeInfo {
  topicId: string;
  reputer: string;
  amount: string;
}

/** Introduced in ConsensusVersion = 2 */
export interface StakeRemovalInfo {
  blockRemovalStarted: string;
  topicId: string;
  reputer: string;
  amount: string;
  blockRemovalCompleted: string;
}

/** Introduced in ConsensusVersion = 2 */
export interface DelegateStakeRemovalInfo {
  blockRemovalStarted: string;
  topicId: string;
  reputer: string;
  delegator: string;
  amount: string;
  blockRemovalCompleted: string;
}

export interface DelegatorInfo {
  amount: string;
  rewardDebt: string;
}

function createBaseStakePlacement(): StakePlacement {
  return { blockRemovalStarted: "0", topicId: "0", reputer: "", amount: "" };
}

export const StakePlacement: MessageFns<StakePlacement> = {
  encode(message: StakePlacement, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.blockRemovalStarted !== "0") {
      writer.uint32(8).int64(message.blockRemovalStarted);
    }
    if (message.topicId !== "0") {
      writer.uint32(16).uint64(message.topicId);
    }
    if (message.reputer !== "") {
      writer.uint32(26).string(message.reputer);
    }
    if (message.amount !== "") {
      writer.uint32(34).string(message.amount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StakePlacement {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStakePlacement();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.blockRemovalStarted = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.reputer = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.amount = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StakePlacement {
    return {
      blockRemovalStarted: isSet(object.blockRemovalStarted) ? globalThis.String(object.blockRemovalStarted) : "0",
      topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
      reputer: isSet(object.reputer) ? globalThis.String(object.reputer) : "",
      amount: isSet(object.amount) ? globalThis.String(object.amount) : "",
    };
  },

  toJSON(message: StakePlacement): unknown {
    const obj: any = {};
    if (message.blockRemovalStarted !== "0") {
      obj.blockRemovalStarted = message.blockRemovalStarted;
    }
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    if (message.reputer !== "") {
      obj.reputer = message.reputer;
    }
    if (message.amount !== "") {
      obj.amount = message.amount;
    }
    return obj;
  },

  create(base?: DeepPartial<StakePlacement>): StakePlacement {
    return StakePlacement.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StakePlacement>): StakePlacement {
    const message = createBaseStakePlacement();
    message.blockRemovalStarted = object.blockRemovalStarted ?? "0";
    message.topicId = object.topicId ?? "0";
    message.reputer = object.reputer ?? "";
    message.amount = object.amount ?? "";
    return message;
  },
};

function createBaseDelegateStakePlacement(): DelegateStakePlacement {
  return { blockRemovalStarted: "0", topicId: "0", reputer: "", delegator: "", amount: "" };
}

export const DelegateStakePlacement: MessageFns<DelegateStakePlacement> = {
  encode(message: DelegateStakePlacement, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.blockRemovalStarted !== "0") {
      writer.uint32(8).int64(message.blockRemovalStarted);
    }
    if (message.topicId !== "0") {
      writer.uint32(16).uint64(message.topicId);
    }
    if (message.reputer !== "") {
      writer.uint32(26).string(message.reputer);
    }
    if (message.delegator !== "") {
      writer.uint32(34).string(message.delegator);
    }
    if (message.amount !== "") {
      writer.uint32(42).string(message.amount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DelegateStakePlacement {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDelegateStakePlacement();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.blockRemovalStarted = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.reputer = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.delegator = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.amount = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DelegateStakePlacement {
    return {
      blockRemovalStarted: isSet(object.blockRemovalStarted) ? globalThis.String(object.blockRemovalStarted) : "0",
      topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
      reputer: isSet(object.reputer) ? globalThis.String(object.reputer) : "",
      delegator: isSet(object.delegator) ? globalThis.String(object.delegator) : "",
      amount: isSet(object.amount) ? globalThis.String(object.amount) : "",
    };
  },

  toJSON(message: DelegateStakePlacement): unknown {
    const obj: any = {};
    if (message.blockRemovalStarted !== "0") {
      obj.blockRemovalStarted = message.blockRemovalStarted;
    }
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    if (message.reputer !== "") {
      obj.reputer = message.reputer;
    }
    if (message.delegator !== "") {
      obj.delegator = message.delegator;
    }
    if (message.amount !== "") {
      obj.amount = message.amount;
    }
    return obj;
  },

  create(base?: DeepPartial<DelegateStakePlacement>): DelegateStakePlacement {
    return DelegateStakePlacement.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DelegateStakePlacement>): DelegateStakePlacement {
    const message = createBaseDelegateStakePlacement();
    message.blockRemovalStarted = object.blockRemovalStarted ?? "0";
    message.topicId = object.topicId ?? "0";
    message.reputer = object.reputer ?? "";
    message.delegator = object.delegator ?? "";
    message.amount = object.amount ?? "";
    return message;
  },
};

function createBaseStakeInfo(): StakeInfo {
  return { topicId: "0", reputer: "", amount: "" };
}

export const StakeInfo: MessageFns<StakeInfo> = {
  encode(message: StakeInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.topicId !== "0") {
      writer.uint32(8).uint64(message.topicId);
    }
    if (message.reputer !== "") {
      writer.uint32(18).string(message.reputer);
    }
    if (message.amount !== "") {
      writer.uint32(26).string(message.amount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StakeInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStakeInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.reputer = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.amount = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StakeInfo {
    return {
      topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
      reputer: isSet(object.reputer) ? globalThis.String(object.reputer) : "",
      amount: isSet(object.amount) ? globalThis.String(object.amount) : "",
    };
  },

  toJSON(message: StakeInfo): unknown {
    const obj: any = {};
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    if (message.reputer !== "") {
      obj.reputer = message.reputer;
    }
    if (message.amount !== "") {
      obj.amount = message.amount;
    }
    return obj;
  },

  create(base?: DeepPartial<StakeInfo>): StakeInfo {
    return StakeInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StakeInfo>): StakeInfo {
    const message = createBaseStakeInfo();
    message.topicId = object.topicId ?? "0";
    message.reputer = object.reputer ?? "";
    message.amount = object.amount ?? "";
    return message;
  },
};

function createBaseStakeRemovalInfo(): StakeRemovalInfo {
  return { blockRemovalStarted: "0", topicId: "0", reputer: "", amount: "", blockRemovalCompleted: "0" };
}

export const StakeRemovalInfo: MessageFns<StakeRemovalInfo> = {
  encode(message: StakeRemovalInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.blockRemovalStarted !== "0") {
      writer.uint32(8).int64(message.blockRemovalStarted);
    }
    if (message.topicId !== "0") {
      writer.uint32(16).uint64(message.topicId);
    }
    if (message.reputer !== "") {
      writer.uint32(26).string(message.reputer);
    }
    if (message.amount !== "") {
      writer.uint32(34).string(message.amount);
    }
    if (message.blockRemovalCompleted !== "0") {
      writer.uint32(40).int64(message.blockRemovalCompleted);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StakeRemovalInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStakeRemovalInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.blockRemovalStarted = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.reputer = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.amount = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.blockRemovalCompleted = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StakeRemovalInfo {
    return {
      blockRemovalStarted: isSet(object.blockRemovalStarted) ? globalThis.String(object.blockRemovalStarted) : "0",
      topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
      reputer: isSet(object.reputer) ? globalThis.String(object.reputer) : "",
      amount: isSet(object.amount) ? globalThis.String(object.amount) : "",
      blockRemovalCompleted: isSet(object.blockRemovalCompleted)
        ? globalThis.String(object.blockRemovalCompleted)
        : "0",
    };
  },

  toJSON(message: StakeRemovalInfo): unknown {
    const obj: any = {};
    if (message.blockRemovalStarted !== "0") {
      obj.blockRemovalStarted = message.blockRemovalStarted;
    }
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    if (message.reputer !== "") {
      obj.reputer = message.reputer;
    }
    if (message.amount !== "") {
      obj.amount = message.amount;
    }
    if (message.blockRemovalCompleted !== "0") {
      obj.blockRemovalCompleted = message.blockRemovalCompleted;
    }
    return obj;
  },

  create(base?: DeepPartial<StakeRemovalInfo>): StakeRemovalInfo {
    return StakeRemovalInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StakeRemovalInfo>): StakeRemovalInfo {
    const message = createBaseStakeRemovalInfo();
    message.blockRemovalStarted = object.blockRemovalStarted ?? "0";
    message.topicId = object.topicId ?? "0";
    message.reputer = object.reputer ?? "";
    message.amount = object.amount ?? "";
    message.blockRemovalCompleted = object.blockRemovalCompleted ?? "0";
    return message;
  },
};

function createBaseDelegateStakeRemovalInfo(): DelegateStakeRemovalInfo {
  return { blockRemovalStarted: "0", topicId: "0", reputer: "", delegator: "", amount: "", blockRemovalCompleted: "0" };
}

export const DelegateStakeRemovalInfo: MessageFns<DelegateStakeRemovalInfo> = {
  encode(message: DelegateStakeRemovalInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.blockRemovalStarted !== "0") {
      writer.uint32(8).int64(message.blockRemovalStarted);
    }
    if (message.topicId !== "0") {
      writer.uint32(16).uint64(message.topicId);
    }
    if (message.reputer !== "") {
      writer.uint32(26).string(message.reputer);
    }
    if (message.delegator !== "") {
      writer.uint32(34).string(message.delegator);
    }
    if (message.amount !== "") {
      writer.uint32(42).string(message.amount);
    }
    if (message.blockRemovalCompleted !== "0") {
      writer.uint32(48).int64(message.blockRemovalCompleted);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DelegateStakeRemovalInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDelegateStakeRemovalInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.blockRemovalStarted = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.reputer = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.delegator = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.amount = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.blockRemovalCompleted = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DelegateStakeRemovalInfo {
    return {
      blockRemovalStarted: isSet(object.blockRemovalStarted) ? globalThis.String(object.blockRemovalStarted) : "0",
      topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
      reputer: isSet(object.reputer) ? globalThis.String(object.reputer) : "",
      delegator: isSet(object.delegator) ? globalThis.String(object.delegator) : "",
      amount: isSet(object.amount) ? globalThis.String(object.amount) : "",
      blockRemovalCompleted: isSet(object.blockRemovalCompleted)
        ? globalThis.String(object.blockRemovalCompleted)
        : "0",
    };
  },

  toJSON(message: DelegateStakeRemovalInfo): unknown {
    const obj: any = {};
    if (message.blockRemovalStarted !== "0") {
      obj.blockRemovalStarted = message.blockRemovalStarted;
    }
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    if (message.reputer !== "") {
      obj.reputer = message.reputer;
    }
    if (message.delegator !== "") {
      obj.delegator = message.delegator;
    }
    if (message.amount !== "") {
      obj.amount = message.amount;
    }
    if (message.blockRemovalCompleted !== "0") {
      obj.blockRemovalCompleted = message.blockRemovalCompleted;
    }
    return obj;
  },

  create(base?: DeepPartial<DelegateStakeRemovalInfo>): DelegateStakeRemovalInfo {
    return DelegateStakeRemovalInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DelegateStakeRemovalInfo>): DelegateStakeRemovalInfo {
    const message = createBaseDelegateStakeRemovalInfo();
    message.blockRemovalStarted = object.blockRemovalStarted ?? "0";
    message.topicId = object.topicId ?? "0";
    message.reputer = object.reputer ?? "";
    message.delegator = object.delegator ?? "";
    message.amount = object.amount ?? "";
    message.blockRemovalCompleted = object.blockRemovalCompleted ?? "0";
    return message;
  },
};

function createBaseDelegatorInfo(): DelegatorInfo {
  return { amount: "", rewardDebt: "" };
}

export const DelegatorInfo: MessageFns<DelegatorInfo> = {
  encode(message: DelegatorInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.amount !== "") {
      writer.uint32(10).string(message.amount);
    }
    if (message.rewardDebt !== "") {
      writer.uint32(18).string(message.rewardDebt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DelegatorInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDelegatorInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.amount = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.rewardDebt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DelegatorInfo {
    return {
      amount: isSet(object.amount) ? globalThis.String(object.amount) : "",
      rewardDebt: isSet(object.rewardDebt) ? globalThis.String(object.rewardDebt) : "",
    };
  },

  toJSON(message: DelegatorInfo): unknown {
    const obj: any = {};
    if (message.amount !== "") {
      obj.amount = message.amount;
    }
    if (message.rewardDebt !== "") {
      obj.rewardDebt = message.rewardDebt;
    }
    return obj;
  },

  create(base?: DeepPartial<DelegatorInfo>): DelegatorInfo {
    return DelegatorInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DelegatorInfo>): DelegatorInfo {
    const message = createBaseDelegatorInfo();
    message.amount = object.amount ?? "";
    message.rewardDebt = object.rewardDebt ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
