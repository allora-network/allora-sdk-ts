// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: emissions/v2/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { RegretInformedWeight } from "./inference";
import { OffchainNode } from "./node";
import { Nonces, ReputerRequestNonces } from "./nonce";
import { Params } from "./params";
import { ReputerValueBundles, ValueBundle, WorkerAttributedValue } from "./reputer";
import { Score, Scores } from "./score";
import { DelegateStakeRemovalInfo, DelegatorInfo, StakeInfo, StakeRemovalInfo } from "./stake";
import { TimestampedActorNonce, Topic } from "./topic";
import { ListeningCoefficient, SimpleCursorPaginationRequest, SimpleCursorPaginationResponse } from "./types";
import { Forecasts, Inference, Inferences, TimestampedValue } from "./worker";

export const protobufPackage = "emissions.v2";

export interface QueryNaiveInfererNetworkRegretRequest {
  topicId: string;
  inferer: string;
}

export interface QueryNaiveInfererNetworkRegretResponse {
  regret?: TimestampedValue | undefined;
}

export interface QueryOneOutInfererInfererNetworkRegretRequest {
  topicId: string;
  oneOutInferer: string;
  inferer: string;
}

export interface QueryOneOutInfererInfererNetworkRegretResponse {
  regret?: TimestampedValue | undefined;
}

export interface QueryOneOutInfererForecasterNetworkRegretRequest {
  topicId: string;
  oneOutInferer: string;
  forecaster: string;
}

export interface QueryOneOutInfererForecasterNetworkRegretResponse {
  regret?: TimestampedValue | undefined;
}

export interface QueryOneOutForecasterInfererNetworkRegretRequest {
  topicId: string;
  oneOutForecaster: string;
  inferer: string;
}

export interface QueryOneOutForecasterInfererNetworkRegretResponse {
  regret?: TimestampedValue | undefined;
}

export interface QueryOneOutForecasterForecasterNetworkRegretRequest {
  topicId: string;
  oneOutForecaster: string;
  forecaster: string;
}

export interface QueryOneOutForecasterForecasterNetworkRegretResponse {
  regret?: TimestampedValue | undefined;
}

/** QueryParamsRequest is the request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}

/** QueryParamsResponse is the response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
  /** params defines the parameters of the module. */
  params?: Params | undefined;
}

/** Total Stake returns the total amount of stake in the system */
export interface QueryTotalStakeRequest {
}

/**
 * Total Stake returns the total amount of stake in the system
 *
 * NOTE: The amount field is an Int which implements the custom method
 * signatures required by gogoproto.
 */
export interface QueryTotalStakeResponse {
  amount: string;
}

export interface QueryReputerStakeInTopicRequest {
  address: string;
  topicId: string;
}

export interface QueryReputerStakeInTopicResponse {
  amount: string;
}

export interface QueryMultiReputerStakeInTopicRequest {
  addresses: string[];
  topicId: string;
}

export interface QueryMultiReputerStakeInTopicResponse {
  amounts: StakeInfo[];
}

export interface QueryStakeFromReputerInTopicInSelfRequest {
  reputerAddress: string;
  topicId: string;
}

export interface QueryStakeFromReputerInTopicInSelfResponse {
  amount: string;
}

export interface QueryDelegateStakeInTopicInReputerRequest {
  reputerAddress: string;
  topicId: string;
}

export interface QueryDelegateStakeInTopicInReputerResponse {
  amount: string;
}

export interface QueryStakeFromDelegatorInTopicInReputerRequest {
  delegatorAddress: string;
  reputerAddress: string;
  topicId: string;
}

export interface QueryStakeFromDelegatorInTopicInReputerResponse {
  amount: string;
}

export interface QueryStakeFromDelegatorInTopicRequest {
  delegatorAddress: string;
  topicId: string;
}

export interface QueryStakeFromDelegatorInTopicResponse {
  amount: string;
}

export interface QueryTopicStakeRequest {
  topicId: string;
}

export interface QueryTopicStakeResponse {
  amount: string;
}

export interface QueryNetworkLossBundleAtBlockRequest {
  topicId: string;
  blockHeight: string;
}

export interface QueryNetworkLossBundleAtBlockResponse {
  lossBundle?: ValueBundle | undefined;
}

export interface QueryNextTopicIdRequest {
}

export interface QueryNextTopicIdResponse {
  nextTopicId: string;
}

export interface QueryTopicRequest {
  topicId: string;
}

export interface QueryTopicResponse {
  topic?: Topic | undefined;
  weight: string;
  effectiveRevenue: string;
}

export interface QueryActiveTopicsRequest {
  pagination?: SimpleCursorPaginationRequest | undefined;
}

export interface QueryActiveTopicsResponse {
  topics: Topic[];
  pagination?: SimpleCursorPaginationResponse | undefined;
}

/** Returns the inferences on a topic posted at a block height */
export interface QueryInferencesAtBlockRequest {
  topicId: string;
  blockHeight: string;
}

/**
 * Returns the inferences on a topic posted at a block height
 *
 * NOTE: The amount field is a Uint which implements the custom method
 * signatures required by gogoproto.
 */
export interface QueryInferencesAtBlockResponse {
  inferences?: Inferences | undefined;
}

export interface QueryLatestTopicInferencesRequest {
  topicId: string;
}

export interface QueryLatestTopicInferencesResponse {
  inferences?: Inferences | undefined;
  blockHeight: string;
}

/** Returns the forecasts on a topic posted at a block height */
export interface QueryForecastsAtBlockRequest {
  topicId: string;
  blockHeight: string;
}

/**
 * Returns the forecasts on a topic posted at a block height
 *
 * NOTE: The amount field is a Uint which implements the custom method
 * signatures required by gogoproto.
 */
export interface QueryForecastsAtBlockResponse {
  forecasts?: Forecasts | undefined;
}

export interface QueryWorkerLatestInferenceRequest {
  topicId: string;
  workerAddress: string;
}

export interface QueryWorkerLatestInferenceResponse {
  latestInference?: Inference | undefined;
}

export interface QueryWorkerNodeInfoRequest {
  address: string;
}

export interface QueryWorkerNodeInfoResponse {
  nodeInfo?: OffchainNode | undefined;
}

export interface QueryReputerNodeInfoRequest {
  address: string;
}

export interface QueryReputerNodeInfoResponse {
  nodeInfo?: OffchainNode | undefined;
}

export interface QueryNetworkInferencesAtBlockRequest {
  topicId: string;
  blockHeightLastInference: string;
  blockHeightLastReward: string;
}

export interface QueryLatestNetworkInferencesRequest {
  topicId: string;
}

export interface QueryIsWorkerNonceUnfulfilledRequest {
  topicId: string;
  blockHeight: string;
}

export interface QueryIsWorkerNonceUnfulfilledResponse {
  isWorkerNonceUnfulfilled: boolean;
}

export interface QueryUnfulfilledReputerNoncesRequest {
  topicId: string;
}

export interface QueryUnfulfilledReputerNoncesResponse {
  nonces?: ReputerRequestNonces | undefined;
}

export interface QueryUnfulfilledWorkerNoncesRequest {
  topicId: string;
}

export interface QueryUnfulfilledWorkerNoncesResponse {
  nonces?: Nonces | undefined;
}

export interface QueryInfererNetworkRegretRequest {
  topicId: string;
  actorId: string;
}

export interface QueryInfererNetworkRegretResponse {
  regret?: TimestampedValue | undefined;
}

export interface QueryForecasterNetworkRegretRequest {
  topicId: string;
  worker: string;
}

export interface QueryForecasterNetworkRegretResponse {
  regret?: TimestampedValue | undefined;
}

export interface QueryOneInForecasterNetworkRegretRequest {
  topicId: string;
  forecaster: string;
  inferer: string;
}

export interface QueryOneInForecasterNetworkRegretResponse {
  regret?: TimestampedValue | undefined;
}

export interface QueryIsReputerNonceUnfulfilledRequest {
  topicId: string;
  blockHeight: string;
}

export interface QueryIsReputerNonceUnfulfilledResponse {
  isReputerNonceUnfulfilled: boolean;
}

export interface QueryNetworkInferencesAtBlockResponse {
  networkInferences?: ValueBundle | undefined;
}

export interface QueryLatestNetworkInferencesResponse {
  networkInferences?: ValueBundle | undefined;
  infererWeights: RegretInformedWeight[];
  forecasterWeights: RegretInformedWeight[];
  forecastImpliedInferences: WorkerAttributedValue[];
  inferenceBlockHeight: string;
  lossBlockHeight: string;
  confidenceIntervalRawPercentiles: string[];
  confidenceIntervalValues: string[];
}

export interface QueryIsWorkerRegisteredInTopicIdRequest {
  topicId: string;
  address: string;
}

export interface QueryIsWorkerRegisteredInTopicIdResponse {
  isRegistered: boolean;
}

export interface QueryIsReputerRegisteredInTopicIdRequest {
  topicId: string;
  address: string;
}

export interface QueryIsReputerRegisteredInTopicIdResponse {
  isRegistered: boolean;
}

export interface QueryIsWhitelistAdminRequest {
  address: string;
}

export interface QueryIsWhitelistAdminResponse {
  isAdmin: boolean;
}

export interface QueryStakeRemovalsUpUntilBlockRequest {
  blockHeight: string;
}

export interface QueryStakeRemovalsUpUntilBlockResponse {
  removals: StakeRemovalInfo[];
}

export interface QueryDelegateStakeRemovalsUpUntilBlockRequest {
  blockHeight: string;
}

export interface QueryDelegateStakeRemovalsUpUntilBlockResponse {
  removals: DelegateStakeRemovalInfo[];
}

export interface QueryStakeRemovalInfoRequest {
  topicId: string;
  reputer: string;
}

export interface QueryStakeRemovalInfoResponse {
  removal?: StakeRemovalInfo | undefined;
}

export interface QueryDelegateStakeRemovalInfoRequest {
  topicId: string;
  delegator: string;
  reputer: string;
}

export interface QueryDelegateStakeRemovalInfoResponse {
  removal?: DelegateStakeRemovalInfo | undefined;
}

export interface QueryTopicLastCommitRequest {
  topicId: string;
}

export interface QueryTopicLastCommitResponse {
  lastCommit?: TimestampedActorNonce | undefined;
}

export interface QueryTopicRewardNonceRequest {
  topicId: string;
}

export interface QueryTopicRewardNonceResponse {
  nonce: string;
}

export interface QueryReputerLossBundlesAtBlockRequest {
  topicId: string;
  blockHeight: string;
}

export interface QueryReputerLossBundlesAtBlockResponse {
  lossBundles?: ReputerValueBundles | undefined;
}

export interface QueryStakeReputerAuthorityRequest {
  topicId: string;
  reputer: string;
}

export interface QueryStakeReputerAuthorityResponse {
  authority: string;
}

export interface QueryDelegateStakePlacementRequest {
  topicId: string;
  delegator: string;
  target: string;
}

export interface QueryDelegateStakePlacementResponse {
  delegatorInfo?: DelegatorInfo | undefined;
}

export interface QueryDelegateStakeUponReputerRequest {
  topicId: string;
  target: string;
}

export interface QueryDelegateStakeUponReputerResponse {
  stake: string;
}

export interface QueryDelegateRewardPerShareRequest {
  topicId: string;
  reputer: string;
}

export interface QueryDelegateRewardPerShareResponse {
  rewardPerShare: string;
}

export interface QueryStakeRemovalForReputerAndTopicIdRequest {
  reputer: string;
  topicId: string;
}

export interface QueryStakeRemovalForReputerAndTopicIdResponse {
  stakeRemovalInfo?: StakeRemovalInfo | undefined;
}

export interface QueryDelegateStakeRemovalRequest {
  blockHeight: string;
  topicId: string;
  delegator: string;
  reputer: string;
}

export interface QueryDelegateStakeRemovalResponse {
  stakeRemovalInfo?: DelegateStakeRemovalInfo | undefined;
}

export interface QueryPreviousTopicWeightRequest {
  topicId: string;
}

export interface QueryPreviousTopicWeightResponse {
  weight: string;
  notFound: boolean;
}

export interface QueryTopicExistsRequest {
  topicId: string;
}

export interface QueryTopicExistsResponse {
  exists: boolean;
}

export interface QueryIsTopicActiveRequest {
  topicId: string;
}

export interface QueryIsTopicActiveResponse {
  isActive: boolean;
}

export interface QueryTopicFeeRevenueRequest {
  topicId: string;
}

export interface QueryTopicFeeRevenueResponse {
  feeRevenue: string;
}

export interface QueryRewardableTopicsRequest {
}

export interface QueryRewardableTopicsResponse {
  rewardableTopicIds: string[];
}

export interface QueryLatestInfererScoreRequest {
  topicId: string;
  inferer: string;
}

export interface QueryLatestInfererScoreResponse {
  score?: Score | undefined;
}

export interface QueryLatestForecasterScoreRequest {
  topicId: string;
  forecaster: string;
}

export interface QueryLatestForecasterScoreResponse {
  score?: Score | undefined;
}

export interface QueryLatestReputerScoreRequest {
  topicId: string;
  reputer: string;
}

export interface QueryLatestReputerScoreResponse {
  score?: Score | undefined;
}

export interface QueryInferenceScoresUntilBlockRequest {
  topicId: string;
  blockHeight: string;
}

export interface QueryInferenceScoresUntilBlockResponse {
  scores: Score[];
}

export interface QueryWorkerInferenceScoresAtBlockRequest {
  topicId: string;
  blockHeight: string;
}

export interface QueryWorkerInferenceScoresAtBlockResponse {
  scores?: Scores | undefined;
}

export interface QueryForecastScoresUntilBlockRequest {
  topicId: string;
  blockHeight: string;
}

export interface QueryForecastScoresUntilBlockResponse {
  scores: Score[];
}

export interface QueryWorkerForecastScoresAtBlockRequest {
  topicId: string;
  blockHeight: string;
}

export interface QueryWorkerForecastScoresAtBlockResponse {
  scores?: Scores | undefined;
}

export interface QueryReputersScoresAtBlockRequest {
  topicId: string;
  blockHeight: string;
}

export interface QueryReputersScoresAtBlockResponse {
  scores?: Scores | undefined;
}

export interface QueryListeningCoefficientRequest {
  topicId: string;
  reputer: string;
}

export interface QueryListeningCoefficientResponse {
  listeningCoefficient?: ListeningCoefficient | undefined;
}

export interface QueryPreviousReputerRewardFractionRequest {
  topicId: string;
  reputer: string;
}

export interface QueryPreviousReputerRewardFractionResponse {
  rewardFraction: string;
  notFound: boolean;
}

export interface QueryPreviousInferenceRewardFractionRequest {
  topicId: string;
  worker: string;
}

export interface QueryPreviousInferenceRewardFractionResponse {
  rewardFraction: string;
  notFound: boolean;
}

export interface QueryPreviousForecastRewardFractionRequest {
  topicId: string;
  worker: string;
}

export interface QueryPreviousForecastRewardFractionResponse {
  rewardFraction: string;
  notFound: boolean;
}

export interface QueryPreviousPercentageRewardToStakedReputersRequest {
}

export interface QueryPreviousPercentageRewardToStakedReputersResponse {
  percentageReward: string;
}

export interface QueryTotalRewardToDistributeRequest {
}

export interface QueryTotalRewardToDistributeResponse {
  totalReward: string;
}

function createBaseQueryNaiveInfererNetworkRegretRequest(): QueryNaiveInfererNetworkRegretRequest {
  return { topicId: "0", inferer: "" };
}

export const QueryNaiveInfererNetworkRegretRequest: MessageFns<QueryNaiveInfererNetworkRegretRequest> = {
  encode(message: QueryNaiveInfererNetworkRegretRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.topicId !== "0") {
      writer.uint32(8).uint64(message.topicId);
    }
    if (message.inferer !== "") {
      writer.uint32(18).string(message.inferer);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryNaiveInfererNetworkRegretRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryNaiveInfererNetworkRegretRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.inferer = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryNaiveInfererNetworkRegretRequest {
    return {
      topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
      inferer: isSet(object.inferer) ? globalThis.String(object.inferer) : "",
    };
  },

  toJSON(message: QueryNaiveInfererNetworkRegretRequest): unknown {
    const obj: any = {};
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    if (message.inferer !== "") {
      obj.inferer = message.inferer;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryNaiveInfererNetworkRegretRequest>): QueryNaiveInfererNetworkRegretRequest {
    return QueryNaiveInfererNetworkRegretRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryNaiveInfererNetworkRegretRequest>): QueryNaiveInfererNetworkRegretRequest {
    const message = createBaseQueryNaiveInfererNetworkRegretRequest();
    message.topicId = object.topicId ?? "0";
    message.inferer = object.inferer ?? "";
    return message;
  },
};

function createBaseQueryNaiveInfererNetworkRegretResponse(): QueryNaiveInfererNetworkRegretResponse {
  return { regret: undefined };
}

export const QueryNaiveInfererNetworkRegretResponse: MessageFns<QueryNaiveInfererNetworkRegretResponse> = {
  encode(message: QueryNaiveInfererNetworkRegretResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.regret !== undefined) {
      TimestampedValue.encode(message.regret, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryNaiveInfererNetworkRegretResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryNaiveInfererNetworkRegretResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.regret = TimestampedValue.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryNaiveInfererNetworkRegretResponse {
    return { regret: isSet(object.regret) ? TimestampedValue.fromJSON(object.regret) : undefined };
  },

  toJSON(message: QueryNaiveInfererNetworkRegretResponse): unknown {
    const obj: any = {};
    if (message.regret !== undefined) {
      obj.regret = TimestampedValue.toJSON(message.regret);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryNaiveInfererNetworkRegretResponse>): QueryNaiveInfererNetworkRegretResponse {
    return QueryNaiveInfererNetworkRegretResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryNaiveInfererNetworkRegretResponse>): QueryNaiveInfererNetworkRegretResponse {
    const message = createBaseQueryNaiveInfererNetworkRegretResponse();
    message.regret = (object.regret !== undefined && object.regret !== null)
      ? TimestampedValue.fromPartial(object.regret)
      : undefined;
    return message;
  },
};

function createBaseQueryOneOutInfererInfererNetworkRegretRequest(): QueryOneOutInfererInfererNetworkRegretRequest {
  return { topicId: "0", oneOutInferer: "", inferer: "" };
}

export const QueryOneOutInfererInfererNetworkRegretRequest: MessageFns<QueryOneOutInfererInfererNetworkRegretRequest> =
  {
    encode(
      message: QueryOneOutInfererInfererNetworkRegretRequest,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.topicId !== "0") {
        writer.uint32(8).uint64(message.topicId);
      }
      if (message.oneOutInferer !== "") {
        writer.uint32(18).string(message.oneOutInferer);
      }
      if (message.inferer !== "") {
        writer.uint32(26).string(message.inferer);
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): QueryOneOutInfererInfererNetworkRegretRequest {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseQueryOneOutInfererInfererNetworkRegretRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 8) {
              break;
            }

            message.topicId = reader.uint64().toString();
            continue;
          }
          case 2: {
            if (tag !== 18) {
              break;
            }

            message.oneOutInferer = reader.string();
            continue;
          }
          case 3: {
            if (tag !== 26) {
              break;
            }

            message.inferer = reader.string();
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): QueryOneOutInfererInfererNetworkRegretRequest {
      return {
        topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
        oneOutInferer: isSet(object.oneOutInferer) ? globalThis.String(object.oneOutInferer) : "",
        inferer: isSet(object.inferer) ? globalThis.String(object.inferer) : "",
      };
    },

    toJSON(message: QueryOneOutInfererInfererNetworkRegretRequest): unknown {
      const obj: any = {};
      if (message.topicId !== "0") {
        obj.topicId = message.topicId;
      }
      if (message.oneOutInferer !== "") {
        obj.oneOutInferer = message.oneOutInferer;
      }
      if (message.inferer !== "") {
        obj.inferer = message.inferer;
      }
      return obj;
    },

    create(
      base?: DeepPartial<QueryOneOutInfererInfererNetworkRegretRequest>,
    ): QueryOneOutInfererInfererNetworkRegretRequest {
      return QueryOneOutInfererInfererNetworkRegretRequest.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<QueryOneOutInfererInfererNetworkRegretRequest>,
    ): QueryOneOutInfererInfererNetworkRegretRequest {
      const message = createBaseQueryOneOutInfererInfererNetworkRegretRequest();
      message.topicId = object.topicId ?? "0";
      message.oneOutInferer = object.oneOutInferer ?? "";
      message.inferer = object.inferer ?? "";
      return message;
    },
  };

function createBaseQueryOneOutInfererInfererNetworkRegretResponse(): QueryOneOutInfererInfererNetworkRegretResponse {
  return { regret: undefined };
}

export const QueryOneOutInfererInfererNetworkRegretResponse: MessageFns<
  QueryOneOutInfererInfererNetworkRegretResponse
> = {
  encode(
    message: QueryOneOutInfererInfererNetworkRegretResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.regret !== undefined) {
      TimestampedValue.encode(message.regret, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryOneOutInfererInfererNetworkRegretResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryOneOutInfererInfererNetworkRegretResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.regret = TimestampedValue.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryOneOutInfererInfererNetworkRegretResponse {
    return { regret: isSet(object.regret) ? TimestampedValue.fromJSON(object.regret) : undefined };
  },

  toJSON(message: QueryOneOutInfererInfererNetworkRegretResponse): unknown {
    const obj: any = {};
    if (message.regret !== undefined) {
      obj.regret = TimestampedValue.toJSON(message.regret);
    }
    return obj;
  },

  create(
    base?: DeepPartial<QueryOneOutInfererInfererNetworkRegretResponse>,
  ): QueryOneOutInfererInfererNetworkRegretResponse {
    return QueryOneOutInfererInfererNetworkRegretResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<QueryOneOutInfererInfererNetworkRegretResponse>,
  ): QueryOneOutInfererInfererNetworkRegretResponse {
    const message = createBaseQueryOneOutInfererInfererNetworkRegretResponse();
    message.regret = (object.regret !== undefined && object.regret !== null)
      ? TimestampedValue.fromPartial(object.regret)
      : undefined;
    return message;
  },
};

function createBaseQueryOneOutInfererForecasterNetworkRegretRequest(): QueryOneOutInfererForecasterNetworkRegretRequest {
  return { topicId: "0", oneOutInferer: "", forecaster: "" };
}

export const QueryOneOutInfererForecasterNetworkRegretRequest: MessageFns<
  QueryOneOutInfererForecasterNetworkRegretRequest
> = {
  encode(
    message: QueryOneOutInfererForecasterNetworkRegretRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.topicId !== "0") {
      writer.uint32(8).uint64(message.topicId);
    }
    if (message.oneOutInferer !== "") {
      writer.uint32(18).string(message.oneOutInferer);
    }
    if (message.forecaster !== "") {
      writer.uint32(26).string(message.forecaster);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryOneOutInfererForecasterNetworkRegretRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryOneOutInfererForecasterNetworkRegretRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.oneOutInferer = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.forecaster = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryOneOutInfererForecasterNetworkRegretRequest {
    return {
      topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
      oneOutInferer: isSet(object.oneOutInferer) ? globalThis.String(object.oneOutInferer) : "",
      forecaster: isSet(object.forecaster) ? globalThis.String(object.forecaster) : "",
    };
  },

  toJSON(message: QueryOneOutInfererForecasterNetworkRegretRequest): unknown {
    const obj: any = {};
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    if (message.oneOutInferer !== "") {
      obj.oneOutInferer = message.oneOutInferer;
    }
    if (message.forecaster !== "") {
      obj.forecaster = message.forecaster;
    }
    return obj;
  },

  create(
    base?: DeepPartial<QueryOneOutInfererForecasterNetworkRegretRequest>,
  ): QueryOneOutInfererForecasterNetworkRegretRequest {
    return QueryOneOutInfererForecasterNetworkRegretRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<QueryOneOutInfererForecasterNetworkRegretRequest>,
  ): QueryOneOutInfererForecasterNetworkRegretRequest {
    const message = createBaseQueryOneOutInfererForecasterNetworkRegretRequest();
    message.topicId = object.topicId ?? "0";
    message.oneOutInferer = object.oneOutInferer ?? "";
    message.forecaster = object.forecaster ?? "";
    return message;
  },
};

function createBaseQueryOneOutInfererForecasterNetworkRegretResponse(): QueryOneOutInfererForecasterNetworkRegretResponse {
  return { regret: undefined };
}

export const QueryOneOutInfererForecasterNetworkRegretResponse: MessageFns<
  QueryOneOutInfererForecasterNetworkRegretResponse
> = {
  encode(
    message: QueryOneOutInfererForecasterNetworkRegretResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.regret !== undefined) {
      TimestampedValue.encode(message.regret, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryOneOutInfererForecasterNetworkRegretResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryOneOutInfererForecasterNetworkRegretResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.regret = TimestampedValue.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryOneOutInfererForecasterNetworkRegretResponse {
    return { regret: isSet(object.regret) ? TimestampedValue.fromJSON(object.regret) : undefined };
  },

  toJSON(message: QueryOneOutInfererForecasterNetworkRegretResponse): unknown {
    const obj: any = {};
    if (message.regret !== undefined) {
      obj.regret = TimestampedValue.toJSON(message.regret);
    }
    return obj;
  },

  create(
    base?: DeepPartial<QueryOneOutInfererForecasterNetworkRegretResponse>,
  ): QueryOneOutInfererForecasterNetworkRegretResponse {
    return QueryOneOutInfererForecasterNetworkRegretResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<QueryOneOutInfererForecasterNetworkRegretResponse>,
  ): QueryOneOutInfererForecasterNetworkRegretResponse {
    const message = createBaseQueryOneOutInfererForecasterNetworkRegretResponse();
    message.regret = (object.regret !== undefined && object.regret !== null)
      ? TimestampedValue.fromPartial(object.regret)
      : undefined;
    return message;
  },
};

function createBaseQueryOneOutForecasterInfererNetworkRegretRequest(): QueryOneOutForecasterInfererNetworkRegretRequest {
  return { topicId: "0", oneOutForecaster: "", inferer: "" };
}

export const QueryOneOutForecasterInfererNetworkRegretRequest: MessageFns<
  QueryOneOutForecasterInfererNetworkRegretRequest
> = {
  encode(
    message: QueryOneOutForecasterInfererNetworkRegretRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.topicId !== "0") {
      writer.uint32(8).uint64(message.topicId);
    }
    if (message.oneOutForecaster !== "") {
      writer.uint32(18).string(message.oneOutForecaster);
    }
    if (message.inferer !== "") {
      writer.uint32(26).string(message.inferer);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryOneOutForecasterInfererNetworkRegretRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryOneOutForecasterInfererNetworkRegretRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.oneOutForecaster = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.inferer = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryOneOutForecasterInfererNetworkRegretRequest {
    return {
      topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
      oneOutForecaster: isSet(object.oneOutForecaster) ? globalThis.String(object.oneOutForecaster) : "",
      inferer: isSet(object.inferer) ? globalThis.String(object.inferer) : "",
    };
  },

  toJSON(message: QueryOneOutForecasterInfererNetworkRegretRequest): unknown {
    const obj: any = {};
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    if (message.oneOutForecaster !== "") {
      obj.oneOutForecaster = message.oneOutForecaster;
    }
    if (message.inferer !== "") {
      obj.inferer = message.inferer;
    }
    return obj;
  },

  create(
    base?: DeepPartial<QueryOneOutForecasterInfererNetworkRegretRequest>,
  ): QueryOneOutForecasterInfererNetworkRegretRequest {
    return QueryOneOutForecasterInfererNetworkRegretRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<QueryOneOutForecasterInfererNetworkRegretRequest>,
  ): QueryOneOutForecasterInfererNetworkRegretRequest {
    const message = createBaseQueryOneOutForecasterInfererNetworkRegretRequest();
    message.topicId = object.topicId ?? "0";
    message.oneOutForecaster = object.oneOutForecaster ?? "";
    message.inferer = object.inferer ?? "";
    return message;
  },
};

function createBaseQueryOneOutForecasterInfererNetworkRegretResponse(): QueryOneOutForecasterInfererNetworkRegretResponse {
  return { regret: undefined };
}

export const QueryOneOutForecasterInfererNetworkRegretResponse: MessageFns<
  QueryOneOutForecasterInfererNetworkRegretResponse
> = {
  encode(
    message: QueryOneOutForecasterInfererNetworkRegretResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.regret !== undefined) {
      TimestampedValue.encode(message.regret, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryOneOutForecasterInfererNetworkRegretResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryOneOutForecasterInfererNetworkRegretResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.regret = TimestampedValue.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryOneOutForecasterInfererNetworkRegretResponse {
    return { regret: isSet(object.regret) ? TimestampedValue.fromJSON(object.regret) : undefined };
  },

  toJSON(message: QueryOneOutForecasterInfererNetworkRegretResponse): unknown {
    const obj: any = {};
    if (message.regret !== undefined) {
      obj.regret = TimestampedValue.toJSON(message.regret);
    }
    return obj;
  },

  create(
    base?: DeepPartial<QueryOneOutForecasterInfererNetworkRegretResponse>,
  ): QueryOneOutForecasterInfererNetworkRegretResponse {
    return QueryOneOutForecasterInfererNetworkRegretResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<QueryOneOutForecasterInfererNetworkRegretResponse>,
  ): QueryOneOutForecasterInfererNetworkRegretResponse {
    const message = createBaseQueryOneOutForecasterInfererNetworkRegretResponse();
    message.regret = (object.regret !== undefined && object.regret !== null)
      ? TimestampedValue.fromPartial(object.regret)
      : undefined;
    return message;
  },
};

function createBaseQueryOneOutForecasterForecasterNetworkRegretRequest(): QueryOneOutForecasterForecasterNetworkRegretRequest {
  return { topicId: "0", oneOutForecaster: "", forecaster: "" };
}

export const QueryOneOutForecasterForecasterNetworkRegretRequest: MessageFns<
  QueryOneOutForecasterForecasterNetworkRegretRequest
> = {
  encode(
    message: QueryOneOutForecasterForecasterNetworkRegretRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.topicId !== "0") {
      writer.uint32(8).uint64(message.topicId);
    }
    if (message.oneOutForecaster !== "") {
      writer.uint32(18).string(message.oneOutForecaster);
    }
    if (message.forecaster !== "") {
      writer.uint32(26).string(message.forecaster);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryOneOutForecasterForecasterNetworkRegretRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryOneOutForecasterForecasterNetworkRegretRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.oneOutForecaster = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.forecaster = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryOneOutForecasterForecasterNetworkRegretRequest {
    return {
      topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
      oneOutForecaster: isSet(object.oneOutForecaster) ? globalThis.String(object.oneOutForecaster) : "",
      forecaster: isSet(object.forecaster) ? globalThis.String(object.forecaster) : "",
    };
  },

  toJSON(message: QueryOneOutForecasterForecasterNetworkRegretRequest): unknown {
    const obj: any = {};
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    if (message.oneOutForecaster !== "") {
      obj.oneOutForecaster = message.oneOutForecaster;
    }
    if (message.forecaster !== "") {
      obj.forecaster = message.forecaster;
    }
    return obj;
  },

  create(
    base?: DeepPartial<QueryOneOutForecasterForecasterNetworkRegretRequest>,
  ): QueryOneOutForecasterForecasterNetworkRegretRequest {
    return QueryOneOutForecasterForecasterNetworkRegretRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<QueryOneOutForecasterForecasterNetworkRegretRequest>,
  ): QueryOneOutForecasterForecasterNetworkRegretRequest {
    const message = createBaseQueryOneOutForecasterForecasterNetworkRegretRequest();
    message.topicId = object.topicId ?? "0";
    message.oneOutForecaster = object.oneOutForecaster ?? "";
    message.forecaster = object.forecaster ?? "";
    return message;
  },
};

function createBaseQueryOneOutForecasterForecasterNetworkRegretResponse(): QueryOneOutForecasterForecasterNetworkRegretResponse {
  return { regret: undefined };
}

export const QueryOneOutForecasterForecasterNetworkRegretResponse: MessageFns<
  QueryOneOutForecasterForecasterNetworkRegretResponse
> = {
  encode(
    message: QueryOneOutForecasterForecasterNetworkRegretResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.regret !== undefined) {
      TimestampedValue.encode(message.regret, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryOneOutForecasterForecasterNetworkRegretResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryOneOutForecasterForecasterNetworkRegretResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.regret = TimestampedValue.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryOneOutForecasterForecasterNetworkRegretResponse {
    return { regret: isSet(object.regret) ? TimestampedValue.fromJSON(object.regret) : undefined };
  },

  toJSON(message: QueryOneOutForecasterForecasterNetworkRegretResponse): unknown {
    const obj: any = {};
    if (message.regret !== undefined) {
      obj.regret = TimestampedValue.toJSON(message.regret);
    }
    return obj;
  },

  create(
    base?: DeepPartial<QueryOneOutForecasterForecasterNetworkRegretResponse>,
  ): QueryOneOutForecasterForecasterNetworkRegretResponse {
    return QueryOneOutForecasterForecasterNetworkRegretResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<QueryOneOutForecasterForecasterNetworkRegretResponse>,
  ): QueryOneOutForecasterForecasterNetworkRegretResponse {
    const message = createBaseQueryOneOutForecasterForecasterNetworkRegretResponse();
    message.regret = (object.regret !== undefined && object.regret !== null)
      ? TimestampedValue.fromPartial(object.regret)
      : undefined;
    return message;
  },
};

function createBaseQueryParamsRequest(): QueryParamsRequest {
  return {};
}

export const QueryParamsRequest: MessageFns<QueryParamsRequest> = {
  encode(_: QueryParamsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryParamsRequest {
    return {};
  },

  toJSON(_: QueryParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<QueryParamsRequest>): QueryParamsRequest {
    return QueryParamsRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<QueryParamsRequest>): QueryParamsRequest {
    const message = createBaseQueryParamsRequest();
    return message;
  },
};

function createBaseQueryParamsResponse(): QueryParamsResponse {
  return { params: undefined };
}

export const QueryParamsResponse: MessageFns<QueryParamsResponse> = {
  encode(message: QueryParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParamsResponse {
    return { params: isSet(object.params) ? Params.fromJSON(object.params) : undefined };
  },

  toJSON(message: QueryParamsResponse): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryParamsResponse>): QueryParamsResponse {
    return QueryParamsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryParamsResponse>): QueryParamsResponse {
    const message = createBaseQueryParamsResponse();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseQueryTotalStakeRequest(): QueryTotalStakeRequest {
  return {};
}

export const QueryTotalStakeRequest: MessageFns<QueryTotalStakeRequest> = {
  encode(_: QueryTotalStakeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryTotalStakeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryTotalStakeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryTotalStakeRequest {
    return {};
  },

  toJSON(_: QueryTotalStakeRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<QueryTotalStakeRequest>): QueryTotalStakeRequest {
    return QueryTotalStakeRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<QueryTotalStakeRequest>): QueryTotalStakeRequest {
    const message = createBaseQueryTotalStakeRequest();
    return message;
  },
};

function createBaseQueryTotalStakeResponse(): QueryTotalStakeResponse {
  return { amount: "" };
}

export const QueryTotalStakeResponse: MessageFns<QueryTotalStakeResponse> = {
  encode(message: QueryTotalStakeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.amount !== "") {
      writer.uint32(10).string(message.amount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryTotalStakeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryTotalStakeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.amount = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryTotalStakeResponse {
    return { amount: isSet(object.amount) ? globalThis.String(object.amount) : "" };
  },

  toJSON(message: QueryTotalStakeResponse): unknown {
    const obj: any = {};
    if (message.amount !== "") {
      obj.amount = message.amount;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryTotalStakeResponse>): QueryTotalStakeResponse {
    return QueryTotalStakeResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryTotalStakeResponse>): QueryTotalStakeResponse {
    const message = createBaseQueryTotalStakeResponse();
    message.amount = object.amount ?? "";
    return message;
  },
};

function createBaseQueryReputerStakeInTopicRequest(): QueryReputerStakeInTopicRequest {
  return { address: "", topicId: "0" };
}

export const QueryReputerStakeInTopicRequest: MessageFns<QueryReputerStakeInTopicRequest> = {
  encode(message: QueryReputerStakeInTopicRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.topicId !== "0") {
      writer.uint32(16).uint64(message.topicId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryReputerStakeInTopicRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryReputerStakeInTopicRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryReputerStakeInTopicRequest {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
    };
  },

  toJSON(message: QueryReputerStakeInTopicRequest): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryReputerStakeInTopicRequest>): QueryReputerStakeInTopicRequest {
    return QueryReputerStakeInTopicRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryReputerStakeInTopicRequest>): QueryReputerStakeInTopicRequest {
    const message = createBaseQueryReputerStakeInTopicRequest();
    message.address = object.address ?? "";
    message.topicId = object.topicId ?? "0";
    return message;
  },
};

function createBaseQueryReputerStakeInTopicResponse(): QueryReputerStakeInTopicResponse {
  return { amount: "" };
}

export const QueryReputerStakeInTopicResponse: MessageFns<QueryReputerStakeInTopicResponse> = {
  encode(message: QueryReputerStakeInTopicResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.amount !== "") {
      writer.uint32(10).string(message.amount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryReputerStakeInTopicResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryReputerStakeInTopicResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.amount = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryReputerStakeInTopicResponse {
    return { amount: isSet(object.amount) ? globalThis.String(object.amount) : "" };
  },

  toJSON(message: QueryReputerStakeInTopicResponse): unknown {
    const obj: any = {};
    if (message.amount !== "") {
      obj.amount = message.amount;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryReputerStakeInTopicResponse>): QueryReputerStakeInTopicResponse {
    return QueryReputerStakeInTopicResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryReputerStakeInTopicResponse>): QueryReputerStakeInTopicResponse {
    const message = createBaseQueryReputerStakeInTopicResponse();
    message.amount = object.amount ?? "";
    return message;
  },
};

function createBaseQueryMultiReputerStakeInTopicRequest(): QueryMultiReputerStakeInTopicRequest {
  return { addresses: [], topicId: "0" };
}

export const QueryMultiReputerStakeInTopicRequest: MessageFns<QueryMultiReputerStakeInTopicRequest> = {
  encode(message: QueryMultiReputerStakeInTopicRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.addresses) {
      writer.uint32(10).string(v!);
    }
    if (message.topicId !== "0") {
      writer.uint32(16).uint64(message.topicId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryMultiReputerStakeInTopicRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryMultiReputerStakeInTopicRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.addresses.push(reader.string());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryMultiReputerStakeInTopicRequest {
    return {
      addresses: globalThis.Array.isArray(object?.addresses)
        ? object.addresses.map((e: any) => globalThis.String(e))
        : [],
      topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
    };
  },

  toJSON(message: QueryMultiReputerStakeInTopicRequest): unknown {
    const obj: any = {};
    if (message.addresses?.length) {
      obj.addresses = message.addresses;
    }
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryMultiReputerStakeInTopicRequest>): QueryMultiReputerStakeInTopicRequest {
    return QueryMultiReputerStakeInTopicRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryMultiReputerStakeInTopicRequest>): QueryMultiReputerStakeInTopicRequest {
    const message = createBaseQueryMultiReputerStakeInTopicRequest();
    message.addresses = object.addresses?.map((e) => e) || [];
    message.topicId = object.topicId ?? "0";
    return message;
  },
};

function createBaseQueryMultiReputerStakeInTopicResponse(): QueryMultiReputerStakeInTopicResponse {
  return { amounts: [] };
}

export const QueryMultiReputerStakeInTopicResponse: MessageFns<QueryMultiReputerStakeInTopicResponse> = {
  encode(message: QueryMultiReputerStakeInTopicResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.amounts) {
      StakeInfo.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryMultiReputerStakeInTopicResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryMultiReputerStakeInTopicResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.amounts.push(StakeInfo.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryMultiReputerStakeInTopicResponse {
    return {
      amounts: globalThis.Array.isArray(object?.amounts) ? object.amounts.map((e: any) => StakeInfo.fromJSON(e)) : [],
    };
  },

  toJSON(message: QueryMultiReputerStakeInTopicResponse): unknown {
    const obj: any = {};
    if (message.amounts?.length) {
      obj.amounts = message.amounts.map((e) => StakeInfo.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<QueryMultiReputerStakeInTopicResponse>): QueryMultiReputerStakeInTopicResponse {
    return QueryMultiReputerStakeInTopicResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryMultiReputerStakeInTopicResponse>): QueryMultiReputerStakeInTopicResponse {
    const message = createBaseQueryMultiReputerStakeInTopicResponse();
    message.amounts = object.amounts?.map((e) => StakeInfo.fromPartial(e)) || [];
    return message;
  },
};

function createBaseQueryStakeFromReputerInTopicInSelfRequest(): QueryStakeFromReputerInTopicInSelfRequest {
  return { reputerAddress: "", topicId: "0" };
}

export const QueryStakeFromReputerInTopicInSelfRequest: MessageFns<QueryStakeFromReputerInTopicInSelfRequest> = {
  encode(message: QueryStakeFromReputerInTopicInSelfRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.reputerAddress !== "") {
      writer.uint32(10).string(message.reputerAddress);
    }
    if (message.topicId !== "0") {
      writer.uint32(16).uint64(message.topicId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryStakeFromReputerInTopicInSelfRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryStakeFromReputerInTopicInSelfRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.reputerAddress = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryStakeFromReputerInTopicInSelfRequest {
    return {
      reputerAddress: isSet(object.reputerAddress) ? globalThis.String(object.reputerAddress) : "",
      topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
    };
  },

  toJSON(message: QueryStakeFromReputerInTopicInSelfRequest): unknown {
    const obj: any = {};
    if (message.reputerAddress !== "") {
      obj.reputerAddress = message.reputerAddress;
    }
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryStakeFromReputerInTopicInSelfRequest>): QueryStakeFromReputerInTopicInSelfRequest {
    return QueryStakeFromReputerInTopicInSelfRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<QueryStakeFromReputerInTopicInSelfRequest>,
  ): QueryStakeFromReputerInTopicInSelfRequest {
    const message = createBaseQueryStakeFromReputerInTopicInSelfRequest();
    message.reputerAddress = object.reputerAddress ?? "";
    message.topicId = object.topicId ?? "0";
    return message;
  },
};

function createBaseQueryStakeFromReputerInTopicInSelfResponse(): QueryStakeFromReputerInTopicInSelfResponse {
  return { amount: "" };
}

export const QueryStakeFromReputerInTopicInSelfResponse: MessageFns<QueryStakeFromReputerInTopicInSelfResponse> = {
  encode(message: QueryStakeFromReputerInTopicInSelfResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.amount !== "") {
      writer.uint32(10).string(message.amount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryStakeFromReputerInTopicInSelfResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryStakeFromReputerInTopicInSelfResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.amount = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryStakeFromReputerInTopicInSelfResponse {
    return { amount: isSet(object.amount) ? globalThis.String(object.amount) : "" };
  },

  toJSON(message: QueryStakeFromReputerInTopicInSelfResponse): unknown {
    const obj: any = {};
    if (message.amount !== "") {
      obj.amount = message.amount;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryStakeFromReputerInTopicInSelfResponse>): QueryStakeFromReputerInTopicInSelfResponse {
    return QueryStakeFromReputerInTopicInSelfResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<QueryStakeFromReputerInTopicInSelfResponse>,
  ): QueryStakeFromReputerInTopicInSelfResponse {
    const message = createBaseQueryStakeFromReputerInTopicInSelfResponse();
    message.amount = object.amount ?? "";
    return message;
  },
};

function createBaseQueryDelegateStakeInTopicInReputerRequest(): QueryDelegateStakeInTopicInReputerRequest {
  return { reputerAddress: "", topicId: "0" };
}

export const QueryDelegateStakeInTopicInReputerRequest: MessageFns<QueryDelegateStakeInTopicInReputerRequest> = {
  encode(message: QueryDelegateStakeInTopicInReputerRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.reputerAddress !== "") {
      writer.uint32(10).string(message.reputerAddress);
    }
    if (message.topicId !== "0") {
      writer.uint32(16).uint64(message.topicId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryDelegateStakeInTopicInReputerRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDelegateStakeInTopicInReputerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.reputerAddress = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDelegateStakeInTopicInReputerRequest {
    return {
      reputerAddress: isSet(object.reputerAddress) ? globalThis.String(object.reputerAddress) : "",
      topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
    };
  },

  toJSON(message: QueryDelegateStakeInTopicInReputerRequest): unknown {
    const obj: any = {};
    if (message.reputerAddress !== "") {
      obj.reputerAddress = message.reputerAddress;
    }
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryDelegateStakeInTopicInReputerRequest>): QueryDelegateStakeInTopicInReputerRequest {
    return QueryDelegateStakeInTopicInReputerRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<QueryDelegateStakeInTopicInReputerRequest>,
  ): QueryDelegateStakeInTopicInReputerRequest {
    const message = createBaseQueryDelegateStakeInTopicInReputerRequest();
    message.reputerAddress = object.reputerAddress ?? "";
    message.topicId = object.topicId ?? "0";
    return message;
  },
};

function createBaseQueryDelegateStakeInTopicInReputerResponse(): QueryDelegateStakeInTopicInReputerResponse {
  return { amount: "" };
}

export const QueryDelegateStakeInTopicInReputerResponse: MessageFns<QueryDelegateStakeInTopicInReputerResponse> = {
  encode(message: QueryDelegateStakeInTopicInReputerResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.amount !== "") {
      writer.uint32(10).string(message.amount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryDelegateStakeInTopicInReputerResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDelegateStakeInTopicInReputerResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.amount = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDelegateStakeInTopicInReputerResponse {
    return { amount: isSet(object.amount) ? globalThis.String(object.amount) : "" };
  },

  toJSON(message: QueryDelegateStakeInTopicInReputerResponse): unknown {
    const obj: any = {};
    if (message.amount !== "") {
      obj.amount = message.amount;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryDelegateStakeInTopicInReputerResponse>): QueryDelegateStakeInTopicInReputerResponse {
    return QueryDelegateStakeInTopicInReputerResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<QueryDelegateStakeInTopicInReputerResponse>,
  ): QueryDelegateStakeInTopicInReputerResponse {
    const message = createBaseQueryDelegateStakeInTopicInReputerResponse();
    message.amount = object.amount ?? "";
    return message;
  },
};

function createBaseQueryStakeFromDelegatorInTopicInReputerRequest(): QueryStakeFromDelegatorInTopicInReputerRequest {
  return { delegatorAddress: "", reputerAddress: "", topicId: "0" };
}

export const QueryStakeFromDelegatorInTopicInReputerRequest: MessageFns<
  QueryStakeFromDelegatorInTopicInReputerRequest
> = {
  encode(
    message: QueryStakeFromDelegatorInTopicInReputerRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.delegatorAddress !== "") {
      writer.uint32(10).string(message.delegatorAddress);
    }
    if (message.reputerAddress !== "") {
      writer.uint32(18).string(message.reputerAddress);
    }
    if (message.topicId !== "0") {
      writer.uint32(24).uint64(message.topicId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryStakeFromDelegatorInTopicInReputerRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryStakeFromDelegatorInTopicInReputerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.delegatorAddress = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.reputerAddress = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryStakeFromDelegatorInTopicInReputerRequest {
    return {
      delegatorAddress: isSet(object.delegatorAddress) ? globalThis.String(object.delegatorAddress) : "",
      reputerAddress: isSet(object.reputerAddress) ? globalThis.String(object.reputerAddress) : "",
      topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
    };
  },

  toJSON(message: QueryStakeFromDelegatorInTopicInReputerRequest): unknown {
    const obj: any = {};
    if (message.delegatorAddress !== "") {
      obj.delegatorAddress = message.delegatorAddress;
    }
    if (message.reputerAddress !== "") {
      obj.reputerAddress = message.reputerAddress;
    }
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    return obj;
  },

  create(
    base?: DeepPartial<QueryStakeFromDelegatorInTopicInReputerRequest>,
  ): QueryStakeFromDelegatorInTopicInReputerRequest {
    return QueryStakeFromDelegatorInTopicInReputerRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<QueryStakeFromDelegatorInTopicInReputerRequest>,
  ): QueryStakeFromDelegatorInTopicInReputerRequest {
    const message = createBaseQueryStakeFromDelegatorInTopicInReputerRequest();
    message.delegatorAddress = object.delegatorAddress ?? "";
    message.reputerAddress = object.reputerAddress ?? "";
    message.topicId = object.topicId ?? "0";
    return message;
  },
};

function createBaseQueryStakeFromDelegatorInTopicInReputerResponse(): QueryStakeFromDelegatorInTopicInReputerResponse {
  return { amount: "" };
}

export const QueryStakeFromDelegatorInTopicInReputerResponse: MessageFns<
  QueryStakeFromDelegatorInTopicInReputerResponse
> = {
  encode(
    message: QueryStakeFromDelegatorInTopicInReputerResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.amount !== "") {
      writer.uint32(10).string(message.amount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryStakeFromDelegatorInTopicInReputerResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryStakeFromDelegatorInTopicInReputerResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.amount = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryStakeFromDelegatorInTopicInReputerResponse {
    return { amount: isSet(object.amount) ? globalThis.String(object.amount) : "" };
  },

  toJSON(message: QueryStakeFromDelegatorInTopicInReputerResponse): unknown {
    const obj: any = {};
    if (message.amount !== "") {
      obj.amount = message.amount;
    }
    return obj;
  },

  create(
    base?: DeepPartial<QueryStakeFromDelegatorInTopicInReputerResponse>,
  ): QueryStakeFromDelegatorInTopicInReputerResponse {
    return QueryStakeFromDelegatorInTopicInReputerResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<QueryStakeFromDelegatorInTopicInReputerResponse>,
  ): QueryStakeFromDelegatorInTopicInReputerResponse {
    const message = createBaseQueryStakeFromDelegatorInTopicInReputerResponse();
    message.amount = object.amount ?? "";
    return message;
  },
};

function createBaseQueryStakeFromDelegatorInTopicRequest(): QueryStakeFromDelegatorInTopicRequest {
  return { delegatorAddress: "", topicId: "0" };
}

export const QueryStakeFromDelegatorInTopicRequest: MessageFns<QueryStakeFromDelegatorInTopicRequest> = {
  encode(message: QueryStakeFromDelegatorInTopicRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.delegatorAddress !== "") {
      writer.uint32(10).string(message.delegatorAddress);
    }
    if (message.topicId !== "0") {
      writer.uint32(16).uint64(message.topicId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryStakeFromDelegatorInTopicRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryStakeFromDelegatorInTopicRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.delegatorAddress = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryStakeFromDelegatorInTopicRequest {
    return {
      delegatorAddress: isSet(object.delegatorAddress) ? globalThis.String(object.delegatorAddress) : "",
      topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
    };
  },

  toJSON(message: QueryStakeFromDelegatorInTopicRequest): unknown {
    const obj: any = {};
    if (message.delegatorAddress !== "") {
      obj.delegatorAddress = message.delegatorAddress;
    }
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryStakeFromDelegatorInTopicRequest>): QueryStakeFromDelegatorInTopicRequest {
    return QueryStakeFromDelegatorInTopicRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryStakeFromDelegatorInTopicRequest>): QueryStakeFromDelegatorInTopicRequest {
    const message = createBaseQueryStakeFromDelegatorInTopicRequest();
    message.delegatorAddress = object.delegatorAddress ?? "";
    message.topicId = object.topicId ?? "0";
    return message;
  },
};

function createBaseQueryStakeFromDelegatorInTopicResponse(): QueryStakeFromDelegatorInTopicResponse {
  return { amount: "" };
}

export const QueryStakeFromDelegatorInTopicResponse: MessageFns<QueryStakeFromDelegatorInTopicResponse> = {
  encode(message: QueryStakeFromDelegatorInTopicResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.amount !== "") {
      writer.uint32(10).string(message.amount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryStakeFromDelegatorInTopicResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryStakeFromDelegatorInTopicResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.amount = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryStakeFromDelegatorInTopicResponse {
    return { amount: isSet(object.amount) ? globalThis.String(object.amount) : "" };
  },

  toJSON(message: QueryStakeFromDelegatorInTopicResponse): unknown {
    const obj: any = {};
    if (message.amount !== "") {
      obj.amount = message.amount;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryStakeFromDelegatorInTopicResponse>): QueryStakeFromDelegatorInTopicResponse {
    return QueryStakeFromDelegatorInTopicResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryStakeFromDelegatorInTopicResponse>): QueryStakeFromDelegatorInTopicResponse {
    const message = createBaseQueryStakeFromDelegatorInTopicResponse();
    message.amount = object.amount ?? "";
    return message;
  },
};

function createBaseQueryTopicStakeRequest(): QueryTopicStakeRequest {
  return { topicId: "0" };
}

export const QueryTopicStakeRequest: MessageFns<QueryTopicStakeRequest> = {
  encode(message: QueryTopicStakeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.topicId !== "0") {
      writer.uint32(8).uint64(message.topicId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryTopicStakeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryTopicStakeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryTopicStakeRequest {
    return { topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0" };
  },

  toJSON(message: QueryTopicStakeRequest): unknown {
    const obj: any = {};
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryTopicStakeRequest>): QueryTopicStakeRequest {
    return QueryTopicStakeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryTopicStakeRequest>): QueryTopicStakeRequest {
    const message = createBaseQueryTopicStakeRequest();
    message.topicId = object.topicId ?? "0";
    return message;
  },
};

function createBaseQueryTopicStakeResponse(): QueryTopicStakeResponse {
  return { amount: "" };
}

export const QueryTopicStakeResponse: MessageFns<QueryTopicStakeResponse> = {
  encode(message: QueryTopicStakeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.amount !== "") {
      writer.uint32(10).string(message.amount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryTopicStakeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryTopicStakeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.amount = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryTopicStakeResponse {
    return { amount: isSet(object.amount) ? globalThis.String(object.amount) : "" };
  },

  toJSON(message: QueryTopicStakeResponse): unknown {
    const obj: any = {};
    if (message.amount !== "") {
      obj.amount = message.amount;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryTopicStakeResponse>): QueryTopicStakeResponse {
    return QueryTopicStakeResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryTopicStakeResponse>): QueryTopicStakeResponse {
    const message = createBaseQueryTopicStakeResponse();
    message.amount = object.amount ?? "";
    return message;
  },
};

function createBaseQueryNetworkLossBundleAtBlockRequest(): QueryNetworkLossBundleAtBlockRequest {
  return { topicId: "0", blockHeight: "0" };
}

export const QueryNetworkLossBundleAtBlockRequest: MessageFns<QueryNetworkLossBundleAtBlockRequest> = {
  encode(message: QueryNetworkLossBundleAtBlockRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.topicId !== "0") {
      writer.uint32(8).uint64(message.topicId);
    }
    if (message.blockHeight !== "0") {
      writer.uint32(16).int64(message.blockHeight);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryNetworkLossBundleAtBlockRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryNetworkLossBundleAtBlockRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.blockHeight = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryNetworkLossBundleAtBlockRequest {
    return {
      topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
      blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
    };
  },

  toJSON(message: QueryNetworkLossBundleAtBlockRequest): unknown {
    const obj: any = {};
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    if (message.blockHeight !== "0") {
      obj.blockHeight = message.blockHeight;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryNetworkLossBundleAtBlockRequest>): QueryNetworkLossBundleAtBlockRequest {
    return QueryNetworkLossBundleAtBlockRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryNetworkLossBundleAtBlockRequest>): QueryNetworkLossBundleAtBlockRequest {
    const message = createBaseQueryNetworkLossBundleAtBlockRequest();
    message.topicId = object.topicId ?? "0";
    message.blockHeight = object.blockHeight ?? "0";
    return message;
  },
};

function createBaseQueryNetworkLossBundleAtBlockResponse(): QueryNetworkLossBundleAtBlockResponse {
  return { lossBundle: undefined };
}

export const QueryNetworkLossBundleAtBlockResponse: MessageFns<QueryNetworkLossBundleAtBlockResponse> = {
  encode(message: QueryNetworkLossBundleAtBlockResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.lossBundle !== undefined) {
      ValueBundle.encode(message.lossBundle, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryNetworkLossBundleAtBlockResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryNetworkLossBundleAtBlockResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.lossBundle = ValueBundle.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryNetworkLossBundleAtBlockResponse {
    return { lossBundle: isSet(object.lossBundle) ? ValueBundle.fromJSON(object.lossBundle) : undefined };
  },

  toJSON(message: QueryNetworkLossBundleAtBlockResponse): unknown {
    const obj: any = {};
    if (message.lossBundle !== undefined) {
      obj.lossBundle = ValueBundle.toJSON(message.lossBundle);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryNetworkLossBundleAtBlockResponse>): QueryNetworkLossBundleAtBlockResponse {
    return QueryNetworkLossBundleAtBlockResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryNetworkLossBundleAtBlockResponse>): QueryNetworkLossBundleAtBlockResponse {
    const message = createBaseQueryNetworkLossBundleAtBlockResponse();
    message.lossBundle = (object.lossBundle !== undefined && object.lossBundle !== null)
      ? ValueBundle.fromPartial(object.lossBundle)
      : undefined;
    return message;
  },
};

function createBaseQueryNextTopicIdRequest(): QueryNextTopicIdRequest {
  return {};
}

export const QueryNextTopicIdRequest: MessageFns<QueryNextTopicIdRequest> = {
  encode(_: QueryNextTopicIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryNextTopicIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryNextTopicIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryNextTopicIdRequest {
    return {};
  },

  toJSON(_: QueryNextTopicIdRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<QueryNextTopicIdRequest>): QueryNextTopicIdRequest {
    return QueryNextTopicIdRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<QueryNextTopicIdRequest>): QueryNextTopicIdRequest {
    const message = createBaseQueryNextTopicIdRequest();
    return message;
  },
};

function createBaseQueryNextTopicIdResponse(): QueryNextTopicIdResponse {
  return { nextTopicId: "0" };
}

export const QueryNextTopicIdResponse: MessageFns<QueryNextTopicIdResponse> = {
  encode(message: QueryNextTopicIdResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.nextTopicId !== "0") {
      writer.uint32(8).uint64(message.nextTopicId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryNextTopicIdResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryNextTopicIdResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.nextTopicId = reader.uint64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryNextTopicIdResponse {
    return { nextTopicId: isSet(object.nextTopicId) ? globalThis.String(object.nextTopicId) : "0" };
  },

  toJSON(message: QueryNextTopicIdResponse): unknown {
    const obj: any = {};
    if (message.nextTopicId !== "0") {
      obj.nextTopicId = message.nextTopicId;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryNextTopicIdResponse>): QueryNextTopicIdResponse {
    return QueryNextTopicIdResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryNextTopicIdResponse>): QueryNextTopicIdResponse {
    const message = createBaseQueryNextTopicIdResponse();
    message.nextTopicId = object.nextTopicId ?? "0";
    return message;
  },
};

function createBaseQueryTopicRequest(): QueryTopicRequest {
  return { topicId: "0" };
}

export const QueryTopicRequest: MessageFns<QueryTopicRequest> = {
  encode(message: QueryTopicRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.topicId !== "0") {
      writer.uint32(8).uint64(message.topicId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryTopicRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryTopicRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryTopicRequest {
    return { topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0" };
  },

  toJSON(message: QueryTopicRequest): unknown {
    const obj: any = {};
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryTopicRequest>): QueryTopicRequest {
    return QueryTopicRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryTopicRequest>): QueryTopicRequest {
    const message = createBaseQueryTopicRequest();
    message.topicId = object.topicId ?? "0";
    return message;
  },
};

function createBaseQueryTopicResponse(): QueryTopicResponse {
  return { topic: undefined, weight: "", effectiveRevenue: "" };
}

export const QueryTopicResponse: MessageFns<QueryTopicResponse> = {
  encode(message: QueryTopicResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.topic !== undefined) {
      Topic.encode(message.topic, writer.uint32(10).fork()).join();
    }
    if (message.weight !== "") {
      writer.uint32(18).string(message.weight);
    }
    if (message.effectiveRevenue !== "") {
      writer.uint32(26).string(message.effectiveRevenue);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryTopicResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryTopicResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.topic = Topic.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.weight = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.effectiveRevenue = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryTopicResponse {
    return {
      topic: isSet(object.topic) ? Topic.fromJSON(object.topic) : undefined,
      weight: isSet(object.weight) ? globalThis.String(object.weight) : "",
      effectiveRevenue: isSet(object.effectiveRevenue) ? globalThis.String(object.effectiveRevenue) : "",
    };
  },

  toJSON(message: QueryTopicResponse): unknown {
    const obj: any = {};
    if (message.topic !== undefined) {
      obj.topic = Topic.toJSON(message.topic);
    }
    if (message.weight !== "") {
      obj.weight = message.weight;
    }
    if (message.effectiveRevenue !== "") {
      obj.effectiveRevenue = message.effectiveRevenue;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryTopicResponse>): QueryTopicResponse {
    return QueryTopicResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryTopicResponse>): QueryTopicResponse {
    const message = createBaseQueryTopicResponse();
    message.topic = (object.topic !== undefined && object.topic !== null) ? Topic.fromPartial(object.topic) : undefined;
    message.weight = object.weight ?? "";
    message.effectiveRevenue = object.effectiveRevenue ?? "";
    return message;
  },
};

function createBaseQueryActiveTopicsRequest(): QueryActiveTopicsRequest {
  return { pagination: undefined };
}

export const QueryActiveTopicsRequest: MessageFns<QueryActiveTopicsRequest> = {
  encode(message: QueryActiveTopicsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      SimpleCursorPaginationRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryActiveTopicsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryActiveTopicsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = SimpleCursorPaginationRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryActiveTopicsRequest {
    return {
      pagination: isSet(object.pagination) ? SimpleCursorPaginationRequest.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryActiveTopicsRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = SimpleCursorPaginationRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryActiveTopicsRequest>): QueryActiveTopicsRequest {
    return QueryActiveTopicsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryActiveTopicsRequest>): QueryActiveTopicsRequest {
    const message = createBaseQueryActiveTopicsRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? SimpleCursorPaginationRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryActiveTopicsResponse(): QueryActiveTopicsResponse {
  return { topics: [], pagination: undefined };
}

export const QueryActiveTopicsResponse: MessageFns<QueryActiveTopicsResponse> = {
  encode(message: QueryActiveTopicsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.topics) {
      Topic.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      SimpleCursorPaginationResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryActiveTopicsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryActiveTopicsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.topics.push(Topic.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = SimpleCursorPaginationResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryActiveTopicsResponse {
    return {
      topics: globalThis.Array.isArray(object?.topics) ? object.topics.map((e: any) => Topic.fromJSON(e)) : [],
      pagination: isSet(object.pagination) ? SimpleCursorPaginationResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryActiveTopicsResponse): unknown {
    const obj: any = {};
    if (message.topics?.length) {
      obj.topics = message.topics.map((e) => Topic.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = SimpleCursorPaginationResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryActiveTopicsResponse>): QueryActiveTopicsResponse {
    return QueryActiveTopicsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryActiveTopicsResponse>): QueryActiveTopicsResponse {
    const message = createBaseQueryActiveTopicsResponse();
    message.topics = object.topics?.map((e) => Topic.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? SimpleCursorPaginationResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryInferencesAtBlockRequest(): QueryInferencesAtBlockRequest {
  return { topicId: "0", blockHeight: "0" };
}

export const QueryInferencesAtBlockRequest: MessageFns<QueryInferencesAtBlockRequest> = {
  encode(message: QueryInferencesAtBlockRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.topicId !== "0") {
      writer.uint32(8).uint64(message.topicId);
    }
    if (message.blockHeight !== "0") {
      writer.uint32(16).int64(message.blockHeight);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryInferencesAtBlockRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryInferencesAtBlockRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.blockHeight = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryInferencesAtBlockRequest {
    return {
      topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
      blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
    };
  },

  toJSON(message: QueryInferencesAtBlockRequest): unknown {
    const obj: any = {};
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    if (message.blockHeight !== "0") {
      obj.blockHeight = message.blockHeight;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryInferencesAtBlockRequest>): QueryInferencesAtBlockRequest {
    return QueryInferencesAtBlockRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryInferencesAtBlockRequest>): QueryInferencesAtBlockRequest {
    const message = createBaseQueryInferencesAtBlockRequest();
    message.topicId = object.topicId ?? "0";
    message.blockHeight = object.blockHeight ?? "0";
    return message;
  },
};

function createBaseQueryInferencesAtBlockResponse(): QueryInferencesAtBlockResponse {
  return { inferences: undefined };
}

export const QueryInferencesAtBlockResponse: MessageFns<QueryInferencesAtBlockResponse> = {
  encode(message: QueryInferencesAtBlockResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.inferences !== undefined) {
      Inferences.encode(message.inferences, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryInferencesAtBlockResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryInferencesAtBlockResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.inferences = Inferences.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryInferencesAtBlockResponse {
    return { inferences: isSet(object.inferences) ? Inferences.fromJSON(object.inferences) : undefined };
  },

  toJSON(message: QueryInferencesAtBlockResponse): unknown {
    const obj: any = {};
    if (message.inferences !== undefined) {
      obj.inferences = Inferences.toJSON(message.inferences);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryInferencesAtBlockResponse>): QueryInferencesAtBlockResponse {
    return QueryInferencesAtBlockResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryInferencesAtBlockResponse>): QueryInferencesAtBlockResponse {
    const message = createBaseQueryInferencesAtBlockResponse();
    message.inferences = (object.inferences !== undefined && object.inferences !== null)
      ? Inferences.fromPartial(object.inferences)
      : undefined;
    return message;
  },
};

function createBaseQueryLatestTopicInferencesRequest(): QueryLatestTopicInferencesRequest {
  return { topicId: "0" };
}

export const QueryLatestTopicInferencesRequest: MessageFns<QueryLatestTopicInferencesRequest> = {
  encode(message: QueryLatestTopicInferencesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.topicId !== "0") {
      writer.uint32(8).uint64(message.topicId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryLatestTopicInferencesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryLatestTopicInferencesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryLatestTopicInferencesRequest {
    return { topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0" };
  },

  toJSON(message: QueryLatestTopicInferencesRequest): unknown {
    const obj: any = {};
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryLatestTopicInferencesRequest>): QueryLatestTopicInferencesRequest {
    return QueryLatestTopicInferencesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryLatestTopicInferencesRequest>): QueryLatestTopicInferencesRequest {
    const message = createBaseQueryLatestTopicInferencesRequest();
    message.topicId = object.topicId ?? "0";
    return message;
  },
};

function createBaseQueryLatestTopicInferencesResponse(): QueryLatestTopicInferencesResponse {
  return { inferences: undefined, blockHeight: "0" };
}

export const QueryLatestTopicInferencesResponse: MessageFns<QueryLatestTopicInferencesResponse> = {
  encode(message: QueryLatestTopicInferencesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.inferences !== undefined) {
      Inferences.encode(message.inferences, writer.uint32(10).fork()).join();
    }
    if (message.blockHeight !== "0") {
      writer.uint32(16).int64(message.blockHeight);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryLatestTopicInferencesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryLatestTopicInferencesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.inferences = Inferences.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.blockHeight = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryLatestTopicInferencesResponse {
    return {
      inferences: isSet(object.inferences) ? Inferences.fromJSON(object.inferences) : undefined,
      blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
    };
  },

  toJSON(message: QueryLatestTopicInferencesResponse): unknown {
    const obj: any = {};
    if (message.inferences !== undefined) {
      obj.inferences = Inferences.toJSON(message.inferences);
    }
    if (message.blockHeight !== "0") {
      obj.blockHeight = message.blockHeight;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryLatestTopicInferencesResponse>): QueryLatestTopicInferencesResponse {
    return QueryLatestTopicInferencesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryLatestTopicInferencesResponse>): QueryLatestTopicInferencesResponse {
    const message = createBaseQueryLatestTopicInferencesResponse();
    message.inferences = (object.inferences !== undefined && object.inferences !== null)
      ? Inferences.fromPartial(object.inferences)
      : undefined;
    message.blockHeight = object.blockHeight ?? "0";
    return message;
  },
};

function createBaseQueryForecastsAtBlockRequest(): QueryForecastsAtBlockRequest {
  return { topicId: "0", blockHeight: "0" };
}

export const QueryForecastsAtBlockRequest: MessageFns<QueryForecastsAtBlockRequest> = {
  encode(message: QueryForecastsAtBlockRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.topicId !== "0") {
      writer.uint32(8).uint64(message.topicId);
    }
    if (message.blockHeight !== "0") {
      writer.uint32(16).int64(message.blockHeight);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryForecastsAtBlockRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryForecastsAtBlockRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.blockHeight = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryForecastsAtBlockRequest {
    return {
      topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
      blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
    };
  },

  toJSON(message: QueryForecastsAtBlockRequest): unknown {
    const obj: any = {};
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    if (message.blockHeight !== "0") {
      obj.blockHeight = message.blockHeight;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryForecastsAtBlockRequest>): QueryForecastsAtBlockRequest {
    return QueryForecastsAtBlockRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryForecastsAtBlockRequest>): QueryForecastsAtBlockRequest {
    const message = createBaseQueryForecastsAtBlockRequest();
    message.topicId = object.topicId ?? "0";
    message.blockHeight = object.blockHeight ?? "0";
    return message;
  },
};

function createBaseQueryForecastsAtBlockResponse(): QueryForecastsAtBlockResponse {
  return { forecasts: undefined };
}

export const QueryForecastsAtBlockResponse: MessageFns<QueryForecastsAtBlockResponse> = {
  encode(message: QueryForecastsAtBlockResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.forecasts !== undefined) {
      Forecasts.encode(message.forecasts, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryForecastsAtBlockResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryForecastsAtBlockResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.forecasts = Forecasts.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryForecastsAtBlockResponse {
    return { forecasts: isSet(object.forecasts) ? Forecasts.fromJSON(object.forecasts) : undefined };
  },

  toJSON(message: QueryForecastsAtBlockResponse): unknown {
    const obj: any = {};
    if (message.forecasts !== undefined) {
      obj.forecasts = Forecasts.toJSON(message.forecasts);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryForecastsAtBlockResponse>): QueryForecastsAtBlockResponse {
    return QueryForecastsAtBlockResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryForecastsAtBlockResponse>): QueryForecastsAtBlockResponse {
    const message = createBaseQueryForecastsAtBlockResponse();
    message.forecasts = (object.forecasts !== undefined && object.forecasts !== null)
      ? Forecasts.fromPartial(object.forecasts)
      : undefined;
    return message;
  },
};

function createBaseQueryWorkerLatestInferenceRequest(): QueryWorkerLatestInferenceRequest {
  return { topicId: "0", workerAddress: "" };
}

export const QueryWorkerLatestInferenceRequest: MessageFns<QueryWorkerLatestInferenceRequest> = {
  encode(message: QueryWorkerLatestInferenceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.topicId !== "0") {
      writer.uint32(8).uint64(message.topicId);
    }
    if (message.workerAddress !== "") {
      writer.uint32(18).string(message.workerAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryWorkerLatestInferenceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryWorkerLatestInferenceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.workerAddress = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryWorkerLatestInferenceRequest {
    return {
      topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
      workerAddress: isSet(object.workerAddress) ? globalThis.String(object.workerAddress) : "",
    };
  },

  toJSON(message: QueryWorkerLatestInferenceRequest): unknown {
    const obj: any = {};
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    if (message.workerAddress !== "") {
      obj.workerAddress = message.workerAddress;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryWorkerLatestInferenceRequest>): QueryWorkerLatestInferenceRequest {
    return QueryWorkerLatestInferenceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryWorkerLatestInferenceRequest>): QueryWorkerLatestInferenceRequest {
    const message = createBaseQueryWorkerLatestInferenceRequest();
    message.topicId = object.topicId ?? "0";
    message.workerAddress = object.workerAddress ?? "";
    return message;
  },
};

function createBaseQueryWorkerLatestInferenceResponse(): QueryWorkerLatestInferenceResponse {
  return { latestInference: undefined };
}

export const QueryWorkerLatestInferenceResponse: MessageFns<QueryWorkerLatestInferenceResponse> = {
  encode(message: QueryWorkerLatestInferenceResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.latestInference !== undefined) {
      Inference.encode(message.latestInference, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryWorkerLatestInferenceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryWorkerLatestInferenceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.latestInference = Inference.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryWorkerLatestInferenceResponse {
    return { latestInference: isSet(object.latestInference) ? Inference.fromJSON(object.latestInference) : undefined };
  },

  toJSON(message: QueryWorkerLatestInferenceResponse): unknown {
    const obj: any = {};
    if (message.latestInference !== undefined) {
      obj.latestInference = Inference.toJSON(message.latestInference);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryWorkerLatestInferenceResponse>): QueryWorkerLatestInferenceResponse {
    return QueryWorkerLatestInferenceResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryWorkerLatestInferenceResponse>): QueryWorkerLatestInferenceResponse {
    const message = createBaseQueryWorkerLatestInferenceResponse();
    message.latestInference = (object.latestInference !== undefined && object.latestInference !== null)
      ? Inference.fromPartial(object.latestInference)
      : undefined;
    return message;
  },
};

function createBaseQueryWorkerNodeInfoRequest(): QueryWorkerNodeInfoRequest {
  return { address: "" };
}

export const QueryWorkerNodeInfoRequest: MessageFns<QueryWorkerNodeInfoRequest> = {
  encode(message: QueryWorkerNodeInfoRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(18).string(message.address);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryWorkerNodeInfoRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryWorkerNodeInfoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.address = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryWorkerNodeInfoRequest {
    return { address: isSet(object.address) ? globalThis.String(object.address) : "" };
  },

  toJSON(message: QueryWorkerNodeInfoRequest): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryWorkerNodeInfoRequest>): QueryWorkerNodeInfoRequest {
    return QueryWorkerNodeInfoRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryWorkerNodeInfoRequest>): QueryWorkerNodeInfoRequest {
    const message = createBaseQueryWorkerNodeInfoRequest();
    message.address = object.address ?? "";
    return message;
  },
};

function createBaseQueryWorkerNodeInfoResponse(): QueryWorkerNodeInfoResponse {
  return { nodeInfo: undefined };
}

export const QueryWorkerNodeInfoResponse: MessageFns<QueryWorkerNodeInfoResponse> = {
  encode(message: QueryWorkerNodeInfoResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.nodeInfo !== undefined) {
      OffchainNode.encode(message.nodeInfo, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryWorkerNodeInfoResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryWorkerNodeInfoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.nodeInfo = OffchainNode.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryWorkerNodeInfoResponse {
    return { nodeInfo: isSet(object.nodeInfo) ? OffchainNode.fromJSON(object.nodeInfo) : undefined };
  },

  toJSON(message: QueryWorkerNodeInfoResponse): unknown {
    const obj: any = {};
    if (message.nodeInfo !== undefined) {
      obj.nodeInfo = OffchainNode.toJSON(message.nodeInfo);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryWorkerNodeInfoResponse>): QueryWorkerNodeInfoResponse {
    return QueryWorkerNodeInfoResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryWorkerNodeInfoResponse>): QueryWorkerNodeInfoResponse {
    const message = createBaseQueryWorkerNodeInfoResponse();
    message.nodeInfo = (object.nodeInfo !== undefined && object.nodeInfo !== null)
      ? OffchainNode.fromPartial(object.nodeInfo)
      : undefined;
    return message;
  },
};

function createBaseQueryReputerNodeInfoRequest(): QueryReputerNodeInfoRequest {
  return { address: "" };
}

export const QueryReputerNodeInfoRequest: MessageFns<QueryReputerNodeInfoRequest> = {
  encode(message: QueryReputerNodeInfoRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(18).string(message.address);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryReputerNodeInfoRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryReputerNodeInfoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.address = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryReputerNodeInfoRequest {
    return { address: isSet(object.address) ? globalThis.String(object.address) : "" };
  },

  toJSON(message: QueryReputerNodeInfoRequest): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryReputerNodeInfoRequest>): QueryReputerNodeInfoRequest {
    return QueryReputerNodeInfoRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryReputerNodeInfoRequest>): QueryReputerNodeInfoRequest {
    const message = createBaseQueryReputerNodeInfoRequest();
    message.address = object.address ?? "";
    return message;
  },
};

function createBaseQueryReputerNodeInfoResponse(): QueryReputerNodeInfoResponse {
  return { nodeInfo: undefined };
}

export const QueryReputerNodeInfoResponse: MessageFns<QueryReputerNodeInfoResponse> = {
  encode(message: QueryReputerNodeInfoResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.nodeInfo !== undefined) {
      OffchainNode.encode(message.nodeInfo, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryReputerNodeInfoResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryReputerNodeInfoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.nodeInfo = OffchainNode.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryReputerNodeInfoResponse {
    return { nodeInfo: isSet(object.nodeInfo) ? OffchainNode.fromJSON(object.nodeInfo) : undefined };
  },

  toJSON(message: QueryReputerNodeInfoResponse): unknown {
    const obj: any = {};
    if (message.nodeInfo !== undefined) {
      obj.nodeInfo = OffchainNode.toJSON(message.nodeInfo);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryReputerNodeInfoResponse>): QueryReputerNodeInfoResponse {
    return QueryReputerNodeInfoResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryReputerNodeInfoResponse>): QueryReputerNodeInfoResponse {
    const message = createBaseQueryReputerNodeInfoResponse();
    message.nodeInfo = (object.nodeInfo !== undefined && object.nodeInfo !== null)
      ? OffchainNode.fromPartial(object.nodeInfo)
      : undefined;
    return message;
  },
};

function createBaseQueryNetworkInferencesAtBlockRequest(): QueryNetworkInferencesAtBlockRequest {
  return { topicId: "0", blockHeightLastInference: "0", blockHeightLastReward: "0" };
}

export const QueryNetworkInferencesAtBlockRequest: MessageFns<QueryNetworkInferencesAtBlockRequest> = {
  encode(message: QueryNetworkInferencesAtBlockRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.topicId !== "0") {
      writer.uint32(8).uint64(message.topicId);
    }
    if (message.blockHeightLastInference !== "0") {
      writer.uint32(16).int64(message.blockHeightLastInference);
    }
    if (message.blockHeightLastReward !== "0") {
      writer.uint32(24).int64(message.blockHeightLastReward);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryNetworkInferencesAtBlockRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryNetworkInferencesAtBlockRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.blockHeightLastInference = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.blockHeightLastReward = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryNetworkInferencesAtBlockRequest {
    return {
      topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
      blockHeightLastInference: isSet(object.blockHeightLastInference)
        ? globalThis.String(object.blockHeightLastInference)
        : "0",
      blockHeightLastReward: isSet(object.blockHeightLastReward)
        ? globalThis.String(object.blockHeightLastReward)
        : "0",
    };
  },

  toJSON(message: QueryNetworkInferencesAtBlockRequest): unknown {
    const obj: any = {};
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    if (message.blockHeightLastInference !== "0") {
      obj.blockHeightLastInference = message.blockHeightLastInference;
    }
    if (message.blockHeightLastReward !== "0") {
      obj.blockHeightLastReward = message.blockHeightLastReward;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryNetworkInferencesAtBlockRequest>): QueryNetworkInferencesAtBlockRequest {
    return QueryNetworkInferencesAtBlockRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryNetworkInferencesAtBlockRequest>): QueryNetworkInferencesAtBlockRequest {
    const message = createBaseQueryNetworkInferencesAtBlockRequest();
    message.topicId = object.topicId ?? "0";
    message.blockHeightLastInference = object.blockHeightLastInference ?? "0";
    message.blockHeightLastReward = object.blockHeightLastReward ?? "0";
    return message;
  },
};

function createBaseQueryLatestNetworkInferencesRequest(): QueryLatestNetworkInferencesRequest {
  return { topicId: "0" };
}

export const QueryLatestNetworkInferencesRequest: MessageFns<QueryLatestNetworkInferencesRequest> = {
  encode(message: QueryLatestNetworkInferencesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.topicId !== "0") {
      writer.uint32(8).uint64(message.topicId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryLatestNetworkInferencesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryLatestNetworkInferencesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryLatestNetworkInferencesRequest {
    return { topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0" };
  },

  toJSON(message: QueryLatestNetworkInferencesRequest): unknown {
    const obj: any = {};
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryLatestNetworkInferencesRequest>): QueryLatestNetworkInferencesRequest {
    return QueryLatestNetworkInferencesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryLatestNetworkInferencesRequest>): QueryLatestNetworkInferencesRequest {
    const message = createBaseQueryLatestNetworkInferencesRequest();
    message.topicId = object.topicId ?? "0";
    return message;
  },
};

function createBaseQueryIsWorkerNonceUnfulfilledRequest(): QueryIsWorkerNonceUnfulfilledRequest {
  return { topicId: "0", blockHeight: "0" };
}

export const QueryIsWorkerNonceUnfulfilledRequest: MessageFns<QueryIsWorkerNonceUnfulfilledRequest> = {
  encode(message: QueryIsWorkerNonceUnfulfilledRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.topicId !== "0") {
      writer.uint32(8).uint64(message.topicId);
    }
    if (message.blockHeight !== "0") {
      writer.uint32(16).int64(message.blockHeight);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryIsWorkerNonceUnfulfilledRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryIsWorkerNonceUnfulfilledRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.blockHeight = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryIsWorkerNonceUnfulfilledRequest {
    return {
      topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
      blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
    };
  },

  toJSON(message: QueryIsWorkerNonceUnfulfilledRequest): unknown {
    const obj: any = {};
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    if (message.blockHeight !== "0") {
      obj.blockHeight = message.blockHeight;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryIsWorkerNonceUnfulfilledRequest>): QueryIsWorkerNonceUnfulfilledRequest {
    return QueryIsWorkerNonceUnfulfilledRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryIsWorkerNonceUnfulfilledRequest>): QueryIsWorkerNonceUnfulfilledRequest {
    const message = createBaseQueryIsWorkerNonceUnfulfilledRequest();
    message.topicId = object.topicId ?? "0";
    message.blockHeight = object.blockHeight ?? "0";
    return message;
  },
};

function createBaseQueryIsWorkerNonceUnfulfilledResponse(): QueryIsWorkerNonceUnfulfilledResponse {
  return { isWorkerNonceUnfulfilled: false };
}

export const QueryIsWorkerNonceUnfulfilledResponse: MessageFns<QueryIsWorkerNonceUnfulfilledResponse> = {
  encode(message: QueryIsWorkerNonceUnfulfilledResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.isWorkerNonceUnfulfilled !== false) {
      writer.uint32(8).bool(message.isWorkerNonceUnfulfilled);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryIsWorkerNonceUnfulfilledResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryIsWorkerNonceUnfulfilledResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.isWorkerNonceUnfulfilled = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryIsWorkerNonceUnfulfilledResponse {
    return {
      isWorkerNonceUnfulfilled: isSet(object.isWorkerNonceUnfulfilled)
        ? globalThis.Boolean(object.isWorkerNonceUnfulfilled)
        : false,
    };
  },

  toJSON(message: QueryIsWorkerNonceUnfulfilledResponse): unknown {
    const obj: any = {};
    if (message.isWorkerNonceUnfulfilled !== false) {
      obj.isWorkerNonceUnfulfilled = message.isWorkerNonceUnfulfilled;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryIsWorkerNonceUnfulfilledResponse>): QueryIsWorkerNonceUnfulfilledResponse {
    return QueryIsWorkerNonceUnfulfilledResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryIsWorkerNonceUnfulfilledResponse>): QueryIsWorkerNonceUnfulfilledResponse {
    const message = createBaseQueryIsWorkerNonceUnfulfilledResponse();
    message.isWorkerNonceUnfulfilled = object.isWorkerNonceUnfulfilled ?? false;
    return message;
  },
};

function createBaseQueryUnfulfilledReputerNoncesRequest(): QueryUnfulfilledReputerNoncesRequest {
  return { topicId: "0" };
}

export const QueryUnfulfilledReputerNoncesRequest: MessageFns<QueryUnfulfilledReputerNoncesRequest> = {
  encode(message: QueryUnfulfilledReputerNoncesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.topicId !== "0") {
      writer.uint32(8).uint64(message.topicId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryUnfulfilledReputerNoncesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryUnfulfilledReputerNoncesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryUnfulfilledReputerNoncesRequest {
    return { topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0" };
  },

  toJSON(message: QueryUnfulfilledReputerNoncesRequest): unknown {
    const obj: any = {};
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryUnfulfilledReputerNoncesRequest>): QueryUnfulfilledReputerNoncesRequest {
    return QueryUnfulfilledReputerNoncesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryUnfulfilledReputerNoncesRequest>): QueryUnfulfilledReputerNoncesRequest {
    const message = createBaseQueryUnfulfilledReputerNoncesRequest();
    message.topicId = object.topicId ?? "0";
    return message;
  },
};

function createBaseQueryUnfulfilledReputerNoncesResponse(): QueryUnfulfilledReputerNoncesResponse {
  return { nonces: undefined };
}

export const QueryUnfulfilledReputerNoncesResponse: MessageFns<QueryUnfulfilledReputerNoncesResponse> = {
  encode(message: QueryUnfulfilledReputerNoncesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.nonces !== undefined) {
      ReputerRequestNonces.encode(message.nonces, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryUnfulfilledReputerNoncesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryUnfulfilledReputerNoncesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.nonces = ReputerRequestNonces.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryUnfulfilledReputerNoncesResponse {
    return { nonces: isSet(object.nonces) ? ReputerRequestNonces.fromJSON(object.nonces) : undefined };
  },

  toJSON(message: QueryUnfulfilledReputerNoncesResponse): unknown {
    const obj: any = {};
    if (message.nonces !== undefined) {
      obj.nonces = ReputerRequestNonces.toJSON(message.nonces);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryUnfulfilledReputerNoncesResponse>): QueryUnfulfilledReputerNoncesResponse {
    return QueryUnfulfilledReputerNoncesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryUnfulfilledReputerNoncesResponse>): QueryUnfulfilledReputerNoncesResponse {
    const message = createBaseQueryUnfulfilledReputerNoncesResponse();
    message.nonces = (object.nonces !== undefined && object.nonces !== null)
      ? ReputerRequestNonces.fromPartial(object.nonces)
      : undefined;
    return message;
  },
};

function createBaseQueryUnfulfilledWorkerNoncesRequest(): QueryUnfulfilledWorkerNoncesRequest {
  return { topicId: "0" };
}

export const QueryUnfulfilledWorkerNoncesRequest: MessageFns<QueryUnfulfilledWorkerNoncesRequest> = {
  encode(message: QueryUnfulfilledWorkerNoncesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.topicId !== "0") {
      writer.uint32(8).uint64(message.topicId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryUnfulfilledWorkerNoncesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryUnfulfilledWorkerNoncesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryUnfulfilledWorkerNoncesRequest {
    return { topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0" };
  },

  toJSON(message: QueryUnfulfilledWorkerNoncesRequest): unknown {
    const obj: any = {};
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryUnfulfilledWorkerNoncesRequest>): QueryUnfulfilledWorkerNoncesRequest {
    return QueryUnfulfilledWorkerNoncesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryUnfulfilledWorkerNoncesRequest>): QueryUnfulfilledWorkerNoncesRequest {
    const message = createBaseQueryUnfulfilledWorkerNoncesRequest();
    message.topicId = object.topicId ?? "0";
    return message;
  },
};

function createBaseQueryUnfulfilledWorkerNoncesResponse(): QueryUnfulfilledWorkerNoncesResponse {
  return { nonces: undefined };
}

export const QueryUnfulfilledWorkerNoncesResponse: MessageFns<QueryUnfulfilledWorkerNoncesResponse> = {
  encode(message: QueryUnfulfilledWorkerNoncesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.nonces !== undefined) {
      Nonces.encode(message.nonces, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryUnfulfilledWorkerNoncesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryUnfulfilledWorkerNoncesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.nonces = Nonces.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryUnfulfilledWorkerNoncesResponse {
    return { nonces: isSet(object.nonces) ? Nonces.fromJSON(object.nonces) : undefined };
  },

  toJSON(message: QueryUnfulfilledWorkerNoncesResponse): unknown {
    const obj: any = {};
    if (message.nonces !== undefined) {
      obj.nonces = Nonces.toJSON(message.nonces);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryUnfulfilledWorkerNoncesResponse>): QueryUnfulfilledWorkerNoncesResponse {
    return QueryUnfulfilledWorkerNoncesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryUnfulfilledWorkerNoncesResponse>): QueryUnfulfilledWorkerNoncesResponse {
    const message = createBaseQueryUnfulfilledWorkerNoncesResponse();
    message.nonces = (object.nonces !== undefined && object.nonces !== null)
      ? Nonces.fromPartial(object.nonces)
      : undefined;
    return message;
  },
};

function createBaseQueryInfererNetworkRegretRequest(): QueryInfererNetworkRegretRequest {
  return { topicId: "0", actorId: "" };
}

export const QueryInfererNetworkRegretRequest: MessageFns<QueryInfererNetworkRegretRequest> = {
  encode(message: QueryInfererNetworkRegretRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.topicId !== "0") {
      writer.uint32(8).uint64(message.topicId);
    }
    if (message.actorId !== "") {
      writer.uint32(18).string(message.actorId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryInfererNetworkRegretRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryInfererNetworkRegretRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.actorId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryInfererNetworkRegretRequest {
    return {
      topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
      actorId: isSet(object.actorId) ? globalThis.String(object.actorId) : "",
    };
  },

  toJSON(message: QueryInfererNetworkRegretRequest): unknown {
    const obj: any = {};
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    if (message.actorId !== "") {
      obj.actorId = message.actorId;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryInfererNetworkRegretRequest>): QueryInfererNetworkRegretRequest {
    return QueryInfererNetworkRegretRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryInfererNetworkRegretRequest>): QueryInfererNetworkRegretRequest {
    const message = createBaseQueryInfererNetworkRegretRequest();
    message.topicId = object.topicId ?? "0";
    message.actorId = object.actorId ?? "";
    return message;
  },
};

function createBaseQueryInfererNetworkRegretResponse(): QueryInfererNetworkRegretResponse {
  return { regret: undefined };
}

export const QueryInfererNetworkRegretResponse: MessageFns<QueryInfererNetworkRegretResponse> = {
  encode(message: QueryInfererNetworkRegretResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.regret !== undefined) {
      TimestampedValue.encode(message.regret, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryInfererNetworkRegretResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryInfererNetworkRegretResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.regret = TimestampedValue.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryInfererNetworkRegretResponse {
    return { regret: isSet(object.regret) ? TimestampedValue.fromJSON(object.regret) : undefined };
  },

  toJSON(message: QueryInfererNetworkRegretResponse): unknown {
    const obj: any = {};
    if (message.regret !== undefined) {
      obj.regret = TimestampedValue.toJSON(message.regret);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryInfererNetworkRegretResponse>): QueryInfererNetworkRegretResponse {
    return QueryInfererNetworkRegretResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryInfererNetworkRegretResponse>): QueryInfererNetworkRegretResponse {
    const message = createBaseQueryInfererNetworkRegretResponse();
    message.regret = (object.regret !== undefined && object.regret !== null)
      ? TimestampedValue.fromPartial(object.regret)
      : undefined;
    return message;
  },
};

function createBaseQueryForecasterNetworkRegretRequest(): QueryForecasterNetworkRegretRequest {
  return { topicId: "0", worker: "" };
}

export const QueryForecasterNetworkRegretRequest: MessageFns<QueryForecasterNetworkRegretRequest> = {
  encode(message: QueryForecasterNetworkRegretRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.topicId !== "0") {
      writer.uint32(8).uint64(message.topicId);
    }
    if (message.worker !== "") {
      writer.uint32(18).string(message.worker);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryForecasterNetworkRegretRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryForecasterNetworkRegretRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.worker = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryForecasterNetworkRegretRequest {
    return {
      topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
      worker: isSet(object.worker) ? globalThis.String(object.worker) : "",
    };
  },

  toJSON(message: QueryForecasterNetworkRegretRequest): unknown {
    const obj: any = {};
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    if (message.worker !== "") {
      obj.worker = message.worker;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryForecasterNetworkRegretRequest>): QueryForecasterNetworkRegretRequest {
    return QueryForecasterNetworkRegretRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryForecasterNetworkRegretRequest>): QueryForecasterNetworkRegretRequest {
    const message = createBaseQueryForecasterNetworkRegretRequest();
    message.topicId = object.topicId ?? "0";
    message.worker = object.worker ?? "";
    return message;
  },
};

function createBaseQueryForecasterNetworkRegretResponse(): QueryForecasterNetworkRegretResponse {
  return { regret: undefined };
}

export const QueryForecasterNetworkRegretResponse: MessageFns<QueryForecasterNetworkRegretResponse> = {
  encode(message: QueryForecasterNetworkRegretResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.regret !== undefined) {
      TimestampedValue.encode(message.regret, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryForecasterNetworkRegretResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryForecasterNetworkRegretResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.regret = TimestampedValue.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryForecasterNetworkRegretResponse {
    return { regret: isSet(object.regret) ? TimestampedValue.fromJSON(object.regret) : undefined };
  },

  toJSON(message: QueryForecasterNetworkRegretResponse): unknown {
    const obj: any = {};
    if (message.regret !== undefined) {
      obj.regret = TimestampedValue.toJSON(message.regret);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryForecasterNetworkRegretResponse>): QueryForecasterNetworkRegretResponse {
    return QueryForecasterNetworkRegretResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryForecasterNetworkRegretResponse>): QueryForecasterNetworkRegretResponse {
    const message = createBaseQueryForecasterNetworkRegretResponse();
    message.regret = (object.regret !== undefined && object.regret !== null)
      ? TimestampedValue.fromPartial(object.regret)
      : undefined;
    return message;
  },
};

function createBaseQueryOneInForecasterNetworkRegretRequest(): QueryOneInForecasterNetworkRegretRequest {
  return { topicId: "0", forecaster: "", inferer: "" };
}

export const QueryOneInForecasterNetworkRegretRequest: MessageFns<QueryOneInForecasterNetworkRegretRequest> = {
  encode(message: QueryOneInForecasterNetworkRegretRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.topicId !== "0") {
      writer.uint32(8).uint64(message.topicId);
    }
    if (message.forecaster !== "") {
      writer.uint32(18).string(message.forecaster);
    }
    if (message.inferer !== "") {
      writer.uint32(26).string(message.inferer);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryOneInForecasterNetworkRegretRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryOneInForecasterNetworkRegretRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.forecaster = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.inferer = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryOneInForecasterNetworkRegretRequest {
    return {
      topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
      forecaster: isSet(object.forecaster) ? globalThis.String(object.forecaster) : "",
      inferer: isSet(object.inferer) ? globalThis.String(object.inferer) : "",
    };
  },

  toJSON(message: QueryOneInForecasterNetworkRegretRequest): unknown {
    const obj: any = {};
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    if (message.forecaster !== "") {
      obj.forecaster = message.forecaster;
    }
    if (message.inferer !== "") {
      obj.inferer = message.inferer;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryOneInForecasterNetworkRegretRequest>): QueryOneInForecasterNetworkRegretRequest {
    return QueryOneInForecasterNetworkRegretRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryOneInForecasterNetworkRegretRequest>): QueryOneInForecasterNetworkRegretRequest {
    const message = createBaseQueryOneInForecasterNetworkRegretRequest();
    message.topicId = object.topicId ?? "0";
    message.forecaster = object.forecaster ?? "";
    message.inferer = object.inferer ?? "";
    return message;
  },
};

function createBaseQueryOneInForecasterNetworkRegretResponse(): QueryOneInForecasterNetworkRegretResponse {
  return { regret: undefined };
}

export const QueryOneInForecasterNetworkRegretResponse: MessageFns<QueryOneInForecasterNetworkRegretResponse> = {
  encode(message: QueryOneInForecasterNetworkRegretResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.regret !== undefined) {
      TimestampedValue.encode(message.regret, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryOneInForecasterNetworkRegretResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryOneInForecasterNetworkRegretResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.regret = TimestampedValue.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryOneInForecasterNetworkRegretResponse {
    return { regret: isSet(object.regret) ? TimestampedValue.fromJSON(object.regret) : undefined };
  },

  toJSON(message: QueryOneInForecasterNetworkRegretResponse): unknown {
    const obj: any = {};
    if (message.regret !== undefined) {
      obj.regret = TimestampedValue.toJSON(message.regret);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryOneInForecasterNetworkRegretResponse>): QueryOneInForecasterNetworkRegretResponse {
    return QueryOneInForecasterNetworkRegretResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<QueryOneInForecasterNetworkRegretResponse>,
  ): QueryOneInForecasterNetworkRegretResponse {
    const message = createBaseQueryOneInForecasterNetworkRegretResponse();
    message.regret = (object.regret !== undefined && object.regret !== null)
      ? TimestampedValue.fromPartial(object.regret)
      : undefined;
    return message;
  },
};

function createBaseQueryIsReputerNonceUnfulfilledRequest(): QueryIsReputerNonceUnfulfilledRequest {
  return { topicId: "0", blockHeight: "0" };
}

export const QueryIsReputerNonceUnfulfilledRequest: MessageFns<QueryIsReputerNonceUnfulfilledRequest> = {
  encode(message: QueryIsReputerNonceUnfulfilledRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.topicId !== "0") {
      writer.uint32(8).uint64(message.topicId);
    }
    if (message.blockHeight !== "0") {
      writer.uint32(16).int64(message.blockHeight);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryIsReputerNonceUnfulfilledRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryIsReputerNonceUnfulfilledRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.blockHeight = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryIsReputerNonceUnfulfilledRequest {
    return {
      topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
      blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
    };
  },

  toJSON(message: QueryIsReputerNonceUnfulfilledRequest): unknown {
    const obj: any = {};
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    if (message.blockHeight !== "0") {
      obj.blockHeight = message.blockHeight;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryIsReputerNonceUnfulfilledRequest>): QueryIsReputerNonceUnfulfilledRequest {
    return QueryIsReputerNonceUnfulfilledRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryIsReputerNonceUnfulfilledRequest>): QueryIsReputerNonceUnfulfilledRequest {
    const message = createBaseQueryIsReputerNonceUnfulfilledRequest();
    message.topicId = object.topicId ?? "0";
    message.blockHeight = object.blockHeight ?? "0";
    return message;
  },
};

function createBaseQueryIsReputerNonceUnfulfilledResponse(): QueryIsReputerNonceUnfulfilledResponse {
  return { isReputerNonceUnfulfilled: false };
}

export const QueryIsReputerNonceUnfulfilledResponse: MessageFns<QueryIsReputerNonceUnfulfilledResponse> = {
  encode(message: QueryIsReputerNonceUnfulfilledResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.isReputerNonceUnfulfilled !== false) {
      writer.uint32(8).bool(message.isReputerNonceUnfulfilled);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryIsReputerNonceUnfulfilledResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryIsReputerNonceUnfulfilledResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.isReputerNonceUnfulfilled = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryIsReputerNonceUnfulfilledResponse {
    return {
      isReputerNonceUnfulfilled: isSet(object.isReputerNonceUnfulfilled)
        ? globalThis.Boolean(object.isReputerNonceUnfulfilled)
        : false,
    };
  },

  toJSON(message: QueryIsReputerNonceUnfulfilledResponse): unknown {
    const obj: any = {};
    if (message.isReputerNonceUnfulfilled !== false) {
      obj.isReputerNonceUnfulfilled = message.isReputerNonceUnfulfilled;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryIsReputerNonceUnfulfilledResponse>): QueryIsReputerNonceUnfulfilledResponse {
    return QueryIsReputerNonceUnfulfilledResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryIsReputerNonceUnfulfilledResponse>): QueryIsReputerNonceUnfulfilledResponse {
    const message = createBaseQueryIsReputerNonceUnfulfilledResponse();
    message.isReputerNonceUnfulfilled = object.isReputerNonceUnfulfilled ?? false;
    return message;
  },
};

function createBaseQueryNetworkInferencesAtBlockResponse(): QueryNetworkInferencesAtBlockResponse {
  return { networkInferences: undefined };
}

export const QueryNetworkInferencesAtBlockResponse: MessageFns<QueryNetworkInferencesAtBlockResponse> = {
  encode(message: QueryNetworkInferencesAtBlockResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.networkInferences !== undefined) {
      ValueBundle.encode(message.networkInferences, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryNetworkInferencesAtBlockResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryNetworkInferencesAtBlockResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.networkInferences = ValueBundle.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryNetworkInferencesAtBlockResponse {
    return {
      networkInferences: isSet(object.networkInferences) ? ValueBundle.fromJSON(object.networkInferences) : undefined,
    };
  },

  toJSON(message: QueryNetworkInferencesAtBlockResponse): unknown {
    const obj: any = {};
    if (message.networkInferences !== undefined) {
      obj.networkInferences = ValueBundle.toJSON(message.networkInferences);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryNetworkInferencesAtBlockResponse>): QueryNetworkInferencesAtBlockResponse {
    return QueryNetworkInferencesAtBlockResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryNetworkInferencesAtBlockResponse>): QueryNetworkInferencesAtBlockResponse {
    const message = createBaseQueryNetworkInferencesAtBlockResponse();
    message.networkInferences = (object.networkInferences !== undefined && object.networkInferences !== null)
      ? ValueBundle.fromPartial(object.networkInferences)
      : undefined;
    return message;
  },
};

function createBaseQueryLatestNetworkInferencesResponse(): QueryLatestNetworkInferencesResponse {
  return {
    networkInferences: undefined,
    infererWeights: [],
    forecasterWeights: [],
    forecastImpliedInferences: [],
    inferenceBlockHeight: "0",
    lossBlockHeight: "0",
    confidenceIntervalRawPercentiles: [],
    confidenceIntervalValues: [],
  };
}

export const QueryLatestNetworkInferencesResponse: MessageFns<QueryLatestNetworkInferencesResponse> = {
  encode(message: QueryLatestNetworkInferencesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.networkInferences !== undefined) {
      ValueBundle.encode(message.networkInferences, writer.uint32(10).fork()).join();
    }
    for (const v of message.infererWeights) {
      RegretInformedWeight.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.forecasterWeights) {
      RegretInformedWeight.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.forecastImpliedInferences) {
      WorkerAttributedValue.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.inferenceBlockHeight !== "0") {
      writer.uint32(40).int64(message.inferenceBlockHeight);
    }
    if (message.lossBlockHeight !== "0") {
      writer.uint32(48).int64(message.lossBlockHeight);
    }
    for (const v of message.confidenceIntervalRawPercentiles) {
      writer.uint32(58).string(v!);
    }
    for (const v of message.confidenceIntervalValues) {
      writer.uint32(66).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryLatestNetworkInferencesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryLatestNetworkInferencesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.networkInferences = ValueBundle.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.infererWeights.push(RegretInformedWeight.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.forecasterWeights.push(RegretInformedWeight.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.forecastImpliedInferences.push(WorkerAttributedValue.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.inferenceBlockHeight = reader.int64().toString();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.lossBlockHeight = reader.int64().toString();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.confidenceIntervalRawPercentiles.push(reader.string());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.confidenceIntervalValues.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryLatestNetworkInferencesResponse {
    return {
      networkInferences: isSet(object.networkInferences) ? ValueBundle.fromJSON(object.networkInferences) : undefined,
      infererWeights: globalThis.Array.isArray(object?.infererWeights)
        ? object.infererWeights.map((e: any) => RegretInformedWeight.fromJSON(e))
        : [],
      forecasterWeights: globalThis.Array.isArray(object?.forecasterWeights)
        ? object.forecasterWeights.map((e: any) => RegretInformedWeight.fromJSON(e))
        : [],
      forecastImpliedInferences: globalThis.Array.isArray(object?.forecastImpliedInferences)
        ? object.forecastImpliedInferences.map((e: any) => WorkerAttributedValue.fromJSON(e))
        : [],
      inferenceBlockHeight: isSet(object.inferenceBlockHeight) ? globalThis.String(object.inferenceBlockHeight) : "0",
      lossBlockHeight: isSet(object.lossBlockHeight) ? globalThis.String(object.lossBlockHeight) : "0",
      confidenceIntervalRawPercentiles: globalThis.Array.isArray(object?.confidenceIntervalRawPercentiles)
        ? object.confidenceIntervalRawPercentiles.map((e: any) => globalThis.String(e))
        : [],
      confidenceIntervalValues: globalThis.Array.isArray(object?.confidenceIntervalValues)
        ? object.confidenceIntervalValues.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: QueryLatestNetworkInferencesResponse): unknown {
    const obj: any = {};
    if (message.networkInferences !== undefined) {
      obj.networkInferences = ValueBundle.toJSON(message.networkInferences);
    }
    if (message.infererWeights?.length) {
      obj.infererWeights = message.infererWeights.map((e) => RegretInformedWeight.toJSON(e));
    }
    if (message.forecasterWeights?.length) {
      obj.forecasterWeights = message.forecasterWeights.map((e) => RegretInformedWeight.toJSON(e));
    }
    if (message.forecastImpliedInferences?.length) {
      obj.forecastImpliedInferences = message.forecastImpliedInferences.map((e) => WorkerAttributedValue.toJSON(e));
    }
    if (message.inferenceBlockHeight !== "0") {
      obj.inferenceBlockHeight = message.inferenceBlockHeight;
    }
    if (message.lossBlockHeight !== "0") {
      obj.lossBlockHeight = message.lossBlockHeight;
    }
    if (message.confidenceIntervalRawPercentiles?.length) {
      obj.confidenceIntervalRawPercentiles = message.confidenceIntervalRawPercentiles;
    }
    if (message.confidenceIntervalValues?.length) {
      obj.confidenceIntervalValues = message.confidenceIntervalValues;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryLatestNetworkInferencesResponse>): QueryLatestNetworkInferencesResponse {
    return QueryLatestNetworkInferencesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryLatestNetworkInferencesResponse>): QueryLatestNetworkInferencesResponse {
    const message = createBaseQueryLatestNetworkInferencesResponse();
    message.networkInferences = (object.networkInferences !== undefined && object.networkInferences !== null)
      ? ValueBundle.fromPartial(object.networkInferences)
      : undefined;
    message.infererWeights = object.infererWeights?.map((e) => RegretInformedWeight.fromPartial(e)) || [];
    message.forecasterWeights = object.forecasterWeights?.map((e) => RegretInformedWeight.fromPartial(e)) || [];
    message.forecastImpliedInferences =
      object.forecastImpliedInferences?.map((e) => WorkerAttributedValue.fromPartial(e)) || [];
    message.inferenceBlockHeight = object.inferenceBlockHeight ?? "0";
    message.lossBlockHeight = object.lossBlockHeight ?? "0";
    message.confidenceIntervalRawPercentiles = object.confidenceIntervalRawPercentiles?.map((e) => e) || [];
    message.confidenceIntervalValues = object.confidenceIntervalValues?.map((e) => e) || [];
    return message;
  },
};

function createBaseQueryIsWorkerRegisteredInTopicIdRequest(): QueryIsWorkerRegisteredInTopicIdRequest {
  return { topicId: "0", address: "" };
}

export const QueryIsWorkerRegisteredInTopicIdRequest: MessageFns<QueryIsWorkerRegisteredInTopicIdRequest> = {
  encode(message: QueryIsWorkerRegisteredInTopicIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.topicId !== "0") {
      writer.uint32(8).uint64(message.topicId);
    }
    if (message.address !== "") {
      writer.uint32(18).string(message.address);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryIsWorkerRegisteredInTopicIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryIsWorkerRegisteredInTopicIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.address = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryIsWorkerRegisteredInTopicIdRequest {
    return {
      topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
      address: isSet(object.address) ? globalThis.String(object.address) : "",
    };
  },

  toJSON(message: QueryIsWorkerRegisteredInTopicIdRequest): unknown {
    const obj: any = {};
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    if (message.address !== "") {
      obj.address = message.address;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryIsWorkerRegisteredInTopicIdRequest>): QueryIsWorkerRegisteredInTopicIdRequest {
    return QueryIsWorkerRegisteredInTopicIdRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryIsWorkerRegisteredInTopicIdRequest>): QueryIsWorkerRegisteredInTopicIdRequest {
    const message = createBaseQueryIsWorkerRegisteredInTopicIdRequest();
    message.topicId = object.topicId ?? "0";
    message.address = object.address ?? "";
    return message;
  },
};

function createBaseQueryIsWorkerRegisteredInTopicIdResponse(): QueryIsWorkerRegisteredInTopicIdResponse {
  return { isRegistered: false };
}

export const QueryIsWorkerRegisteredInTopicIdResponse: MessageFns<QueryIsWorkerRegisteredInTopicIdResponse> = {
  encode(message: QueryIsWorkerRegisteredInTopicIdResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.isRegistered !== false) {
      writer.uint32(8).bool(message.isRegistered);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryIsWorkerRegisteredInTopicIdResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryIsWorkerRegisteredInTopicIdResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.isRegistered = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryIsWorkerRegisteredInTopicIdResponse {
    return { isRegistered: isSet(object.isRegistered) ? globalThis.Boolean(object.isRegistered) : false };
  },

  toJSON(message: QueryIsWorkerRegisteredInTopicIdResponse): unknown {
    const obj: any = {};
    if (message.isRegistered !== false) {
      obj.isRegistered = message.isRegistered;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryIsWorkerRegisteredInTopicIdResponse>): QueryIsWorkerRegisteredInTopicIdResponse {
    return QueryIsWorkerRegisteredInTopicIdResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryIsWorkerRegisteredInTopicIdResponse>): QueryIsWorkerRegisteredInTopicIdResponse {
    const message = createBaseQueryIsWorkerRegisteredInTopicIdResponse();
    message.isRegistered = object.isRegistered ?? false;
    return message;
  },
};

function createBaseQueryIsReputerRegisteredInTopicIdRequest(): QueryIsReputerRegisteredInTopicIdRequest {
  return { topicId: "0", address: "" };
}

export const QueryIsReputerRegisteredInTopicIdRequest: MessageFns<QueryIsReputerRegisteredInTopicIdRequest> = {
  encode(message: QueryIsReputerRegisteredInTopicIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.topicId !== "0") {
      writer.uint32(8).uint64(message.topicId);
    }
    if (message.address !== "") {
      writer.uint32(18).string(message.address);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryIsReputerRegisteredInTopicIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryIsReputerRegisteredInTopicIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.address = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryIsReputerRegisteredInTopicIdRequest {
    return {
      topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
      address: isSet(object.address) ? globalThis.String(object.address) : "",
    };
  },

  toJSON(message: QueryIsReputerRegisteredInTopicIdRequest): unknown {
    const obj: any = {};
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    if (message.address !== "") {
      obj.address = message.address;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryIsReputerRegisteredInTopicIdRequest>): QueryIsReputerRegisteredInTopicIdRequest {
    return QueryIsReputerRegisteredInTopicIdRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryIsReputerRegisteredInTopicIdRequest>): QueryIsReputerRegisteredInTopicIdRequest {
    const message = createBaseQueryIsReputerRegisteredInTopicIdRequest();
    message.topicId = object.topicId ?? "0";
    message.address = object.address ?? "";
    return message;
  },
};

function createBaseQueryIsReputerRegisteredInTopicIdResponse(): QueryIsReputerRegisteredInTopicIdResponse {
  return { isRegistered: false };
}

export const QueryIsReputerRegisteredInTopicIdResponse: MessageFns<QueryIsReputerRegisteredInTopicIdResponse> = {
  encode(message: QueryIsReputerRegisteredInTopicIdResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.isRegistered !== false) {
      writer.uint32(8).bool(message.isRegistered);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryIsReputerRegisteredInTopicIdResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryIsReputerRegisteredInTopicIdResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.isRegistered = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryIsReputerRegisteredInTopicIdResponse {
    return { isRegistered: isSet(object.isRegistered) ? globalThis.Boolean(object.isRegistered) : false };
  },

  toJSON(message: QueryIsReputerRegisteredInTopicIdResponse): unknown {
    const obj: any = {};
    if (message.isRegistered !== false) {
      obj.isRegistered = message.isRegistered;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryIsReputerRegisteredInTopicIdResponse>): QueryIsReputerRegisteredInTopicIdResponse {
    return QueryIsReputerRegisteredInTopicIdResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<QueryIsReputerRegisteredInTopicIdResponse>,
  ): QueryIsReputerRegisteredInTopicIdResponse {
    const message = createBaseQueryIsReputerRegisteredInTopicIdResponse();
    message.isRegistered = object.isRegistered ?? false;
    return message;
  },
};

function createBaseQueryIsWhitelistAdminRequest(): QueryIsWhitelistAdminRequest {
  return { address: "" };
}

export const QueryIsWhitelistAdminRequest: MessageFns<QueryIsWhitelistAdminRequest> = {
  encode(message: QueryIsWhitelistAdminRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryIsWhitelistAdminRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryIsWhitelistAdminRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryIsWhitelistAdminRequest {
    return { address: isSet(object.address) ? globalThis.String(object.address) : "" };
  },

  toJSON(message: QueryIsWhitelistAdminRequest): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryIsWhitelistAdminRequest>): QueryIsWhitelistAdminRequest {
    return QueryIsWhitelistAdminRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryIsWhitelistAdminRequest>): QueryIsWhitelistAdminRequest {
    const message = createBaseQueryIsWhitelistAdminRequest();
    message.address = object.address ?? "";
    return message;
  },
};

function createBaseQueryIsWhitelistAdminResponse(): QueryIsWhitelistAdminResponse {
  return { isAdmin: false };
}

export const QueryIsWhitelistAdminResponse: MessageFns<QueryIsWhitelistAdminResponse> = {
  encode(message: QueryIsWhitelistAdminResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.isAdmin !== false) {
      writer.uint32(8).bool(message.isAdmin);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryIsWhitelistAdminResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryIsWhitelistAdminResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.isAdmin = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryIsWhitelistAdminResponse {
    return { isAdmin: isSet(object.isAdmin) ? globalThis.Boolean(object.isAdmin) : false };
  },

  toJSON(message: QueryIsWhitelistAdminResponse): unknown {
    const obj: any = {};
    if (message.isAdmin !== false) {
      obj.isAdmin = message.isAdmin;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryIsWhitelistAdminResponse>): QueryIsWhitelistAdminResponse {
    return QueryIsWhitelistAdminResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryIsWhitelistAdminResponse>): QueryIsWhitelistAdminResponse {
    const message = createBaseQueryIsWhitelistAdminResponse();
    message.isAdmin = object.isAdmin ?? false;
    return message;
  },
};

function createBaseQueryStakeRemovalsUpUntilBlockRequest(): QueryStakeRemovalsUpUntilBlockRequest {
  return { blockHeight: "0" };
}

export const QueryStakeRemovalsUpUntilBlockRequest: MessageFns<QueryStakeRemovalsUpUntilBlockRequest> = {
  encode(message: QueryStakeRemovalsUpUntilBlockRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.blockHeight !== "0") {
      writer.uint32(8).int64(message.blockHeight);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryStakeRemovalsUpUntilBlockRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryStakeRemovalsUpUntilBlockRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.blockHeight = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryStakeRemovalsUpUntilBlockRequest {
    return { blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0" };
  },

  toJSON(message: QueryStakeRemovalsUpUntilBlockRequest): unknown {
    const obj: any = {};
    if (message.blockHeight !== "0") {
      obj.blockHeight = message.blockHeight;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryStakeRemovalsUpUntilBlockRequest>): QueryStakeRemovalsUpUntilBlockRequest {
    return QueryStakeRemovalsUpUntilBlockRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryStakeRemovalsUpUntilBlockRequest>): QueryStakeRemovalsUpUntilBlockRequest {
    const message = createBaseQueryStakeRemovalsUpUntilBlockRequest();
    message.blockHeight = object.blockHeight ?? "0";
    return message;
  },
};

function createBaseQueryStakeRemovalsUpUntilBlockResponse(): QueryStakeRemovalsUpUntilBlockResponse {
  return { removals: [] };
}

export const QueryStakeRemovalsUpUntilBlockResponse: MessageFns<QueryStakeRemovalsUpUntilBlockResponse> = {
  encode(message: QueryStakeRemovalsUpUntilBlockResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.removals) {
      StakeRemovalInfo.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryStakeRemovalsUpUntilBlockResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryStakeRemovalsUpUntilBlockResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.removals.push(StakeRemovalInfo.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryStakeRemovalsUpUntilBlockResponse {
    return {
      removals: globalThis.Array.isArray(object?.removals)
        ? object.removals.map((e: any) => StakeRemovalInfo.fromJSON(e))
        : [],
    };
  },

  toJSON(message: QueryStakeRemovalsUpUntilBlockResponse): unknown {
    const obj: any = {};
    if (message.removals?.length) {
      obj.removals = message.removals.map((e) => StakeRemovalInfo.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<QueryStakeRemovalsUpUntilBlockResponse>): QueryStakeRemovalsUpUntilBlockResponse {
    return QueryStakeRemovalsUpUntilBlockResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryStakeRemovalsUpUntilBlockResponse>): QueryStakeRemovalsUpUntilBlockResponse {
    const message = createBaseQueryStakeRemovalsUpUntilBlockResponse();
    message.removals = object.removals?.map((e) => StakeRemovalInfo.fromPartial(e)) || [];
    return message;
  },
};

function createBaseQueryDelegateStakeRemovalsUpUntilBlockRequest(): QueryDelegateStakeRemovalsUpUntilBlockRequest {
  return { blockHeight: "0" };
}

export const QueryDelegateStakeRemovalsUpUntilBlockRequest: MessageFns<QueryDelegateStakeRemovalsUpUntilBlockRequest> =
  {
    encode(
      message: QueryDelegateStakeRemovalsUpUntilBlockRequest,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.blockHeight !== "0") {
        writer.uint32(8).int64(message.blockHeight);
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): QueryDelegateStakeRemovalsUpUntilBlockRequest {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseQueryDelegateStakeRemovalsUpUntilBlockRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 8) {
              break;
            }

            message.blockHeight = reader.int64().toString();
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): QueryDelegateStakeRemovalsUpUntilBlockRequest {
      return { blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0" };
    },

    toJSON(message: QueryDelegateStakeRemovalsUpUntilBlockRequest): unknown {
      const obj: any = {};
      if (message.blockHeight !== "0") {
        obj.blockHeight = message.blockHeight;
      }
      return obj;
    },

    create(
      base?: DeepPartial<QueryDelegateStakeRemovalsUpUntilBlockRequest>,
    ): QueryDelegateStakeRemovalsUpUntilBlockRequest {
      return QueryDelegateStakeRemovalsUpUntilBlockRequest.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<QueryDelegateStakeRemovalsUpUntilBlockRequest>,
    ): QueryDelegateStakeRemovalsUpUntilBlockRequest {
      const message = createBaseQueryDelegateStakeRemovalsUpUntilBlockRequest();
      message.blockHeight = object.blockHeight ?? "0";
      return message;
    },
  };

function createBaseQueryDelegateStakeRemovalsUpUntilBlockResponse(): QueryDelegateStakeRemovalsUpUntilBlockResponse {
  return { removals: [] };
}

export const QueryDelegateStakeRemovalsUpUntilBlockResponse: MessageFns<
  QueryDelegateStakeRemovalsUpUntilBlockResponse
> = {
  encode(
    message: QueryDelegateStakeRemovalsUpUntilBlockResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.removals) {
      DelegateStakeRemovalInfo.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryDelegateStakeRemovalsUpUntilBlockResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDelegateStakeRemovalsUpUntilBlockResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.removals.push(DelegateStakeRemovalInfo.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDelegateStakeRemovalsUpUntilBlockResponse {
    return {
      removals: globalThis.Array.isArray(object?.removals)
        ? object.removals.map((e: any) => DelegateStakeRemovalInfo.fromJSON(e))
        : [],
    };
  },

  toJSON(message: QueryDelegateStakeRemovalsUpUntilBlockResponse): unknown {
    const obj: any = {};
    if (message.removals?.length) {
      obj.removals = message.removals.map((e) => DelegateStakeRemovalInfo.toJSON(e));
    }
    return obj;
  },

  create(
    base?: DeepPartial<QueryDelegateStakeRemovalsUpUntilBlockResponse>,
  ): QueryDelegateStakeRemovalsUpUntilBlockResponse {
    return QueryDelegateStakeRemovalsUpUntilBlockResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<QueryDelegateStakeRemovalsUpUntilBlockResponse>,
  ): QueryDelegateStakeRemovalsUpUntilBlockResponse {
    const message = createBaseQueryDelegateStakeRemovalsUpUntilBlockResponse();
    message.removals = object.removals?.map((e) => DelegateStakeRemovalInfo.fromPartial(e)) || [];
    return message;
  },
};

function createBaseQueryStakeRemovalInfoRequest(): QueryStakeRemovalInfoRequest {
  return { topicId: "0", reputer: "" };
}

export const QueryStakeRemovalInfoRequest: MessageFns<QueryStakeRemovalInfoRequest> = {
  encode(message: QueryStakeRemovalInfoRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.topicId !== "0") {
      writer.uint32(8).uint64(message.topicId);
    }
    if (message.reputer !== "") {
      writer.uint32(18).string(message.reputer);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryStakeRemovalInfoRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryStakeRemovalInfoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.reputer = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryStakeRemovalInfoRequest {
    return {
      topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
      reputer: isSet(object.reputer) ? globalThis.String(object.reputer) : "",
    };
  },

  toJSON(message: QueryStakeRemovalInfoRequest): unknown {
    const obj: any = {};
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    if (message.reputer !== "") {
      obj.reputer = message.reputer;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryStakeRemovalInfoRequest>): QueryStakeRemovalInfoRequest {
    return QueryStakeRemovalInfoRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryStakeRemovalInfoRequest>): QueryStakeRemovalInfoRequest {
    const message = createBaseQueryStakeRemovalInfoRequest();
    message.topicId = object.topicId ?? "0";
    message.reputer = object.reputer ?? "";
    return message;
  },
};

function createBaseQueryStakeRemovalInfoResponse(): QueryStakeRemovalInfoResponse {
  return { removal: undefined };
}

export const QueryStakeRemovalInfoResponse: MessageFns<QueryStakeRemovalInfoResponse> = {
  encode(message: QueryStakeRemovalInfoResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.removal !== undefined) {
      StakeRemovalInfo.encode(message.removal, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryStakeRemovalInfoResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryStakeRemovalInfoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.removal = StakeRemovalInfo.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryStakeRemovalInfoResponse {
    return { removal: isSet(object.removal) ? StakeRemovalInfo.fromJSON(object.removal) : undefined };
  },

  toJSON(message: QueryStakeRemovalInfoResponse): unknown {
    const obj: any = {};
    if (message.removal !== undefined) {
      obj.removal = StakeRemovalInfo.toJSON(message.removal);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryStakeRemovalInfoResponse>): QueryStakeRemovalInfoResponse {
    return QueryStakeRemovalInfoResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryStakeRemovalInfoResponse>): QueryStakeRemovalInfoResponse {
    const message = createBaseQueryStakeRemovalInfoResponse();
    message.removal = (object.removal !== undefined && object.removal !== null)
      ? StakeRemovalInfo.fromPartial(object.removal)
      : undefined;
    return message;
  },
};

function createBaseQueryDelegateStakeRemovalInfoRequest(): QueryDelegateStakeRemovalInfoRequest {
  return { topicId: "0", delegator: "", reputer: "" };
}

export const QueryDelegateStakeRemovalInfoRequest: MessageFns<QueryDelegateStakeRemovalInfoRequest> = {
  encode(message: QueryDelegateStakeRemovalInfoRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.topicId !== "0") {
      writer.uint32(8).uint64(message.topicId);
    }
    if (message.delegator !== "") {
      writer.uint32(18).string(message.delegator);
    }
    if (message.reputer !== "") {
      writer.uint32(26).string(message.reputer);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryDelegateStakeRemovalInfoRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDelegateStakeRemovalInfoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.delegator = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.reputer = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDelegateStakeRemovalInfoRequest {
    return {
      topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
      delegator: isSet(object.delegator) ? globalThis.String(object.delegator) : "",
      reputer: isSet(object.reputer) ? globalThis.String(object.reputer) : "",
    };
  },

  toJSON(message: QueryDelegateStakeRemovalInfoRequest): unknown {
    const obj: any = {};
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    if (message.delegator !== "") {
      obj.delegator = message.delegator;
    }
    if (message.reputer !== "") {
      obj.reputer = message.reputer;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryDelegateStakeRemovalInfoRequest>): QueryDelegateStakeRemovalInfoRequest {
    return QueryDelegateStakeRemovalInfoRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryDelegateStakeRemovalInfoRequest>): QueryDelegateStakeRemovalInfoRequest {
    const message = createBaseQueryDelegateStakeRemovalInfoRequest();
    message.topicId = object.topicId ?? "0";
    message.delegator = object.delegator ?? "";
    message.reputer = object.reputer ?? "";
    return message;
  },
};

function createBaseQueryDelegateStakeRemovalInfoResponse(): QueryDelegateStakeRemovalInfoResponse {
  return { removal: undefined };
}

export const QueryDelegateStakeRemovalInfoResponse: MessageFns<QueryDelegateStakeRemovalInfoResponse> = {
  encode(message: QueryDelegateStakeRemovalInfoResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.removal !== undefined) {
      DelegateStakeRemovalInfo.encode(message.removal, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryDelegateStakeRemovalInfoResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDelegateStakeRemovalInfoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.removal = DelegateStakeRemovalInfo.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDelegateStakeRemovalInfoResponse {
    return { removal: isSet(object.removal) ? DelegateStakeRemovalInfo.fromJSON(object.removal) : undefined };
  },

  toJSON(message: QueryDelegateStakeRemovalInfoResponse): unknown {
    const obj: any = {};
    if (message.removal !== undefined) {
      obj.removal = DelegateStakeRemovalInfo.toJSON(message.removal);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryDelegateStakeRemovalInfoResponse>): QueryDelegateStakeRemovalInfoResponse {
    return QueryDelegateStakeRemovalInfoResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryDelegateStakeRemovalInfoResponse>): QueryDelegateStakeRemovalInfoResponse {
    const message = createBaseQueryDelegateStakeRemovalInfoResponse();
    message.removal = (object.removal !== undefined && object.removal !== null)
      ? DelegateStakeRemovalInfo.fromPartial(object.removal)
      : undefined;
    return message;
  },
};

function createBaseQueryTopicLastCommitRequest(): QueryTopicLastCommitRequest {
  return { topicId: "0" };
}

export const QueryTopicLastCommitRequest: MessageFns<QueryTopicLastCommitRequest> = {
  encode(message: QueryTopicLastCommitRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.topicId !== "0") {
      writer.uint32(8).uint64(message.topicId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryTopicLastCommitRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryTopicLastCommitRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryTopicLastCommitRequest {
    return { topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0" };
  },

  toJSON(message: QueryTopicLastCommitRequest): unknown {
    const obj: any = {};
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryTopicLastCommitRequest>): QueryTopicLastCommitRequest {
    return QueryTopicLastCommitRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryTopicLastCommitRequest>): QueryTopicLastCommitRequest {
    const message = createBaseQueryTopicLastCommitRequest();
    message.topicId = object.topicId ?? "0";
    return message;
  },
};

function createBaseQueryTopicLastCommitResponse(): QueryTopicLastCommitResponse {
  return { lastCommit: undefined };
}

export const QueryTopicLastCommitResponse: MessageFns<QueryTopicLastCommitResponse> = {
  encode(message: QueryTopicLastCommitResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.lastCommit !== undefined) {
      TimestampedActorNonce.encode(message.lastCommit, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryTopicLastCommitResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryTopicLastCommitResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.lastCommit = TimestampedActorNonce.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryTopicLastCommitResponse {
    return { lastCommit: isSet(object.lastCommit) ? TimestampedActorNonce.fromJSON(object.lastCommit) : undefined };
  },

  toJSON(message: QueryTopicLastCommitResponse): unknown {
    const obj: any = {};
    if (message.lastCommit !== undefined) {
      obj.lastCommit = TimestampedActorNonce.toJSON(message.lastCommit);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryTopicLastCommitResponse>): QueryTopicLastCommitResponse {
    return QueryTopicLastCommitResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryTopicLastCommitResponse>): QueryTopicLastCommitResponse {
    const message = createBaseQueryTopicLastCommitResponse();
    message.lastCommit = (object.lastCommit !== undefined && object.lastCommit !== null)
      ? TimestampedActorNonce.fromPartial(object.lastCommit)
      : undefined;
    return message;
  },
};

function createBaseQueryTopicRewardNonceRequest(): QueryTopicRewardNonceRequest {
  return { topicId: "0" };
}

export const QueryTopicRewardNonceRequest: MessageFns<QueryTopicRewardNonceRequest> = {
  encode(message: QueryTopicRewardNonceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.topicId !== "0") {
      writer.uint32(8).uint64(message.topicId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryTopicRewardNonceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryTopicRewardNonceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryTopicRewardNonceRequest {
    return { topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0" };
  },

  toJSON(message: QueryTopicRewardNonceRequest): unknown {
    const obj: any = {};
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryTopicRewardNonceRequest>): QueryTopicRewardNonceRequest {
    return QueryTopicRewardNonceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryTopicRewardNonceRequest>): QueryTopicRewardNonceRequest {
    const message = createBaseQueryTopicRewardNonceRequest();
    message.topicId = object.topicId ?? "0";
    return message;
  },
};

function createBaseQueryTopicRewardNonceResponse(): QueryTopicRewardNonceResponse {
  return { nonce: "0" };
}

export const QueryTopicRewardNonceResponse: MessageFns<QueryTopicRewardNonceResponse> = {
  encode(message: QueryTopicRewardNonceResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.nonce !== "0") {
      writer.uint32(8).int64(message.nonce);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryTopicRewardNonceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryTopicRewardNonceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.nonce = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryTopicRewardNonceResponse {
    return { nonce: isSet(object.nonce) ? globalThis.String(object.nonce) : "0" };
  },

  toJSON(message: QueryTopicRewardNonceResponse): unknown {
    const obj: any = {};
    if (message.nonce !== "0") {
      obj.nonce = message.nonce;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryTopicRewardNonceResponse>): QueryTopicRewardNonceResponse {
    return QueryTopicRewardNonceResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryTopicRewardNonceResponse>): QueryTopicRewardNonceResponse {
    const message = createBaseQueryTopicRewardNonceResponse();
    message.nonce = object.nonce ?? "0";
    return message;
  },
};

function createBaseQueryReputerLossBundlesAtBlockRequest(): QueryReputerLossBundlesAtBlockRequest {
  return { topicId: "0", blockHeight: "0" };
}

export const QueryReputerLossBundlesAtBlockRequest: MessageFns<QueryReputerLossBundlesAtBlockRequest> = {
  encode(message: QueryReputerLossBundlesAtBlockRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.topicId !== "0") {
      writer.uint32(8).uint64(message.topicId);
    }
    if (message.blockHeight !== "0") {
      writer.uint32(16).int64(message.blockHeight);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryReputerLossBundlesAtBlockRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryReputerLossBundlesAtBlockRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.blockHeight = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryReputerLossBundlesAtBlockRequest {
    return {
      topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
      blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
    };
  },

  toJSON(message: QueryReputerLossBundlesAtBlockRequest): unknown {
    const obj: any = {};
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    if (message.blockHeight !== "0") {
      obj.blockHeight = message.blockHeight;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryReputerLossBundlesAtBlockRequest>): QueryReputerLossBundlesAtBlockRequest {
    return QueryReputerLossBundlesAtBlockRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryReputerLossBundlesAtBlockRequest>): QueryReputerLossBundlesAtBlockRequest {
    const message = createBaseQueryReputerLossBundlesAtBlockRequest();
    message.topicId = object.topicId ?? "0";
    message.blockHeight = object.blockHeight ?? "0";
    return message;
  },
};

function createBaseQueryReputerLossBundlesAtBlockResponse(): QueryReputerLossBundlesAtBlockResponse {
  return { lossBundles: undefined };
}

export const QueryReputerLossBundlesAtBlockResponse: MessageFns<QueryReputerLossBundlesAtBlockResponse> = {
  encode(message: QueryReputerLossBundlesAtBlockResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.lossBundles !== undefined) {
      ReputerValueBundles.encode(message.lossBundles, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryReputerLossBundlesAtBlockResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryReputerLossBundlesAtBlockResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.lossBundles = ReputerValueBundles.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryReputerLossBundlesAtBlockResponse {
    return { lossBundles: isSet(object.lossBundles) ? ReputerValueBundles.fromJSON(object.lossBundles) : undefined };
  },

  toJSON(message: QueryReputerLossBundlesAtBlockResponse): unknown {
    const obj: any = {};
    if (message.lossBundles !== undefined) {
      obj.lossBundles = ReputerValueBundles.toJSON(message.lossBundles);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryReputerLossBundlesAtBlockResponse>): QueryReputerLossBundlesAtBlockResponse {
    return QueryReputerLossBundlesAtBlockResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryReputerLossBundlesAtBlockResponse>): QueryReputerLossBundlesAtBlockResponse {
    const message = createBaseQueryReputerLossBundlesAtBlockResponse();
    message.lossBundles = (object.lossBundles !== undefined && object.lossBundles !== null)
      ? ReputerValueBundles.fromPartial(object.lossBundles)
      : undefined;
    return message;
  },
};

function createBaseQueryStakeReputerAuthorityRequest(): QueryStakeReputerAuthorityRequest {
  return { topicId: "0", reputer: "" };
}

export const QueryStakeReputerAuthorityRequest: MessageFns<QueryStakeReputerAuthorityRequest> = {
  encode(message: QueryStakeReputerAuthorityRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.topicId !== "0") {
      writer.uint32(8).uint64(message.topicId);
    }
    if (message.reputer !== "") {
      writer.uint32(18).string(message.reputer);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryStakeReputerAuthorityRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryStakeReputerAuthorityRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.reputer = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryStakeReputerAuthorityRequest {
    return {
      topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
      reputer: isSet(object.reputer) ? globalThis.String(object.reputer) : "",
    };
  },

  toJSON(message: QueryStakeReputerAuthorityRequest): unknown {
    const obj: any = {};
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    if (message.reputer !== "") {
      obj.reputer = message.reputer;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryStakeReputerAuthorityRequest>): QueryStakeReputerAuthorityRequest {
    return QueryStakeReputerAuthorityRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryStakeReputerAuthorityRequest>): QueryStakeReputerAuthorityRequest {
    const message = createBaseQueryStakeReputerAuthorityRequest();
    message.topicId = object.topicId ?? "0";
    message.reputer = object.reputer ?? "";
    return message;
  },
};

function createBaseQueryStakeReputerAuthorityResponse(): QueryStakeReputerAuthorityResponse {
  return { authority: "" };
}

export const QueryStakeReputerAuthorityResponse: MessageFns<QueryStakeReputerAuthorityResponse> = {
  encode(message: QueryStakeReputerAuthorityResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryStakeReputerAuthorityResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryStakeReputerAuthorityResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryStakeReputerAuthorityResponse {
    return { authority: isSet(object.authority) ? globalThis.String(object.authority) : "" };
  },

  toJSON(message: QueryStakeReputerAuthorityResponse): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryStakeReputerAuthorityResponse>): QueryStakeReputerAuthorityResponse {
    return QueryStakeReputerAuthorityResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryStakeReputerAuthorityResponse>): QueryStakeReputerAuthorityResponse {
    const message = createBaseQueryStakeReputerAuthorityResponse();
    message.authority = object.authority ?? "";
    return message;
  },
};

function createBaseQueryDelegateStakePlacementRequest(): QueryDelegateStakePlacementRequest {
  return { topicId: "0", delegator: "", target: "" };
}

export const QueryDelegateStakePlacementRequest: MessageFns<QueryDelegateStakePlacementRequest> = {
  encode(message: QueryDelegateStakePlacementRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.topicId !== "0") {
      writer.uint32(8).uint64(message.topicId);
    }
    if (message.delegator !== "") {
      writer.uint32(18).string(message.delegator);
    }
    if (message.target !== "") {
      writer.uint32(26).string(message.target);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryDelegateStakePlacementRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDelegateStakePlacementRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.delegator = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.target = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDelegateStakePlacementRequest {
    return {
      topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
      delegator: isSet(object.delegator) ? globalThis.String(object.delegator) : "",
      target: isSet(object.target) ? globalThis.String(object.target) : "",
    };
  },

  toJSON(message: QueryDelegateStakePlacementRequest): unknown {
    const obj: any = {};
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    if (message.delegator !== "") {
      obj.delegator = message.delegator;
    }
    if (message.target !== "") {
      obj.target = message.target;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryDelegateStakePlacementRequest>): QueryDelegateStakePlacementRequest {
    return QueryDelegateStakePlacementRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryDelegateStakePlacementRequest>): QueryDelegateStakePlacementRequest {
    const message = createBaseQueryDelegateStakePlacementRequest();
    message.topicId = object.topicId ?? "0";
    message.delegator = object.delegator ?? "";
    message.target = object.target ?? "";
    return message;
  },
};

function createBaseQueryDelegateStakePlacementResponse(): QueryDelegateStakePlacementResponse {
  return { delegatorInfo: undefined };
}

export const QueryDelegateStakePlacementResponse: MessageFns<QueryDelegateStakePlacementResponse> = {
  encode(message: QueryDelegateStakePlacementResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.delegatorInfo !== undefined) {
      DelegatorInfo.encode(message.delegatorInfo, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryDelegateStakePlacementResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDelegateStakePlacementResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.delegatorInfo = DelegatorInfo.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDelegateStakePlacementResponse {
    return { delegatorInfo: isSet(object.delegatorInfo) ? DelegatorInfo.fromJSON(object.delegatorInfo) : undefined };
  },

  toJSON(message: QueryDelegateStakePlacementResponse): unknown {
    const obj: any = {};
    if (message.delegatorInfo !== undefined) {
      obj.delegatorInfo = DelegatorInfo.toJSON(message.delegatorInfo);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryDelegateStakePlacementResponse>): QueryDelegateStakePlacementResponse {
    return QueryDelegateStakePlacementResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryDelegateStakePlacementResponse>): QueryDelegateStakePlacementResponse {
    const message = createBaseQueryDelegateStakePlacementResponse();
    message.delegatorInfo = (object.delegatorInfo !== undefined && object.delegatorInfo !== null)
      ? DelegatorInfo.fromPartial(object.delegatorInfo)
      : undefined;
    return message;
  },
};

function createBaseQueryDelegateStakeUponReputerRequest(): QueryDelegateStakeUponReputerRequest {
  return { topicId: "0", target: "" };
}

export const QueryDelegateStakeUponReputerRequest: MessageFns<QueryDelegateStakeUponReputerRequest> = {
  encode(message: QueryDelegateStakeUponReputerRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.topicId !== "0") {
      writer.uint32(8).uint64(message.topicId);
    }
    if (message.target !== "") {
      writer.uint32(18).string(message.target);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryDelegateStakeUponReputerRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDelegateStakeUponReputerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.target = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDelegateStakeUponReputerRequest {
    return {
      topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
      target: isSet(object.target) ? globalThis.String(object.target) : "",
    };
  },

  toJSON(message: QueryDelegateStakeUponReputerRequest): unknown {
    const obj: any = {};
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    if (message.target !== "") {
      obj.target = message.target;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryDelegateStakeUponReputerRequest>): QueryDelegateStakeUponReputerRequest {
    return QueryDelegateStakeUponReputerRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryDelegateStakeUponReputerRequest>): QueryDelegateStakeUponReputerRequest {
    const message = createBaseQueryDelegateStakeUponReputerRequest();
    message.topicId = object.topicId ?? "0";
    message.target = object.target ?? "";
    return message;
  },
};

function createBaseQueryDelegateStakeUponReputerResponse(): QueryDelegateStakeUponReputerResponse {
  return { stake: "" };
}

export const QueryDelegateStakeUponReputerResponse: MessageFns<QueryDelegateStakeUponReputerResponse> = {
  encode(message: QueryDelegateStakeUponReputerResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.stake !== "") {
      writer.uint32(10).string(message.stake);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryDelegateStakeUponReputerResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDelegateStakeUponReputerResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.stake = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDelegateStakeUponReputerResponse {
    return { stake: isSet(object.stake) ? globalThis.String(object.stake) : "" };
  },

  toJSON(message: QueryDelegateStakeUponReputerResponse): unknown {
    const obj: any = {};
    if (message.stake !== "") {
      obj.stake = message.stake;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryDelegateStakeUponReputerResponse>): QueryDelegateStakeUponReputerResponse {
    return QueryDelegateStakeUponReputerResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryDelegateStakeUponReputerResponse>): QueryDelegateStakeUponReputerResponse {
    const message = createBaseQueryDelegateStakeUponReputerResponse();
    message.stake = object.stake ?? "";
    return message;
  },
};

function createBaseQueryDelegateRewardPerShareRequest(): QueryDelegateRewardPerShareRequest {
  return { topicId: "0", reputer: "" };
}

export const QueryDelegateRewardPerShareRequest: MessageFns<QueryDelegateRewardPerShareRequest> = {
  encode(message: QueryDelegateRewardPerShareRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.topicId !== "0") {
      writer.uint32(8).uint64(message.topicId);
    }
    if (message.reputer !== "") {
      writer.uint32(18).string(message.reputer);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryDelegateRewardPerShareRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDelegateRewardPerShareRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.reputer = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDelegateRewardPerShareRequest {
    return {
      topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
      reputer: isSet(object.reputer) ? globalThis.String(object.reputer) : "",
    };
  },

  toJSON(message: QueryDelegateRewardPerShareRequest): unknown {
    const obj: any = {};
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    if (message.reputer !== "") {
      obj.reputer = message.reputer;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryDelegateRewardPerShareRequest>): QueryDelegateRewardPerShareRequest {
    return QueryDelegateRewardPerShareRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryDelegateRewardPerShareRequest>): QueryDelegateRewardPerShareRequest {
    const message = createBaseQueryDelegateRewardPerShareRequest();
    message.topicId = object.topicId ?? "0";
    message.reputer = object.reputer ?? "";
    return message;
  },
};

function createBaseQueryDelegateRewardPerShareResponse(): QueryDelegateRewardPerShareResponse {
  return { rewardPerShare: "" };
}

export const QueryDelegateRewardPerShareResponse: MessageFns<QueryDelegateRewardPerShareResponse> = {
  encode(message: QueryDelegateRewardPerShareResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.rewardPerShare !== "") {
      writer.uint32(10).string(message.rewardPerShare);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryDelegateRewardPerShareResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDelegateRewardPerShareResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.rewardPerShare = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDelegateRewardPerShareResponse {
    return { rewardPerShare: isSet(object.rewardPerShare) ? globalThis.String(object.rewardPerShare) : "" };
  },

  toJSON(message: QueryDelegateRewardPerShareResponse): unknown {
    const obj: any = {};
    if (message.rewardPerShare !== "") {
      obj.rewardPerShare = message.rewardPerShare;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryDelegateRewardPerShareResponse>): QueryDelegateRewardPerShareResponse {
    return QueryDelegateRewardPerShareResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryDelegateRewardPerShareResponse>): QueryDelegateRewardPerShareResponse {
    const message = createBaseQueryDelegateRewardPerShareResponse();
    message.rewardPerShare = object.rewardPerShare ?? "";
    return message;
  },
};

function createBaseQueryStakeRemovalForReputerAndTopicIdRequest(): QueryStakeRemovalForReputerAndTopicIdRequest {
  return { reputer: "", topicId: "0" };
}

export const QueryStakeRemovalForReputerAndTopicIdRequest: MessageFns<QueryStakeRemovalForReputerAndTopicIdRequest> = {
  encode(
    message: QueryStakeRemovalForReputerAndTopicIdRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.reputer !== "") {
      writer.uint32(10).string(message.reputer);
    }
    if (message.topicId !== "0") {
      writer.uint32(16).uint64(message.topicId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryStakeRemovalForReputerAndTopicIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryStakeRemovalForReputerAndTopicIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.reputer = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryStakeRemovalForReputerAndTopicIdRequest {
    return {
      reputer: isSet(object.reputer) ? globalThis.String(object.reputer) : "",
      topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
    };
  },

  toJSON(message: QueryStakeRemovalForReputerAndTopicIdRequest): unknown {
    const obj: any = {};
    if (message.reputer !== "") {
      obj.reputer = message.reputer;
    }
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    return obj;
  },

  create(
    base?: DeepPartial<QueryStakeRemovalForReputerAndTopicIdRequest>,
  ): QueryStakeRemovalForReputerAndTopicIdRequest {
    return QueryStakeRemovalForReputerAndTopicIdRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<QueryStakeRemovalForReputerAndTopicIdRequest>,
  ): QueryStakeRemovalForReputerAndTopicIdRequest {
    const message = createBaseQueryStakeRemovalForReputerAndTopicIdRequest();
    message.reputer = object.reputer ?? "";
    message.topicId = object.topicId ?? "0";
    return message;
  },
};

function createBaseQueryStakeRemovalForReputerAndTopicIdResponse(): QueryStakeRemovalForReputerAndTopicIdResponse {
  return { stakeRemovalInfo: undefined };
}

export const QueryStakeRemovalForReputerAndTopicIdResponse: MessageFns<QueryStakeRemovalForReputerAndTopicIdResponse> =
  {
    encode(
      message: QueryStakeRemovalForReputerAndTopicIdResponse,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.stakeRemovalInfo !== undefined) {
        StakeRemovalInfo.encode(message.stakeRemovalInfo, writer.uint32(10).fork()).join();
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): QueryStakeRemovalForReputerAndTopicIdResponse {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseQueryStakeRemovalForReputerAndTopicIdResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 10) {
              break;
            }

            message.stakeRemovalInfo = StakeRemovalInfo.decode(reader, reader.uint32());
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): QueryStakeRemovalForReputerAndTopicIdResponse {
      return {
        stakeRemovalInfo: isSet(object.stakeRemovalInfo)
          ? StakeRemovalInfo.fromJSON(object.stakeRemovalInfo)
          : undefined,
      };
    },

    toJSON(message: QueryStakeRemovalForReputerAndTopicIdResponse): unknown {
      const obj: any = {};
      if (message.stakeRemovalInfo !== undefined) {
        obj.stakeRemovalInfo = StakeRemovalInfo.toJSON(message.stakeRemovalInfo);
      }
      return obj;
    },

    create(
      base?: DeepPartial<QueryStakeRemovalForReputerAndTopicIdResponse>,
    ): QueryStakeRemovalForReputerAndTopicIdResponse {
      return QueryStakeRemovalForReputerAndTopicIdResponse.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<QueryStakeRemovalForReputerAndTopicIdResponse>,
    ): QueryStakeRemovalForReputerAndTopicIdResponse {
      const message = createBaseQueryStakeRemovalForReputerAndTopicIdResponse();
      message.stakeRemovalInfo = (object.stakeRemovalInfo !== undefined && object.stakeRemovalInfo !== null)
        ? StakeRemovalInfo.fromPartial(object.stakeRemovalInfo)
        : undefined;
      return message;
    },
  };

function createBaseQueryDelegateStakeRemovalRequest(): QueryDelegateStakeRemovalRequest {
  return { blockHeight: "0", topicId: "0", delegator: "", reputer: "" };
}

export const QueryDelegateStakeRemovalRequest: MessageFns<QueryDelegateStakeRemovalRequest> = {
  encode(message: QueryDelegateStakeRemovalRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.blockHeight !== "0") {
      writer.uint32(8).int64(message.blockHeight);
    }
    if (message.topicId !== "0") {
      writer.uint32(16).uint64(message.topicId);
    }
    if (message.delegator !== "") {
      writer.uint32(26).string(message.delegator);
    }
    if (message.reputer !== "") {
      writer.uint32(34).string(message.reputer);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryDelegateStakeRemovalRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDelegateStakeRemovalRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.blockHeight = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.delegator = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.reputer = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDelegateStakeRemovalRequest {
    return {
      blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
      topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
      delegator: isSet(object.delegator) ? globalThis.String(object.delegator) : "",
      reputer: isSet(object.reputer) ? globalThis.String(object.reputer) : "",
    };
  },

  toJSON(message: QueryDelegateStakeRemovalRequest): unknown {
    const obj: any = {};
    if (message.blockHeight !== "0") {
      obj.blockHeight = message.blockHeight;
    }
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    if (message.delegator !== "") {
      obj.delegator = message.delegator;
    }
    if (message.reputer !== "") {
      obj.reputer = message.reputer;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryDelegateStakeRemovalRequest>): QueryDelegateStakeRemovalRequest {
    return QueryDelegateStakeRemovalRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryDelegateStakeRemovalRequest>): QueryDelegateStakeRemovalRequest {
    const message = createBaseQueryDelegateStakeRemovalRequest();
    message.blockHeight = object.blockHeight ?? "0";
    message.topicId = object.topicId ?? "0";
    message.delegator = object.delegator ?? "";
    message.reputer = object.reputer ?? "";
    return message;
  },
};

function createBaseQueryDelegateStakeRemovalResponse(): QueryDelegateStakeRemovalResponse {
  return { stakeRemovalInfo: undefined };
}

export const QueryDelegateStakeRemovalResponse: MessageFns<QueryDelegateStakeRemovalResponse> = {
  encode(message: QueryDelegateStakeRemovalResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.stakeRemovalInfo !== undefined) {
      DelegateStakeRemovalInfo.encode(message.stakeRemovalInfo, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryDelegateStakeRemovalResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDelegateStakeRemovalResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.stakeRemovalInfo = DelegateStakeRemovalInfo.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDelegateStakeRemovalResponse {
    return {
      stakeRemovalInfo: isSet(object.stakeRemovalInfo)
        ? DelegateStakeRemovalInfo.fromJSON(object.stakeRemovalInfo)
        : undefined,
    };
  },

  toJSON(message: QueryDelegateStakeRemovalResponse): unknown {
    const obj: any = {};
    if (message.stakeRemovalInfo !== undefined) {
      obj.stakeRemovalInfo = DelegateStakeRemovalInfo.toJSON(message.stakeRemovalInfo);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryDelegateStakeRemovalResponse>): QueryDelegateStakeRemovalResponse {
    return QueryDelegateStakeRemovalResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryDelegateStakeRemovalResponse>): QueryDelegateStakeRemovalResponse {
    const message = createBaseQueryDelegateStakeRemovalResponse();
    message.stakeRemovalInfo = (object.stakeRemovalInfo !== undefined && object.stakeRemovalInfo !== null)
      ? DelegateStakeRemovalInfo.fromPartial(object.stakeRemovalInfo)
      : undefined;
    return message;
  },
};

function createBaseQueryPreviousTopicWeightRequest(): QueryPreviousTopicWeightRequest {
  return { topicId: "0" };
}

export const QueryPreviousTopicWeightRequest: MessageFns<QueryPreviousTopicWeightRequest> = {
  encode(message: QueryPreviousTopicWeightRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.topicId !== "0") {
      writer.uint32(8).uint64(message.topicId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryPreviousTopicWeightRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPreviousTopicWeightRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryPreviousTopicWeightRequest {
    return { topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0" };
  },

  toJSON(message: QueryPreviousTopicWeightRequest): unknown {
    const obj: any = {};
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryPreviousTopicWeightRequest>): QueryPreviousTopicWeightRequest {
    return QueryPreviousTopicWeightRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryPreviousTopicWeightRequest>): QueryPreviousTopicWeightRequest {
    const message = createBaseQueryPreviousTopicWeightRequest();
    message.topicId = object.topicId ?? "0";
    return message;
  },
};

function createBaseQueryPreviousTopicWeightResponse(): QueryPreviousTopicWeightResponse {
  return { weight: "", notFound: false };
}

export const QueryPreviousTopicWeightResponse: MessageFns<QueryPreviousTopicWeightResponse> = {
  encode(message: QueryPreviousTopicWeightResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.weight !== "") {
      writer.uint32(10).string(message.weight);
    }
    if (message.notFound !== false) {
      writer.uint32(16).bool(message.notFound);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryPreviousTopicWeightResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPreviousTopicWeightResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.weight = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.notFound = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryPreviousTopicWeightResponse {
    return {
      weight: isSet(object.weight) ? globalThis.String(object.weight) : "",
      notFound: isSet(object.notFound) ? globalThis.Boolean(object.notFound) : false,
    };
  },

  toJSON(message: QueryPreviousTopicWeightResponse): unknown {
    const obj: any = {};
    if (message.weight !== "") {
      obj.weight = message.weight;
    }
    if (message.notFound !== false) {
      obj.notFound = message.notFound;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryPreviousTopicWeightResponse>): QueryPreviousTopicWeightResponse {
    return QueryPreviousTopicWeightResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryPreviousTopicWeightResponse>): QueryPreviousTopicWeightResponse {
    const message = createBaseQueryPreviousTopicWeightResponse();
    message.weight = object.weight ?? "";
    message.notFound = object.notFound ?? false;
    return message;
  },
};

function createBaseQueryTopicExistsRequest(): QueryTopicExistsRequest {
  return { topicId: "0" };
}

export const QueryTopicExistsRequest: MessageFns<QueryTopicExistsRequest> = {
  encode(message: QueryTopicExistsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.topicId !== "0") {
      writer.uint32(8).uint64(message.topicId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryTopicExistsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryTopicExistsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryTopicExistsRequest {
    return { topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0" };
  },

  toJSON(message: QueryTopicExistsRequest): unknown {
    const obj: any = {};
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryTopicExistsRequest>): QueryTopicExistsRequest {
    return QueryTopicExistsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryTopicExistsRequest>): QueryTopicExistsRequest {
    const message = createBaseQueryTopicExistsRequest();
    message.topicId = object.topicId ?? "0";
    return message;
  },
};

function createBaseQueryTopicExistsResponse(): QueryTopicExistsResponse {
  return { exists: false };
}

export const QueryTopicExistsResponse: MessageFns<QueryTopicExistsResponse> = {
  encode(message: QueryTopicExistsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.exists !== false) {
      writer.uint32(8).bool(message.exists);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryTopicExistsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryTopicExistsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.exists = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryTopicExistsResponse {
    return { exists: isSet(object.exists) ? globalThis.Boolean(object.exists) : false };
  },

  toJSON(message: QueryTopicExistsResponse): unknown {
    const obj: any = {};
    if (message.exists !== false) {
      obj.exists = message.exists;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryTopicExistsResponse>): QueryTopicExistsResponse {
    return QueryTopicExistsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryTopicExistsResponse>): QueryTopicExistsResponse {
    const message = createBaseQueryTopicExistsResponse();
    message.exists = object.exists ?? false;
    return message;
  },
};

function createBaseQueryIsTopicActiveRequest(): QueryIsTopicActiveRequest {
  return { topicId: "0" };
}

export const QueryIsTopicActiveRequest: MessageFns<QueryIsTopicActiveRequest> = {
  encode(message: QueryIsTopicActiveRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.topicId !== "0") {
      writer.uint32(8).uint64(message.topicId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryIsTopicActiveRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryIsTopicActiveRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryIsTopicActiveRequest {
    return { topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0" };
  },

  toJSON(message: QueryIsTopicActiveRequest): unknown {
    const obj: any = {};
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryIsTopicActiveRequest>): QueryIsTopicActiveRequest {
    return QueryIsTopicActiveRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryIsTopicActiveRequest>): QueryIsTopicActiveRequest {
    const message = createBaseQueryIsTopicActiveRequest();
    message.topicId = object.topicId ?? "0";
    return message;
  },
};

function createBaseQueryIsTopicActiveResponse(): QueryIsTopicActiveResponse {
  return { isActive: false };
}

export const QueryIsTopicActiveResponse: MessageFns<QueryIsTopicActiveResponse> = {
  encode(message: QueryIsTopicActiveResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.isActive !== false) {
      writer.uint32(8).bool(message.isActive);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryIsTopicActiveResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryIsTopicActiveResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.isActive = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryIsTopicActiveResponse {
    return { isActive: isSet(object.isActive) ? globalThis.Boolean(object.isActive) : false };
  },

  toJSON(message: QueryIsTopicActiveResponse): unknown {
    const obj: any = {};
    if (message.isActive !== false) {
      obj.isActive = message.isActive;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryIsTopicActiveResponse>): QueryIsTopicActiveResponse {
    return QueryIsTopicActiveResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryIsTopicActiveResponse>): QueryIsTopicActiveResponse {
    const message = createBaseQueryIsTopicActiveResponse();
    message.isActive = object.isActive ?? false;
    return message;
  },
};

function createBaseQueryTopicFeeRevenueRequest(): QueryTopicFeeRevenueRequest {
  return { topicId: "0" };
}

export const QueryTopicFeeRevenueRequest: MessageFns<QueryTopicFeeRevenueRequest> = {
  encode(message: QueryTopicFeeRevenueRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.topicId !== "0") {
      writer.uint32(8).uint64(message.topicId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryTopicFeeRevenueRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryTopicFeeRevenueRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryTopicFeeRevenueRequest {
    return { topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0" };
  },

  toJSON(message: QueryTopicFeeRevenueRequest): unknown {
    const obj: any = {};
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryTopicFeeRevenueRequest>): QueryTopicFeeRevenueRequest {
    return QueryTopicFeeRevenueRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryTopicFeeRevenueRequest>): QueryTopicFeeRevenueRequest {
    const message = createBaseQueryTopicFeeRevenueRequest();
    message.topicId = object.topicId ?? "0";
    return message;
  },
};

function createBaseQueryTopicFeeRevenueResponse(): QueryTopicFeeRevenueResponse {
  return { feeRevenue: "" };
}

export const QueryTopicFeeRevenueResponse: MessageFns<QueryTopicFeeRevenueResponse> = {
  encode(message: QueryTopicFeeRevenueResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.feeRevenue !== "") {
      writer.uint32(10).string(message.feeRevenue);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryTopicFeeRevenueResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryTopicFeeRevenueResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.feeRevenue = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryTopicFeeRevenueResponse {
    return { feeRevenue: isSet(object.feeRevenue) ? globalThis.String(object.feeRevenue) : "" };
  },

  toJSON(message: QueryTopicFeeRevenueResponse): unknown {
    const obj: any = {};
    if (message.feeRevenue !== "") {
      obj.feeRevenue = message.feeRevenue;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryTopicFeeRevenueResponse>): QueryTopicFeeRevenueResponse {
    return QueryTopicFeeRevenueResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryTopicFeeRevenueResponse>): QueryTopicFeeRevenueResponse {
    const message = createBaseQueryTopicFeeRevenueResponse();
    message.feeRevenue = object.feeRevenue ?? "";
    return message;
  },
};

function createBaseQueryRewardableTopicsRequest(): QueryRewardableTopicsRequest {
  return {};
}

export const QueryRewardableTopicsRequest: MessageFns<QueryRewardableTopicsRequest> = {
  encode(_: QueryRewardableTopicsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryRewardableTopicsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryRewardableTopicsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryRewardableTopicsRequest {
    return {};
  },

  toJSON(_: QueryRewardableTopicsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<QueryRewardableTopicsRequest>): QueryRewardableTopicsRequest {
    return QueryRewardableTopicsRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<QueryRewardableTopicsRequest>): QueryRewardableTopicsRequest {
    const message = createBaseQueryRewardableTopicsRequest();
    return message;
  },
};

function createBaseQueryRewardableTopicsResponse(): QueryRewardableTopicsResponse {
  return { rewardableTopicIds: [] };
}

export const QueryRewardableTopicsResponse: MessageFns<QueryRewardableTopicsResponse> = {
  encode(message: QueryRewardableTopicsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.rewardableTopicIds) {
      writer.uint64(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryRewardableTopicsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryRewardableTopicsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag === 8) {
            message.rewardableTopicIds.push(reader.uint64().toString());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.rewardableTopicIds.push(reader.uint64().toString());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryRewardableTopicsResponse {
    return {
      rewardableTopicIds: globalThis.Array.isArray(object?.rewardableTopicIds)
        ? object.rewardableTopicIds.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: QueryRewardableTopicsResponse): unknown {
    const obj: any = {};
    if (message.rewardableTopicIds?.length) {
      obj.rewardableTopicIds = message.rewardableTopicIds;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryRewardableTopicsResponse>): QueryRewardableTopicsResponse {
    return QueryRewardableTopicsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryRewardableTopicsResponse>): QueryRewardableTopicsResponse {
    const message = createBaseQueryRewardableTopicsResponse();
    message.rewardableTopicIds = object.rewardableTopicIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseQueryLatestInfererScoreRequest(): QueryLatestInfererScoreRequest {
  return { topicId: "0", inferer: "" };
}

export const QueryLatestInfererScoreRequest: MessageFns<QueryLatestInfererScoreRequest> = {
  encode(message: QueryLatestInfererScoreRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.topicId !== "0") {
      writer.uint32(8).uint64(message.topicId);
    }
    if (message.inferer !== "") {
      writer.uint32(18).string(message.inferer);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryLatestInfererScoreRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryLatestInfererScoreRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.inferer = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryLatestInfererScoreRequest {
    return {
      topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
      inferer: isSet(object.inferer) ? globalThis.String(object.inferer) : "",
    };
  },

  toJSON(message: QueryLatestInfererScoreRequest): unknown {
    const obj: any = {};
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    if (message.inferer !== "") {
      obj.inferer = message.inferer;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryLatestInfererScoreRequest>): QueryLatestInfererScoreRequest {
    return QueryLatestInfererScoreRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryLatestInfererScoreRequest>): QueryLatestInfererScoreRequest {
    const message = createBaseQueryLatestInfererScoreRequest();
    message.topicId = object.topicId ?? "0";
    message.inferer = object.inferer ?? "";
    return message;
  },
};

function createBaseQueryLatestInfererScoreResponse(): QueryLatestInfererScoreResponse {
  return { score: undefined };
}

export const QueryLatestInfererScoreResponse: MessageFns<QueryLatestInfererScoreResponse> = {
  encode(message: QueryLatestInfererScoreResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.score !== undefined) {
      Score.encode(message.score, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryLatestInfererScoreResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryLatestInfererScoreResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.score = Score.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryLatestInfererScoreResponse {
    return { score: isSet(object.score) ? Score.fromJSON(object.score) : undefined };
  },

  toJSON(message: QueryLatestInfererScoreResponse): unknown {
    const obj: any = {};
    if (message.score !== undefined) {
      obj.score = Score.toJSON(message.score);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryLatestInfererScoreResponse>): QueryLatestInfererScoreResponse {
    return QueryLatestInfererScoreResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryLatestInfererScoreResponse>): QueryLatestInfererScoreResponse {
    const message = createBaseQueryLatestInfererScoreResponse();
    message.score = (object.score !== undefined && object.score !== null) ? Score.fromPartial(object.score) : undefined;
    return message;
  },
};

function createBaseQueryLatestForecasterScoreRequest(): QueryLatestForecasterScoreRequest {
  return { topicId: "0", forecaster: "" };
}

export const QueryLatestForecasterScoreRequest: MessageFns<QueryLatestForecasterScoreRequest> = {
  encode(message: QueryLatestForecasterScoreRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.topicId !== "0") {
      writer.uint32(8).uint64(message.topicId);
    }
    if (message.forecaster !== "") {
      writer.uint32(18).string(message.forecaster);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryLatestForecasterScoreRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryLatestForecasterScoreRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.forecaster = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryLatestForecasterScoreRequest {
    return {
      topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
      forecaster: isSet(object.forecaster) ? globalThis.String(object.forecaster) : "",
    };
  },

  toJSON(message: QueryLatestForecasterScoreRequest): unknown {
    const obj: any = {};
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    if (message.forecaster !== "") {
      obj.forecaster = message.forecaster;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryLatestForecasterScoreRequest>): QueryLatestForecasterScoreRequest {
    return QueryLatestForecasterScoreRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryLatestForecasterScoreRequest>): QueryLatestForecasterScoreRequest {
    const message = createBaseQueryLatestForecasterScoreRequest();
    message.topicId = object.topicId ?? "0";
    message.forecaster = object.forecaster ?? "";
    return message;
  },
};

function createBaseQueryLatestForecasterScoreResponse(): QueryLatestForecasterScoreResponse {
  return { score: undefined };
}

export const QueryLatestForecasterScoreResponse: MessageFns<QueryLatestForecasterScoreResponse> = {
  encode(message: QueryLatestForecasterScoreResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.score !== undefined) {
      Score.encode(message.score, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryLatestForecasterScoreResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryLatestForecasterScoreResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.score = Score.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryLatestForecasterScoreResponse {
    return { score: isSet(object.score) ? Score.fromJSON(object.score) : undefined };
  },

  toJSON(message: QueryLatestForecasterScoreResponse): unknown {
    const obj: any = {};
    if (message.score !== undefined) {
      obj.score = Score.toJSON(message.score);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryLatestForecasterScoreResponse>): QueryLatestForecasterScoreResponse {
    return QueryLatestForecasterScoreResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryLatestForecasterScoreResponse>): QueryLatestForecasterScoreResponse {
    const message = createBaseQueryLatestForecasterScoreResponse();
    message.score = (object.score !== undefined && object.score !== null) ? Score.fromPartial(object.score) : undefined;
    return message;
  },
};

function createBaseQueryLatestReputerScoreRequest(): QueryLatestReputerScoreRequest {
  return { topicId: "0", reputer: "" };
}

export const QueryLatestReputerScoreRequest: MessageFns<QueryLatestReputerScoreRequest> = {
  encode(message: QueryLatestReputerScoreRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.topicId !== "0") {
      writer.uint32(8).uint64(message.topicId);
    }
    if (message.reputer !== "") {
      writer.uint32(18).string(message.reputer);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryLatestReputerScoreRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryLatestReputerScoreRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.reputer = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryLatestReputerScoreRequest {
    return {
      topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
      reputer: isSet(object.reputer) ? globalThis.String(object.reputer) : "",
    };
  },

  toJSON(message: QueryLatestReputerScoreRequest): unknown {
    const obj: any = {};
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    if (message.reputer !== "") {
      obj.reputer = message.reputer;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryLatestReputerScoreRequest>): QueryLatestReputerScoreRequest {
    return QueryLatestReputerScoreRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryLatestReputerScoreRequest>): QueryLatestReputerScoreRequest {
    const message = createBaseQueryLatestReputerScoreRequest();
    message.topicId = object.topicId ?? "0";
    message.reputer = object.reputer ?? "";
    return message;
  },
};

function createBaseQueryLatestReputerScoreResponse(): QueryLatestReputerScoreResponse {
  return { score: undefined };
}

export const QueryLatestReputerScoreResponse: MessageFns<QueryLatestReputerScoreResponse> = {
  encode(message: QueryLatestReputerScoreResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.score !== undefined) {
      Score.encode(message.score, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryLatestReputerScoreResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryLatestReputerScoreResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.score = Score.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryLatestReputerScoreResponse {
    return { score: isSet(object.score) ? Score.fromJSON(object.score) : undefined };
  },

  toJSON(message: QueryLatestReputerScoreResponse): unknown {
    const obj: any = {};
    if (message.score !== undefined) {
      obj.score = Score.toJSON(message.score);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryLatestReputerScoreResponse>): QueryLatestReputerScoreResponse {
    return QueryLatestReputerScoreResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryLatestReputerScoreResponse>): QueryLatestReputerScoreResponse {
    const message = createBaseQueryLatestReputerScoreResponse();
    message.score = (object.score !== undefined && object.score !== null) ? Score.fromPartial(object.score) : undefined;
    return message;
  },
};

function createBaseQueryInferenceScoresUntilBlockRequest(): QueryInferenceScoresUntilBlockRequest {
  return { topicId: "0", blockHeight: "0" };
}

export const QueryInferenceScoresUntilBlockRequest: MessageFns<QueryInferenceScoresUntilBlockRequest> = {
  encode(message: QueryInferenceScoresUntilBlockRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.topicId !== "0") {
      writer.uint32(8).uint64(message.topicId);
    }
    if (message.blockHeight !== "0") {
      writer.uint32(16).int64(message.blockHeight);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryInferenceScoresUntilBlockRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryInferenceScoresUntilBlockRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.blockHeight = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryInferenceScoresUntilBlockRequest {
    return {
      topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
      blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
    };
  },

  toJSON(message: QueryInferenceScoresUntilBlockRequest): unknown {
    const obj: any = {};
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    if (message.blockHeight !== "0") {
      obj.blockHeight = message.blockHeight;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryInferenceScoresUntilBlockRequest>): QueryInferenceScoresUntilBlockRequest {
    return QueryInferenceScoresUntilBlockRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryInferenceScoresUntilBlockRequest>): QueryInferenceScoresUntilBlockRequest {
    const message = createBaseQueryInferenceScoresUntilBlockRequest();
    message.topicId = object.topicId ?? "0";
    message.blockHeight = object.blockHeight ?? "0";
    return message;
  },
};

function createBaseQueryInferenceScoresUntilBlockResponse(): QueryInferenceScoresUntilBlockResponse {
  return { scores: [] };
}

export const QueryInferenceScoresUntilBlockResponse: MessageFns<QueryInferenceScoresUntilBlockResponse> = {
  encode(message: QueryInferenceScoresUntilBlockResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.scores) {
      Score.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryInferenceScoresUntilBlockResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryInferenceScoresUntilBlockResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.scores.push(Score.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryInferenceScoresUntilBlockResponse {
    return { scores: globalThis.Array.isArray(object?.scores) ? object.scores.map((e: any) => Score.fromJSON(e)) : [] };
  },

  toJSON(message: QueryInferenceScoresUntilBlockResponse): unknown {
    const obj: any = {};
    if (message.scores?.length) {
      obj.scores = message.scores.map((e) => Score.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<QueryInferenceScoresUntilBlockResponse>): QueryInferenceScoresUntilBlockResponse {
    return QueryInferenceScoresUntilBlockResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryInferenceScoresUntilBlockResponse>): QueryInferenceScoresUntilBlockResponse {
    const message = createBaseQueryInferenceScoresUntilBlockResponse();
    message.scores = object.scores?.map((e) => Score.fromPartial(e)) || [];
    return message;
  },
};

function createBaseQueryWorkerInferenceScoresAtBlockRequest(): QueryWorkerInferenceScoresAtBlockRequest {
  return { topicId: "0", blockHeight: "0" };
}

export const QueryWorkerInferenceScoresAtBlockRequest: MessageFns<QueryWorkerInferenceScoresAtBlockRequest> = {
  encode(message: QueryWorkerInferenceScoresAtBlockRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.topicId !== "0") {
      writer.uint32(8).uint64(message.topicId);
    }
    if (message.blockHeight !== "0") {
      writer.uint32(16).int64(message.blockHeight);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryWorkerInferenceScoresAtBlockRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryWorkerInferenceScoresAtBlockRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.blockHeight = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryWorkerInferenceScoresAtBlockRequest {
    return {
      topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
      blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
    };
  },

  toJSON(message: QueryWorkerInferenceScoresAtBlockRequest): unknown {
    const obj: any = {};
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    if (message.blockHeight !== "0") {
      obj.blockHeight = message.blockHeight;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryWorkerInferenceScoresAtBlockRequest>): QueryWorkerInferenceScoresAtBlockRequest {
    return QueryWorkerInferenceScoresAtBlockRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryWorkerInferenceScoresAtBlockRequest>): QueryWorkerInferenceScoresAtBlockRequest {
    const message = createBaseQueryWorkerInferenceScoresAtBlockRequest();
    message.topicId = object.topicId ?? "0";
    message.blockHeight = object.blockHeight ?? "0";
    return message;
  },
};

function createBaseQueryWorkerInferenceScoresAtBlockResponse(): QueryWorkerInferenceScoresAtBlockResponse {
  return { scores: undefined };
}

export const QueryWorkerInferenceScoresAtBlockResponse: MessageFns<QueryWorkerInferenceScoresAtBlockResponse> = {
  encode(message: QueryWorkerInferenceScoresAtBlockResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.scores !== undefined) {
      Scores.encode(message.scores, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryWorkerInferenceScoresAtBlockResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryWorkerInferenceScoresAtBlockResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.scores = Scores.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryWorkerInferenceScoresAtBlockResponse {
    return { scores: isSet(object.scores) ? Scores.fromJSON(object.scores) : undefined };
  },

  toJSON(message: QueryWorkerInferenceScoresAtBlockResponse): unknown {
    const obj: any = {};
    if (message.scores !== undefined) {
      obj.scores = Scores.toJSON(message.scores);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryWorkerInferenceScoresAtBlockResponse>): QueryWorkerInferenceScoresAtBlockResponse {
    return QueryWorkerInferenceScoresAtBlockResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<QueryWorkerInferenceScoresAtBlockResponse>,
  ): QueryWorkerInferenceScoresAtBlockResponse {
    const message = createBaseQueryWorkerInferenceScoresAtBlockResponse();
    message.scores = (object.scores !== undefined && object.scores !== null)
      ? Scores.fromPartial(object.scores)
      : undefined;
    return message;
  },
};

function createBaseQueryForecastScoresUntilBlockRequest(): QueryForecastScoresUntilBlockRequest {
  return { topicId: "0", blockHeight: "0" };
}

export const QueryForecastScoresUntilBlockRequest: MessageFns<QueryForecastScoresUntilBlockRequest> = {
  encode(message: QueryForecastScoresUntilBlockRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.topicId !== "0") {
      writer.uint32(8).uint64(message.topicId);
    }
    if (message.blockHeight !== "0") {
      writer.uint32(16).int64(message.blockHeight);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryForecastScoresUntilBlockRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryForecastScoresUntilBlockRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.blockHeight = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryForecastScoresUntilBlockRequest {
    return {
      topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
      blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
    };
  },

  toJSON(message: QueryForecastScoresUntilBlockRequest): unknown {
    const obj: any = {};
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    if (message.blockHeight !== "0") {
      obj.blockHeight = message.blockHeight;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryForecastScoresUntilBlockRequest>): QueryForecastScoresUntilBlockRequest {
    return QueryForecastScoresUntilBlockRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryForecastScoresUntilBlockRequest>): QueryForecastScoresUntilBlockRequest {
    const message = createBaseQueryForecastScoresUntilBlockRequest();
    message.topicId = object.topicId ?? "0";
    message.blockHeight = object.blockHeight ?? "0";
    return message;
  },
};

function createBaseQueryForecastScoresUntilBlockResponse(): QueryForecastScoresUntilBlockResponse {
  return { scores: [] };
}

export const QueryForecastScoresUntilBlockResponse: MessageFns<QueryForecastScoresUntilBlockResponse> = {
  encode(message: QueryForecastScoresUntilBlockResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.scores) {
      Score.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryForecastScoresUntilBlockResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryForecastScoresUntilBlockResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.scores.push(Score.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryForecastScoresUntilBlockResponse {
    return { scores: globalThis.Array.isArray(object?.scores) ? object.scores.map((e: any) => Score.fromJSON(e)) : [] };
  },

  toJSON(message: QueryForecastScoresUntilBlockResponse): unknown {
    const obj: any = {};
    if (message.scores?.length) {
      obj.scores = message.scores.map((e) => Score.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<QueryForecastScoresUntilBlockResponse>): QueryForecastScoresUntilBlockResponse {
    return QueryForecastScoresUntilBlockResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryForecastScoresUntilBlockResponse>): QueryForecastScoresUntilBlockResponse {
    const message = createBaseQueryForecastScoresUntilBlockResponse();
    message.scores = object.scores?.map((e) => Score.fromPartial(e)) || [];
    return message;
  },
};

function createBaseQueryWorkerForecastScoresAtBlockRequest(): QueryWorkerForecastScoresAtBlockRequest {
  return { topicId: "0", blockHeight: "0" };
}

export const QueryWorkerForecastScoresAtBlockRequest: MessageFns<QueryWorkerForecastScoresAtBlockRequest> = {
  encode(message: QueryWorkerForecastScoresAtBlockRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.topicId !== "0") {
      writer.uint32(8).uint64(message.topicId);
    }
    if (message.blockHeight !== "0") {
      writer.uint32(16).int64(message.blockHeight);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryWorkerForecastScoresAtBlockRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryWorkerForecastScoresAtBlockRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.blockHeight = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryWorkerForecastScoresAtBlockRequest {
    return {
      topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
      blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
    };
  },

  toJSON(message: QueryWorkerForecastScoresAtBlockRequest): unknown {
    const obj: any = {};
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    if (message.blockHeight !== "0") {
      obj.blockHeight = message.blockHeight;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryWorkerForecastScoresAtBlockRequest>): QueryWorkerForecastScoresAtBlockRequest {
    return QueryWorkerForecastScoresAtBlockRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryWorkerForecastScoresAtBlockRequest>): QueryWorkerForecastScoresAtBlockRequest {
    const message = createBaseQueryWorkerForecastScoresAtBlockRequest();
    message.topicId = object.topicId ?? "0";
    message.blockHeight = object.blockHeight ?? "0";
    return message;
  },
};

function createBaseQueryWorkerForecastScoresAtBlockResponse(): QueryWorkerForecastScoresAtBlockResponse {
  return { scores: undefined };
}

export const QueryWorkerForecastScoresAtBlockResponse: MessageFns<QueryWorkerForecastScoresAtBlockResponse> = {
  encode(message: QueryWorkerForecastScoresAtBlockResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.scores !== undefined) {
      Scores.encode(message.scores, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryWorkerForecastScoresAtBlockResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryWorkerForecastScoresAtBlockResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.scores = Scores.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryWorkerForecastScoresAtBlockResponse {
    return { scores: isSet(object.scores) ? Scores.fromJSON(object.scores) : undefined };
  },

  toJSON(message: QueryWorkerForecastScoresAtBlockResponse): unknown {
    const obj: any = {};
    if (message.scores !== undefined) {
      obj.scores = Scores.toJSON(message.scores);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryWorkerForecastScoresAtBlockResponse>): QueryWorkerForecastScoresAtBlockResponse {
    return QueryWorkerForecastScoresAtBlockResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryWorkerForecastScoresAtBlockResponse>): QueryWorkerForecastScoresAtBlockResponse {
    const message = createBaseQueryWorkerForecastScoresAtBlockResponse();
    message.scores = (object.scores !== undefined && object.scores !== null)
      ? Scores.fromPartial(object.scores)
      : undefined;
    return message;
  },
};

function createBaseQueryReputersScoresAtBlockRequest(): QueryReputersScoresAtBlockRequest {
  return { topicId: "0", blockHeight: "0" };
}

export const QueryReputersScoresAtBlockRequest: MessageFns<QueryReputersScoresAtBlockRequest> = {
  encode(message: QueryReputersScoresAtBlockRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.topicId !== "0") {
      writer.uint32(8).uint64(message.topicId);
    }
    if (message.blockHeight !== "0") {
      writer.uint32(16).int64(message.blockHeight);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryReputersScoresAtBlockRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryReputersScoresAtBlockRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.blockHeight = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryReputersScoresAtBlockRequest {
    return {
      topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
      blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
    };
  },

  toJSON(message: QueryReputersScoresAtBlockRequest): unknown {
    const obj: any = {};
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    if (message.blockHeight !== "0") {
      obj.blockHeight = message.blockHeight;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryReputersScoresAtBlockRequest>): QueryReputersScoresAtBlockRequest {
    return QueryReputersScoresAtBlockRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryReputersScoresAtBlockRequest>): QueryReputersScoresAtBlockRequest {
    const message = createBaseQueryReputersScoresAtBlockRequest();
    message.topicId = object.topicId ?? "0";
    message.blockHeight = object.blockHeight ?? "0";
    return message;
  },
};

function createBaseQueryReputersScoresAtBlockResponse(): QueryReputersScoresAtBlockResponse {
  return { scores: undefined };
}

export const QueryReputersScoresAtBlockResponse: MessageFns<QueryReputersScoresAtBlockResponse> = {
  encode(message: QueryReputersScoresAtBlockResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.scores !== undefined) {
      Scores.encode(message.scores, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryReputersScoresAtBlockResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryReputersScoresAtBlockResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.scores = Scores.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryReputersScoresAtBlockResponse {
    return { scores: isSet(object.scores) ? Scores.fromJSON(object.scores) : undefined };
  },

  toJSON(message: QueryReputersScoresAtBlockResponse): unknown {
    const obj: any = {};
    if (message.scores !== undefined) {
      obj.scores = Scores.toJSON(message.scores);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryReputersScoresAtBlockResponse>): QueryReputersScoresAtBlockResponse {
    return QueryReputersScoresAtBlockResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryReputersScoresAtBlockResponse>): QueryReputersScoresAtBlockResponse {
    const message = createBaseQueryReputersScoresAtBlockResponse();
    message.scores = (object.scores !== undefined && object.scores !== null)
      ? Scores.fromPartial(object.scores)
      : undefined;
    return message;
  },
};

function createBaseQueryListeningCoefficientRequest(): QueryListeningCoefficientRequest {
  return { topicId: "0", reputer: "" };
}

export const QueryListeningCoefficientRequest: MessageFns<QueryListeningCoefficientRequest> = {
  encode(message: QueryListeningCoefficientRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.topicId !== "0") {
      writer.uint32(8).uint64(message.topicId);
    }
    if (message.reputer !== "") {
      writer.uint32(18).string(message.reputer);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryListeningCoefficientRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryListeningCoefficientRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.reputer = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryListeningCoefficientRequest {
    return {
      topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
      reputer: isSet(object.reputer) ? globalThis.String(object.reputer) : "",
    };
  },

  toJSON(message: QueryListeningCoefficientRequest): unknown {
    const obj: any = {};
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    if (message.reputer !== "") {
      obj.reputer = message.reputer;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryListeningCoefficientRequest>): QueryListeningCoefficientRequest {
    return QueryListeningCoefficientRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryListeningCoefficientRequest>): QueryListeningCoefficientRequest {
    const message = createBaseQueryListeningCoefficientRequest();
    message.topicId = object.topicId ?? "0";
    message.reputer = object.reputer ?? "";
    return message;
  },
};

function createBaseQueryListeningCoefficientResponse(): QueryListeningCoefficientResponse {
  return { listeningCoefficient: undefined };
}

export const QueryListeningCoefficientResponse: MessageFns<QueryListeningCoefficientResponse> = {
  encode(message: QueryListeningCoefficientResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.listeningCoefficient !== undefined) {
      ListeningCoefficient.encode(message.listeningCoefficient, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryListeningCoefficientResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryListeningCoefficientResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.listeningCoefficient = ListeningCoefficient.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryListeningCoefficientResponse {
    return {
      listeningCoefficient: isSet(object.listeningCoefficient)
        ? ListeningCoefficient.fromJSON(object.listeningCoefficient)
        : undefined,
    };
  },

  toJSON(message: QueryListeningCoefficientResponse): unknown {
    const obj: any = {};
    if (message.listeningCoefficient !== undefined) {
      obj.listeningCoefficient = ListeningCoefficient.toJSON(message.listeningCoefficient);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryListeningCoefficientResponse>): QueryListeningCoefficientResponse {
    return QueryListeningCoefficientResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryListeningCoefficientResponse>): QueryListeningCoefficientResponse {
    const message = createBaseQueryListeningCoefficientResponse();
    message.listeningCoefficient = (object.listeningCoefficient !== undefined && object.listeningCoefficient !== null)
      ? ListeningCoefficient.fromPartial(object.listeningCoefficient)
      : undefined;
    return message;
  },
};

function createBaseQueryPreviousReputerRewardFractionRequest(): QueryPreviousReputerRewardFractionRequest {
  return { topicId: "0", reputer: "" };
}

export const QueryPreviousReputerRewardFractionRequest: MessageFns<QueryPreviousReputerRewardFractionRequest> = {
  encode(message: QueryPreviousReputerRewardFractionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.topicId !== "0") {
      writer.uint32(8).uint64(message.topicId);
    }
    if (message.reputer !== "") {
      writer.uint32(18).string(message.reputer);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryPreviousReputerRewardFractionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPreviousReputerRewardFractionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.reputer = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryPreviousReputerRewardFractionRequest {
    return {
      topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
      reputer: isSet(object.reputer) ? globalThis.String(object.reputer) : "",
    };
  },

  toJSON(message: QueryPreviousReputerRewardFractionRequest): unknown {
    const obj: any = {};
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    if (message.reputer !== "") {
      obj.reputer = message.reputer;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryPreviousReputerRewardFractionRequest>): QueryPreviousReputerRewardFractionRequest {
    return QueryPreviousReputerRewardFractionRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<QueryPreviousReputerRewardFractionRequest>,
  ): QueryPreviousReputerRewardFractionRequest {
    const message = createBaseQueryPreviousReputerRewardFractionRequest();
    message.topicId = object.topicId ?? "0";
    message.reputer = object.reputer ?? "";
    return message;
  },
};

function createBaseQueryPreviousReputerRewardFractionResponse(): QueryPreviousReputerRewardFractionResponse {
  return { rewardFraction: "", notFound: false };
}

export const QueryPreviousReputerRewardFractionResponse: MessageFns<QueryPreviousReputerRewardFractionResponse> = {
  encode(message: QueryPreviousReputerRewardFractionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.rewardFraction !== "") {
      writer.uint32(10).string(message.rewardFraction);
    }
    if (message.notFound !== false) {
      writer.uint32(16).bool(message.notFound);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryPreviousReputerRewardFractionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPreviousReputerRewardFractionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.rewardFraction = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.notFound = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryPreviousReputerRewardFractionResponse {
    return {
      rewardFraction: isSet(object.rewardFraction) ? globalThis.String(object.rewardFraction) : "",
      notFound: isSet(object.notFound) ? globalThis.Boolean(object.notFound) : false,
    };
  },

  toJSON(message: QueryPreviousReputerRewardFractionResponse): unknown {
    const obj: any = {};
    if (message.rewardFraction !== "") {
      obj.rewardFraction = message.rewardFraction;
    }
    if (message.notFound !== false) {
      obj.notFound = message.notFound;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryPreviousReputerRewardFractionResponse>): QueryPreviousReputerRewardFractionResponse {
    return QueryPreviousReputerRewardFractionResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<QueryPreviousReputerRewardFractionResponse>,
  ): QueryPreviousReputerRewardFractionResponse {
    const message = createBaseQueryPreviousReputerRewardFractionResponse();
    message.rewardFraction = object.rewardFraction ?? "";
    message.notFound = object.notFound ?? false;
    return message;
  },
};

function createBaseQueryPreviousInferenceRewardFractionRequest(): QueryPreviousInferenceRewardFractionRequest {
  return { topicId: "0", worker: "" };
}

export const QueryPreviousInferenceRewardFractionRequest: MessageFns<QueryPreviousInferenceRewardFractionRequest> = {
  encode(
    message: QueryPreviousInferenceRewardFractionRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.topicId !== "0") {
      writer.uint32(8).uint64(message.topicId);
    }
    if (message.worker !== "") {
      writer.uint32(18).string(message.worker);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryPreviousInferenceRewardFractionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPreviousInferenceRewardFractionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.worker = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryPreviousInferenceRewardFractionRequest {
    return {
      topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
      worker: isSet(object.worker) ? globalThis.String(object.worker) : "",
    };
  },

  toJSON(message: QueryPreviousInferenceRewardFractionRequest): unknown {
    const obj: any = {};
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    if (message.worker !== "") {
      obj.worker = message.worker;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryPreviousInferenceRewardFractionRequest>): QueryPreviousInferenceRewardFractionRequest {
    return QueryPreviousInferenceRewardFractionRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<QueryPreviousInferenceRewardFractionRequest>,
  ): QueryPreviousInferenceRewardFractionRequest {
    const message = createBaseQueryPreviousInferenceRewardFractionRequest();
    message.topicId = object.topicId ?? "0";
    message.worker = object.worker ?? "";
    return message;
  },
};

function createBaseQueryPreviousInferenceRewardFractionResponse(): QueryPreviousInferenceRewardFractionResponse {
  return { rewardFraction: "", notFound: false };
}

export const QueryPreviousInferenceRewardFractionResponse: MessageFns<QueryPreviousInferenceRewardFractionResponse> = {
  encode(
    message: QueryPreviousInferenceRewardFractionResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.rewardFraction !== "") {
      writer.uint32(10).string(message.rewardFraction);
    }
    if (message.notFound !== false) {
      writer.uint32(16).bool(message.notFound);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryPreviousInferenceRewardFractionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPreviousInferenceRewardFractionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.rewardFraction = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.notFound = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryPreviousInferenceRewardFractionResponse {
    return {
      rewardFraction: isSet(object.rewardFraction) ? globalThis.String(object.rewardFraction) : "",
      notFound: isSet(object.notFound) ? globalThis.Boolean(object.notFound) : false,
    };
  },

  toJSON(message: QueryPreviousInferenceRewardFractionResponse): unknown {
    const obj: any = {};
    if (message.rewardFraction !== "") {
      obj.rewardFraction = message.rewardFraction;
    }
    if (message.notFound !== false) {
      obj.notFound = message.notFound;
    }
    return obj;
  },

  create(
    base?: DeepPartial<QueryPreviousInferenceRewardFractionResponse>,
  ): QueryPreviousInferenceRewardFractionResponse {
    return QueryPreviousInferenceRewardFractionResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<QueryPreviousInferenceRewardFractionResponse>,
  ): QueryPreviousInferenceRewardFractionResponse {
    const message = createBaseQueryPreviousInferenceRewardFractionResponse();
    message.rewardFraction = object.rewardFraction ?? "";
    message.notFound = object.notFound ?? false;
    return message;
  },
};

function createBaseQueryPreviousForecastRewardFractionRequest(): QueryPreviousForecastRewardFractionRequest {
  return { topicId: "0", worker: "" };
}

export const QueryPreviousForecastRewardFractionRequest: MessageFns<QueryPreviousForecastRewardFractionRequest> = {
  encode(message: QueryPreviousForecastRewardFractionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.topicId !== "0") {
      writer.uint32(8).uint64(message.topicId);
    }
    if (message.worker !== "") {
      writer.uint32(18).string(message.worker);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryPreviousForecastRewardFractionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPreviousForecastRewardFractionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.topicId = reader.uint64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.worker = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryPreviousForecastRewardFractionRequest {
    return {
      topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
      worker: isSet(object.worker) ? globalThis.String(object.worker) : "",
    };
  },

  toJSON(message: QueryPreviousForecastRewardFractionRequest): unknown {
    const obj: any = {};
    if (message.topicId !== "0") {
      obj.topicId = message.topicId;
    }
    if (message.worker !== "") {
      obj.worker = message.worker;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryPreviousForecastRewardFractionRequest>): QueryPreviousForecastRewardFractionRequest {
    return QueryPreviousForecastRewardFractionRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<QueryPreviousForecastRewardFractionRequest>,
  ): QueryPreviousForecastRewardFractionRequest {
    const message = createBaseQueryPreviousForecastRewardFractionRequest();
    message.topicId = object.topicId ?? "0";
    message.worker = object.worker ?? "";
    return message;
  },
};

function createBaseQueryPreviousForecastRewardFractionResponse(): QueryPreviousForecastRewardFractionResponse {
  return { rewardFraction: "", notFound: false };
}

export const QueryPreviousForecastRewardFractionResponse: MessageFns<QueryPreviousForecastRewardFractionResponse> = {
  encode(
    message: QueryPreviousForecastRewardFractionResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.rewardFraction !== "") {
      writer.uint32(10).string(message.rewardFraction);
    }
    if (message.notFound !== false) {
      writer.uint32(16).bool(message.notFound);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryPreviousForecastRewardFractionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPreviousForecastRewardFractionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.rewardFraction = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.notFound = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryPreviousForecastRewardFractionResponse {
    return {
      rewardFraction: isSet(object.rewardFraction) ? globalThis.String(object.rewardFraction) : "",
      notFound: isSet(object.notFound) ? globalThis.Boolean(object.notFound) : false,
    };
  },

  toJSON(message: QueryPreviousForecastRewardFractionResponse): unknown {
    const obj: any = {};
    if (message.rewardFraction !== "") {
      obj.rewardFraction = message.rewardFraction;
    }
    if (message.notFound !== false) {
      obj.notFound = message.notFound;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryPreviousForecastRewardFractionResponse>): QueryPreviousForecastRewardFractionResponse {
    return QueryPreviousForecastRewardFractionResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<QueryPreviousForecastRewardFractionResponse>,
  ): QueryPreviousForecastRewardFractionResponse {
    const message = createBaseQueryPreviousForecastRewardFractionResponse();
    message.rewardFraction = object.rewardFraction ?? "";
    message.notFound = object.notFound ?? false;
    return message;
  },
};

function createBaseQueryPreviousPercentageRewardToStakedReputersRequest(): QueryPreviousPercentageRewardToStakedReputersRequest {
  return {};
}

export const QueryPreviousPercentageRewardToStakedReputersRequest: MessageFns<
  QueryPreviousPercentageRewardToStakedReputersRequest
> = {
  encode(
    _: QueryPreviousPercentageRewardToStakedReputersRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryPreviousPercentageRewardToStakedReputersRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPreviousPercentageRewardToStakedReputersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryPreviousPercentageRewardToStakedReputersRequest {
    return {};
  },

  toJSON(_: QueryPreviousPercentageRewardToStakedReputersRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(
    base?: DeepPartial<QueryPreviousPercentageRewardToStakedReputersRequest>,
  ): QueryPreviousPercentageRewardToStakedReputersRequest {
    return QueryPreviousPercentageRewardToStakedReputersRequest.fromPartial(base ?? {});
  },
  fromPartial(
    _: DeepPartial<QueryPreviousPercentageRewardToStakedReputersRequest>,
  ): QueryPreviousPercentageRewardToStakedReputersRequest {
    const message = createBaseQueryPreviousPercentageRewardToStakedReputersRequest();
    return message;
  },
};

function createBaseQueryPreviousPercentageRewardToStakedReputersResponse(): QueryPreviousPercentageRewardToStakedReputersResponse {
  return { percentageReward: "" };
}

export const QueryPreviousPercentageRewardToStakedReputersResponse: MessageFns<
  QueryPreviousPercentageRewardToStakedReputersResponse
> = {
  encode(
    message: QueryPreviousPercentageRewardToStakedReputersResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.percentageReward !== "") {
      writer.uint32(10).string(message.percentageReward);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryPreviousPercentageRewardToStakedReputersResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPreviousPercentageRewardToStakedReputersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.percentageReward = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryPreviousPercentageRewardToStakedReputersResponse {
    return { percentageReward: isSet(object.percentageReward) ? globalThis.String(object.percentageReward) : "" };
  },

  toJSON(message: QueryPreviousPercentageRewardToStakedReputersResponse): unknown {
    const obj: any = {};
    if (message.percentageReward !== "") {
      obj.percentageReward = message.percentageReward;
    }
    return obj;
  },

  create(
    base?: DeepPartial<QueryPreviousPercentageRewardToStakedReputersResponse>,
  ): QueryPreviousPercentageRewardToStakedReputersResponse {
    return QueryPreviousPercentageRewardToStakedReputersResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<QueryPreviousPercentageRewardToStakedReputersResponse>,
  ): QueryPreviousPercentageRewardToStakedReputersResponse {
    const message = createBaseQueryPreviousPercentageRewardToStakedReputersResponse();
    message.percentageReward = object.percentageReward ?? "";
    return message;
  },
};

function createBaseQueryTotalRewardToDistributeRequest(): QueryTotalRewardToDistributeRequest {
  return {};
}

export const QueryTotalRewardToDistributeRequest: MessageFns<QueryTotalRewardToDistributeRequest> = {
  encode(_: QueryTotalRewardToDistributeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryTotalRewardToDistributeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryTotalRewardToDistributeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryTotalRewardToDistributeRequest {
    return {};
  },

  toJSON(_: QueryTotalRewardToDistributeRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<QueryTotalRewardToDistributeRequest>): QueryTotalRewardToDistributeRequest {
    return QueryTotalRewardToDistributeRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<QueryTotalRewardToDistributeRequest>): QueryTotalRewardToDistributeRequest {
    const message = createBaseQueryTotalRewardToDistributeRequest();
    return message;
  },
};

function createBaseQueryTotalRewardToDistributeResponse(): QueryTotalRewardToDistributeResponse {
  return { totalReward: "" };
}

export const QueryTotalRewardToDistributeResponse: MessageFns<QueryTotalRewardToDistributeResponse> = {
  encode(message: QueryTotalRewardToDistributeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.totalReward !== "") {
      writer.uint32(10).string(message.totalReward);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryTotalRewardToDistributeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryTotalRewardToDistributeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.totalReward = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryTotalRewardToDistributeResponse {
    return { totalReward: isSet(object.totalReward) ? globalThis.String(object.totalReward) : "" };
  },

  toJSON(message: QueryTotalRewardToDistributeResponse): unknown {
    const obj: any = {};
    if (message.totalReward !== "") {
      obj.totalReward = message.totalReward;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryTotalRewardToDistributeResponse>): QueryTotalRewardToDistributeResponse {
    return QueryTotalRewardToDistributeResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryTotalRewardToDistributeResponse>): QueryTotalRewardToDistributeResponse {
    const message = createBaseQueryTotalRewardToDistributeResponse();
    message.totalReward = object.totalReward ?? "";
    return message;
  },
};

/** Msg defines the module Msg service. */
export interface Query {
  /** Params returns the module parameters. */
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
  GetNextTopicId(request: QueryNextTopicIdRequest): Promise<QueryNextTopicIdResponse>;
  GetTopic(request: QueryTopicRequest): Promise<QueryTopicResponse>;
  GetActiveTopics(request: QueryActiveTopicsRequest): Promise<QueryActiveTopicsResponse>;
  GetWorkerLatestInferenceByTopicId(
    request: QueryWorkerLatestInferenceRequest,
  ): Promise<QueryWorkerLatestInferenceResponse>;
  GetInferencesAtBlock(request: QueryInferencesAtBlockRequest): Promise<QueryInferencesAtBlockResponse>;
  GetLatestTopicInferences(request: QueryLatestTopicInferencesRequest): Promise<QueryLatestTopicInferencesResponse>;
  GetForecastsAtBlock(request: QueryForecastsAtBlockRequest): Promise<QueryForecastsAtBlockResponse>;
  GetNetworkLossBundleAtBlock(
    request: QueryNetworkLossBundleAtBlockRequest,
  ): Promise<QueryNetworkLossBundleAtBlockResponse>;
  GetTotalStake(request: QueryTotalStakeRequest): Promise<QueryTotalStakeResponse>;
  GetReputerStakeInTopic(request: QueryReputerStakeInTopicRequest): Promise<QueryReputerStakeInTopicResponse>;
  GetMultiReputerStakeInTopic(
    request: QueryMultiReputerStakeInTopicRequest,
  ): Promise<QueryMultiReputerStakeInTopicResponse>;
  GetStakeFromReputerInTopicInSelf(
    request: QueryStakeFromReputerInTopicInSelfRequest,
  ): Promise<QueryStakeFromReputerInTopicInSelfResponse>;
  GetDelegateStakeInTopicInReputer(
    request: QueryDelegateStakeInTopicInReputerRequest,
  ): Promise<QueryDelegateStakeInTopicInReputerResponse>;
  GetStakeFromDelegatorInTopicInReputer(
    request: QueryStakeFromDelegatorInTopicInReputerRequest,
  ): Promise<QueryStakeFromDelegatorInTopicInReputerResponse>;
  GetStakeFromDelegatorInTopic(
    request: QueryStakeFromDelegatorInTopicRequest,
  ): Promise<QueryStakeFromDelegatorInTopicResponse>;
  GetTopicStake(request: QueryTopicStakeRequest): Promise<QueryTopicStakeResponse>;
  GetStakeRemovalsUpUntilBlock(
    request: QueryStakeRemovalsUpUntilBlockRequest,
  ): Promise<QueryStakeRemovalsUpUntilBlockResponse>;
  GetDelegateStakeRemovalsUpUntilBlock(
    request: QueryDelegateStakeRemovalsUpUntilBlockRequest,
  ): Promise<QueryDelegateStakeRemovalsUpUntilBlockResponse>;
  GetStakeRemovalInfo(request: QueryStakeRemovalInfoRequest): Promise<QueryStakeRemovalInfoResponse>;
  GetDelegateStakeRemovalInfo(
    request: QueryDelegateStakeRemovalInfoRequest,
  ): Promise<QueryDelegateStakeRemovalInfoResponse>;
  GetWorkerNodeInfo(request: QueryWorkerNodeInfoRequest): Promise<QueryWorkerNodeInfoResponse>;
  GetReputerNodeInfo(request: QueryReputerNodeInfoRequest): Promise<QueryReputerNodeInfoResponse>;
  IsWorkerRegisteredInTopicId(
    request: QueryIsWorkerRegisteredInTopicIdRequest,
  ): Promise<QueryIsWorkerRegisteredInTopicIdResponse>;
  IsReputerRegisteredInTopicId(
    request: QueryIsReputerRegisteredInTopicIdRequest,
  ): Promise<QueryIsReputerRegisteredInTopicIdResponse>;
  GetNetworkInferencesAtBlock(
    request: QueryNetworkInferencesAtBlockRequest,
  ): Promise<QueryNetworkInferencesAtBlockResponse>;
  GetLatestNetworkInference(
    request: QueryLatestNetworkInferencesRequest,
  ): Promise<QueryLatestNetworkInferencesResponse>;
  GetLatestAvailableNetworkInference(
    request: QueryLatestNetworkInferencesRequest,
  ): Promise<QueryLatestNetworkInferencesResponse>;
  IsWorkerNonceUnfulfilled(
    request: QueryIsWorkerNonceUnfulfilledRequest,
  ): Promise<QueryIsWorkerNonceUnfulfilledResponse>;
  IsReputerNonceUnfulfilled(
    request: QueryIsReputerNonceUnfulfilledRequest,
  ): Promise<QueryIsReputerNonceUnfulfilledResponse>;
  GetUnfulfilledWorkerNonces(
    request: QueryUnfulfilledWorkerNoncesRequest,
  ): Promise<QueryUnfulfilledWorkerNoncesResponse>;
  GetUnfulfilledReputerNonces(
    request: QueryUnfulfilledReputerNoncesRequest,
  ): Promise<QueryUnfulfilledReputerNoncesResponse>;
  GetInfererNetworkRegret(request: QueryInfererNetworkRegretRequest): Promise<QueryInfererNetworkRegretResponse>;
  GetForecasterNetworkRegret(
    request: QueryForecasterNetworkRegretRequest,
  ): Promise<QueryForecasterNetworkRegretResponse>;
  GetOneInForecasterNetworkRegret(
    request: QueryOneInForecasterNetworkRegretRequest,
  ): Promise<QueryOneInForecasterNetworkRegretResponse>;
  IsWhitelistAdmin(request: QueryIsWhitelistAdminRequest): Promise<QueryIsWhitelistAdminResponse>;
  GetTopicLastWorkerCommitInfo(request: QueryTopicLastCommitRequest): Promise<QueryTopicLastCommitResponse>;
  GetTopicLastReputerCommitInfo(request: QueryTopicLastCommitRequest): Promise<QueryTopicLastCommitResponse>;
  GetTopicRewardNonce(request: QueryTopicRewardNonceRequest): Promise<QueryTopicRewardNonceResponse>;
  GetReputerLossBundlesAtBlock(
    request: QueryReputerLossBundlesAtBlockRequest,
  ): Promise<QueryReputerLossBundlesAtBlockResponse>;
  GetStakeReputerAuthority(request: QueryStakeReputerAuthorityRequest): Promise<QueryStakeReputerAuthorityResponse>;
  GetDelegateStakePlacement(request: QueryDelegateStakePlacementRequest): Promise<QueryDelegateStakePlacementResponse>;
  GetDelegateStakeUponReputer(
    request: QueryDelegateStakeUponReputerRequest,
  ): Promise<QueryDelegateStakeUponReputerResponse>;
  GetDelegateRewardPerShare(request: QueryDelegateRewardPerShareRequest): Promise<QueryDelegateRewardPerShareResponse>;
  GetStakeRemovalForReputerAndTopicId(
    request: QueryStakeRemovalForReputerAndTopicIdRequest,
  ): Promise<QueryStakeRemovalForReputerAndTopicIdResponse>;
  GetDelegateStakeRemoval(request: QueryDelegateStakeRemovalRequest): Promise<QueryDelegateStakeRemovalResponse>;
  GetPreviousTopicWeight(request: QueryPreviousTopicWeightRequest): Promise<QueryPreviousTopicWeightResponse>;
  TopicExists(request: QueryTopicExistsRequest): Promise<QueryTopicExistsResponse>;
  IsTopicActive(request: QueryIsTopicActiveRequest): Promise<QueryIsTopicActiveResponse>;
  GetTopicFeeRevenue(request: QueryTopicFeeRevenueRequest): Promise<QueryTopicFeeRevenueResponse>;
  GetRewardableTopics(request: QueryRewardableTopicsRequest): Promise<QueryRewardableTopicsResponse>;
  GetLatestInfererScore(request: QueryLatestInfererScoreRequest): Promise<QueryLatestInfererScoreResponse>;
  GetLatestForecasterScore(request: QueryLatestForecasterScoreRequest): Promise<QueryLatestForecasterScoreResponse>;
  GetLatestReputerScore(request: QueryLatestReputerScoreRequest): Promise<QueryLatestReputerScoreResponse>;
  GetInferenceScoresUntilBlock(
    request: QueryInferenceScoresUntilBlockRequest,
  ): Promise<QueryInferenceScoresUntilBlockResponse>;
  GetWorkerInferenceScoresAtBlock(
    request: QueryWorkerInferenceScoresAtBlockRequest,
  ): Promise<QueryWorkerInferenceScoresAtBlockResponse>;
  GetForecastScoresUntilBlock(
    request: QueryForecastScoresUntilBlockRequest,
  ): Promise<QueryForecastScoresUntilBlockResponse>;
  GetWorkerForecastScoresAtBlock(
    request: QueryWorkerForecastScoresAtBlockRequest,
  ): Promise<QueryWorkerForecastScoresAtBlockResponse>;
  GetReputersScoresAtBlock(request: QueryReputersScoresAtBlockRequest): Promise<QueryReputersScoresAtBlockResponse>;
  GetListeningCoefficient(request: QueryListeningCoefficientRequest): Promise<QueryListeningCoefficientResponse>;
  GetPreviousReputerRewardFraction(
    request: QueryPreviousReputerRewardFractionRequest,
  ): Promise<QueryPreviousReputerRewardFractionResponse>;
  GetPreviousInferenceRewardFraction(
    request: QueryPreviousInferenceRewardFractionRequest,
  ): Promise<QueryPreviousInferenceRewardFractionResponse>;
  GetPreviousForecastRewardFraction(
    request: QueryPreviousForecastRewardFractionRequest,
  ): Promise<QueryPreviousForecastRewardFractionResponse>;
  GetPreviousPercentageRewardToStakedReputers(
    request: QueryPreviousPercentageRewardToStakedReputersRequest,
  ): Promise<QueryPreviousPercentageRewardToStakedReputersResponse>;
  GetTotalRewardToDistribute(
    request: QueryTotalRewardToDistributeRequest,
  ): Promise<QueryTotalRewardToDistributeResponse>;
  GetNaiveInfererNetworkRegret(
    request: QueryNaiveInfererNetworkRegretRequest,
  ): Promise<QueryNaiveInfererNetworkRegretResponse>;
  GetOneOutInfererInfererNetworkRegret(
    request: QueryOneOutInfererInfererNetworkRegretRequest,
  ): Promise<QueryOneOutInfererInfererNetworkRegretResponse>;
  GetOneOutInfererForecasterNetworkRegret(
    request: QueryOneOutInfererForecasterNetworkRegretRequest,
  ): Promise<QueryOneOutInfererForecasterNetworkRegretResponse>;
  GetOneOutForecasterInfererNetworkRegret(
    request: QueryOneOutForecasterInfererNetworkRegretRequest,
  ): Promise<QueryOneOutForecasterInfererNetworkRegretResponse>;
  GetOneOutForecasterForecasterNetworkRegret(
    request: QueryOneOutForecasterForecasterNetworkRegretRequest,
  ): Promise<QueryOneOutForecasterForecasterNetworkRegretResponse>;
}

export const QueryServiceName = "emissions.v2.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.Params = this.Params.bind(this);
    this.GetNextTopicId = this.GetNextTopicId.bind(this);
    this.GetTopic = this.GetTopic.bind(this);
    this.GetActiveTopics = this.GetActiveTopics.bind(this);
    this.GetWorkerLatestInferenceByTopicId = this.GetWorkerLatestInferenceByTopicId.bind(this);
    this.GetInferencesAtBlock = this.GetInferencesAtBlock.bind(this);
    this.GetLatestTopicInferences = this.GetLatestTopicInferences.bind(this);
    this.GetForecastsAtBlock = this.GetForecastsAtBlock.bind(this);
    this.GetNetworkLossBundleAtBlock = this.GetNetworkLossBundleAtBlock.bind(this);
    this.GetTotalStake = this.GetTotalStake.bind(this);
    this.GetReputerStakeInTopic = this.GetReputerStakeInTopic.bind(this);
    this.GetMultiReputerStakeInTopic = this.GetMultiReputerStakeInTopic.bind(this);
    this.GetStakeFromReputerInTopicInSelf = this.GetStakeFromReputerInTopicInSelf.bind(this);
    this.GetDelegateStakeInTopicInReputer = this.GetDelegateStakeInTopicInReputer.bind(this);
    this.GetStakeFromDelegatorInTopicInReputer = this.GetStakeFromDelegatorInTopicInReputer.bind(this);
    this.GetStakeFromDelegatorInTopic = this.GetStakeFromDelegatorInTopic.bind(this);
    this.GetTopicStake = this.GetTopicStake.bind(this);
    this.GetStakeRemovalsUpUntilBlock = this.GetStakeRemovalsUpUntilBlock.bind(this);
    this.GetDelegateStakeRemovalsUpUntilBlock = this.GetDelegateStakeRemovalsUpUntilBlock.bind(this);
    this.GetStakeRemovalInfo = this.GetStakeRemovalInfo.bind(this);
    this.GetDelegateStakeRemovalInfo = this.GetDelegateStakeRemovalInfo.bind(this);
    this.GetWorkerNodeInfo = this.GetWorkerNodeInfo.bind(this);
    this.GetReputerNodeInfo = this.GetReputerNodeInfo.bind(this);
    this.IsWorkerRegisteredInTopicId = this.IsWorkerRegisteredInTopicId.bind(this);
    this.IsReputerRegisteredInTopicId = this.IsReputerRegisteredInTopicId.bind(this);
    this.GetNetworkInferencesAtBlock = this.GetNetworkInferencesAtBlock.bind(this);
    this.GetLatestNetworkInference = this.GetLatestNetworkInference.bind(this);
    this.GetLatestAvailableNetworkInference = this.GetLatestAvailableNetworkInference.bind(this);
    this.IsWorkerNonceUnfulfilled = this.IsWorkerNonceUnfulfilled.bind(this);
    this.IsReputerNonceUnfulfilled = this.IsReputerNonceUnfulfilled.bind(this);
    this.GetUnfulfilledWorkerNonces = this.GetUnfulfilledWorkerNonces.bind(this);
    this.GetUnfulfilledReputerNonces = this.GetUnfulfilledReputerNonces.bind(this);
    this.GetInfererNetworkRegret = this.GetInfererNetworkRegret.bind(this);
    this.GetForecasterNetworkRegret = this.GetForecasterNetworkRegret.bind(this);
    this.GetOneInForecasterNetworkRegret = this.GetOneInForecasterNetworkRegret.bind(this);
    this.IsWhitelistAdmin = this.IsWhitelistAdmin.bind(this);
    this.GetTopicLastWorkerCommitInfo = this.GetTopicLastWorkerCommitInfo.bind(this);
    this.GetTopicLastReputerCommitInfo = this.GetTopicLastReputerCommitInfo.bind(this);
    this.GetTopicRewardNonce = this.GetTopicRewardNonce.bind(this);
    this.GetReputerLossBundlesAtBlock = this.GetReputerLossBundlesAtBlock.bind(this);
    this.GetStakeReputerAuthority = this.GetStakeReputerAuthority.bind(this);
    this.GetDelegateStakePlacement = this.GetDelegateStakePlacement.bind(this);
    this.GetDelegateStakeUponReputer = this.GetDelegateStakeUponReputer.bind(this);
    this.GetDelegateRewardPerShare = this.GetDelegateRewardPerShare.bind(this);
    this.GetStakeRemovalForReputerAndTopicId = this.GetStakeRemovalForReputerAndTopicId.bind(this);
    this.GetDelegateStakeRemoval = this.GetDelegateStakeRemoval.bind(this);
    this.GetPreviousTopicWeight = this.GetPreviousTopicWeight.bind(this);
    this.TopicExists = this.TopicExists.bind(this);
    this.IsTopicActive = this.IsTopicActive.bind(this);
    this.GetTopicFeeRevenue = this.GetTopicFeeRevenue.bind(this);
    this.GetRewardableTopics = this.GetRewardableTopics.bind(this);
    this.GetLatestInfererScore = this.GetLatestInfererScore.bind(this);
    this.GetLatestForecasterScore = this.GetLatestForecasterScore.bind(this);
    this.GetLatestReputerScore = this.GetLatestReputerScore.bind(this);
    this.GetInferenceScoresUntilBlock = this.GetInferenceScoresUntilBlock.bind(this);
    this.GetWorkerInferenceScoresAtBlock = this.GetWorkerInferenceScoresAtBlock.bind(this);
    this.GetForecastScoresUntilBlock = this.GetForecastScoresUntilBlock.bind(this);
    this.GetWorkerForecastScoresAtBlock = this.GetWorkerForecastScoresAtBlock.bind(this);
    this.GetReputersScoresAtBlock = this.GetReputersScoresAtBlock.bind(this);
    this.GetListeningCoefficient = this.GetListeningCoefficient.bind(this);
    this.GetPreviousReputerRewardFraction = this.GetPreviousReputerRewardFraction.bind(this);
    this.GetPreviousInferenceRewardFraction = this.GetPreviousInferenceRewardFraction.bind(this);
    this.GetPreviousForecastRewardFraction = this.GetPreviousForecastRewardFraction.bind(this);
    this.GetPreviousPercentageRewardToStakedReputers = this.GetPreviousPercentageRewardToStakedReputers.bind(this);
    this.GetTotalRewardToDistribute = this.GetTotalRewardToDistribute.bind(this);
    this.GetNaiveInfererNetworkRegret = this.GetNaiveInfererNetworkRegret.bind(this);
    this.GetOneOutInfererInfererNetworkRegret = this.GetOneOutInfererInfererNetworkRegret.bind(this);
    this.GetOneOutInfererForecasterNetworkRegret = this.GetOneOutInfererForecasterNetworkRegret.bind(this);
    this.GetOneOutForecasterInfererNetworkRegret = this.GetOneOutForecasterInfererNetworkRegret.bind(this);
    this.GetOneOutForecasterForecasterNetworkRegret = this.GetOneOutForecasterForecasterNetworkRegret.bind(this);
  }
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse> {
    const data = QueryParamsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Params", data);
    return promise.then((data) => QueryParamsResponse.decode(new BinaryReader(data)));
  }

  GetNextTopicId(request: QueryNextTopicIdRequest): Promise<QueryNextTopicIdResponse> {
    const data = QueryNextTopicIdRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetNextTopicId", data);
    return promise.then((data) => QueryNextTopicIdResponse.decode(new BinaryReader(data)));
  }

  GetTopic(request: QueryTopicRequest): Promise<QueryTopicResponse> {
    const data = QueryTopicRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetTopic", data);
    return promise.then((data) => QueryTopicResponse.decode(new BinaryReader(data)));
  }

  GetActiveTopics(request: QueryActiveTopicsRequest): Promise<QueryActiveTopicsResponse> {
    const data = QueryActiveTopicsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetActiveTopics", data);
    return promise.then((data) => QueryActiveTopicsResponse.decode(new BinaryReader(data)));
  }

  GetWorkerLatestInferenceByTopicId(
    request: QueryWorkerLatestInferenceRequest,
  ): Promise<QueryWorkerLatestInferenceResponse> {
    const data = QueryWorkerLatestInferenceRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetWorkerLatestInferenceByTopicId", data);
    return promise.then((data) => QueryWorkerLatestInferenceResponse.decode(new BinaryReader(data)));
  }

  GetInferencesAtBlock(request: QueryInferencesAtBlockRequest): Promise<QueryInferencesAtBlockResponse> {
    const data = QueryInferencesAtBlockRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetInferencesAtBlock", data);
    return promise.then((data) => QueryInferencesAtBlockResponse.decode(new BinaryReader(data)));
  }

  GetLatestTopicInferences(request: QueryLatestTopicInferencesRequest): Promise<QueryLatestTopicInferencesResponse> {
    const data = QueryLatestTopicInferencesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetLatestTopicInferences", data);
    return promise.then((data) => QueryLatestTopicInferencesResponse.decode(new BinaryReader(data)));
  }

  GetForecastsAtBlock(request: QueryForecastsAtBlockRequest): Promise<QueryForecastsAtBlockResponse> {
    const data = QueryForecastsAtBlockRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetForecastsAtBlock", data);
    return promise.then((data) => QueryForecastsAtBlockResponse.decode(new BinaryReader(data)));
  }

  GetNetworkLossBundleAtBlock(
    request: QueryNetworkLossBundleAtBlockRequest,
  ): Promise<QueryNetworkLossBundleAtBlockResponse> {
    const data = QueryNetworkLossBundleAtBlockRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetNetworkLossBundleAtBlock", data);
    return promise.then((data) => QueryNetworkLossBundleAtBlockResponse.decode(new BinaryReader(data)));
  }

  GetTotalStake(request: QueryTotalStakeRequest): Promise<QueryTotalStakeResponse> {
    const data = QueryTotalStakeRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetTotalStake", data);
    return promise.then((data) => QueryTotalStakeResponse.decode(new BinaryReader(data)));
  }

  GetReputerStakeInTopic(request: QueryReputerStakeInTopicRequest): Promise<QueryReputerStakeInTopicResponse> {
    const data = QueryReputerStakeInTopicRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetReputerStakeInTopic", data);
    return promise.then((data) => QueryReputerStakeInTopicResponse.decode(new BinaryReader(data)));
  }

  GetMultiReputerStakeInTopic(
    request: QueryMultiReputerStakeInTopicRequest,
  ): Promise<QueryMultiReputerStakeInTopicResponse> {
    const data = QueryMultiReputerStakeInTopicRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetMultiReputerStakeInTopic", data);
    return promise.then((data) => QueryMultiReputerStakeInTopicResponse.decode(new BinaryReader(data)));
  }

  GetStakeFromReputerInTopicInSelf(
    request: QueryStakeFromReputerInTopicInSelfRequest,
  ): Promise<QueryStakeFromReputerInTopicInSelfResponse> {
    const data = QueryStakeFromReputerInTopicInSelfRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetStakeFromReputerInTopicInSelf", data);
    return promise.then((data) => QueryStakeFromReputerInTopicInSelfResponse.decode(new BinaryReader(data)));
  }

  GetDelegateStakeInTopicInReputer(
    request: QueryDelegateStakeInTopicInReputerRequest,
  ): Promise<QueryDelegateStakeInTopicInReputerResponse> {
    const data = QueryDelegateStakeInTopicInReputerRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetDelegateStakeInTopicInReputer", data);
    return promise.then((data) => QueryDelegateStakeInTopicInReputerResponse.decode(new BinaryReader(data)));
  }

  GetStakeFromDelegatorInTopicInReputer(
    request: QueryStakeFromDelegatorInTopicInReputerRequest,
  ): Promise<QueryStakeFromDelegatorInTopicInReputerResponse> {
    const data = QueryStakeFromDelegatorInTopicInReputerRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetStakeFromDelegatorInTopicInReputer", data);
    return promise.then((data) => QueryStakeFromDelegatorInTopicInReputerResponse.decode(new BinaryReader(data)));
  }

  GetStakeFromDelegatorInTopic(
    request: QueryStakeFromDelegatorInTopicRequest,
  ): Promise<QueryStakeFromDelegatorInTopicResponse> {
    const data = QueryStakeFromDelegatorInTopicRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetStakeFromDelegatorInTopic", data);
    return promise.then((data) => QueryStakeFromDelegatorInTopicResponse.decode(new BinaryReader(data)));
  }

  GetTopicStake(request: QueryTopicStakeRequest): Promise<QueryTopicStakeResponse> {
    const data = QueryTopicStakeRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetTopicStake", data);
    return promise.then((data) => QueryTopicStakeResponse.decode(new BinaryReader(data)));
  }

  GetStakeRemovalsUpUntilBlock(
    request: QueryStakeRemovalsUpUntilBlockRequest,
  ): Promise<QueryStakeRemovalsUpUntilBlockResponse> {
    const data = QueryStakeRemovalsUpUntilBlockRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetStakeRemovalsUpUntilBlock", data);
    return promise.then((data) => QueryStakeRemovalsUpUntilBlockResponse.decode(new BinaryReader(data)));
  }

  GetDelegateStakeRemovalsUpUntilBlock(
    request: QueryDelegateStakeRemovalsUpUntilBlockRequest,
  ): Promise<QueryDelegateStakeRemovalsUpUntilBlockResponse> {
    const data = QueryDelegateStakeRemovalsUpUntilBlockRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetDelegateStakeRemovalsUpUntilBlock", data);
    return promise.then((data) => QueryDelegateStakeRemovalsUpUntilBlockResponse.decode(new BinaryReader(data)));
  }

  GetStakeRemovalInfo(request: QueryStakeRemovalInfoRequest): Promise<QueryStakeRemovalInfoResponse> {
    const data = QueryStakeRemovalInfoRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetStakeRemovalInfo", data);
    return promise.then((data) => QueryStakeRemovalInfoResponse.decode(new BinaryReader(data)));
  }

  GetDelegateStakeRemovalInfo(
    request: QueryDelegateStakeRemovalInfoRequest,
  ): Promise<QueryDelegateStakeRemovalInfoResponse> {
    const data = QueryDelegateStakeRemovalInfoRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetDelegateStakeRemovalInfo", data);
    return promise.then((data) => QueryDelegateStakeRemovalInfoResponse.decode(new BinaryReader(data)));
  }

  GetWorkerNodeInfo(request: QueryWorkerNodeInfoRequest): Promise<QueryWorkerNodeInfoResponse> {
    const data = QueryWorkerNodeInfoRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetWorkerNodeInfo", data);
    return promise.then((data) => QueryWorkerNodeInfoResponse.decode(new BinaryReader(data)));
  }

  GetReputerNodeInfo(request: QueryReputerNodeInfoRequest): Promise<QueryReputerNodeInfoResponse> {
    const data = QueryReputerNodeInfoRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetReputerNodeInfo", data);
    return promise.then((data) => QueryReputerNodeInfoResponse.decode(new BinaryReader(data)));
  }

  IsWorkerRegisteredInTopicId(
    request: QueryIsWorkerRegisteredInTopicIdRequest,
  ): Promise<QueryIsWorkerRegisteredInTopicIdResponse> {
    const data = QueryIsWorkerRegisteredInTopicIdRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "IsWorkerRegisteredInTopicId", data);
    return promise.then((data) => QueryIsWorkerRegisteredInTopicIdResponse.decode(new BinaryReader(data)));
  }

  IsReputerRegisteredInTopicId(
    request: QueryIsReputerRegisteredInTopicIdRequest,
  ): Promise<QueryIsReputerRegisteredInTopicIdResponse> {
    const data = QueryIsReputerRegisteredInTopicIdRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "IsReputerRegisteredInTopicId", data);
    return promise.then((data) => QueryIsReputerRegisteredInTopicIdResponse.decode(new BinaryReader(data)));
  }

  GetNetworkInferencesAtBlock(
    request: QueryNetworkInferencesAtBlockRequest,
  ): Promise<QueryNetworkInferencesAtBlockResponse> {
    const data = QueryNetworkInferencesAtBlockRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetNetworkInferencesAtBlock", data);
    return promise.then((data) => QueryNetworkInferencesAtBlockResponse.decode(new BinaryReader(data)));
  }

  GetLatestNetworkInference(
    request: QueryLatestNetworkInferencesRequest,
  ): Promise<QueryLatestNetworkInferencesResponse> {
    const data = QueryLatestNetworkInferencesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetLatestNetworkInference", data);
    return promise.then((data) => QueryLatestNetworkInferencesResponse.decode(new BinaryReader(data)));
  }

  GetLatestAvailableNetworkInference(
    request: QueryLatestNetworkInferencesRequest,
  ): Promise<QueryLatestNetworkInferencesResponse> {
    const data = QueryLatestNetworkInferencesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetLatestAvailableNetworkInference", data);
    return promise.then((data) => QueryLatestNetworkInferencesResponse.decode(new BinaryReader(data)));
  }

  IsWorkerNonceUnfulfilled(
    request: QueryIsWorkerNonceUnfulfilledRequest,
  ): Promise<QueryIsWorkerNonceUnfulfilledResponse> {
    const data = QueryIsWorkerNonceUnfulfilledRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "IsWorkerNonceUnfulfilled", data);
    return promise.then((data) => QueryIsWorkerNonceUnfulfilledResponse.decode(new BinaryReader(data)));
  }

  IsReputerNonceUnfulfilled(
    request: QueryIsReputerNonceUnfulfilledRequest,
  ): Promise<QueryIsReputerNonceUnfulfilledResponse> {
    const data = QueryIsReputerNonceUnfulfilledRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "IsReputerNonceUnfulfilled", data);
    return promise.then((data) => QueryIsReputerNonceUnfulfilledResponse.decode(new BinaryReader(data)));
  }

  GetUnfulfilledWorkerNonces(
    request: QueryUnfulfilledWorkerNoncesRequest,
  ): Promise<QueryUnfulfilledWorkerNoncesResponse> {
    const data = QueryUnfulfilledWorkerNoncesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetUnfulfilledWorkerNonces", data);
    return promise.then((data) => QueryUnfulfilledWorkerNoncesResponse.decode(new BinaryReader(data)));
  }

  GetUnfulfilledReputerNonces(
    request: QueryUnfulfilledReputerNoncesRequest,
  ): Promise<QueryUnfulfilledReputerNoncesResponse> {
    const data = QueryUnfulfilledReputerNoncesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetUnfulfilledReputerNonces", data);
    return promise.then((data) => QueryUnfulfilledReputerNoncesResponse.decode(new BinaryReader(data)));
  }

  GetInfererNetworkRegret(request: QueryInfererNetworkRegretRequest): Promise<QueryInfererNetworkRegretResponse> {
    const data = QueryInfererNetworkRegretRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetInfererNetworkRegret", data);
    return promise.then((data) => QueryInfererNetworkRegretResponse.decode(new BinaryReader(data)));
  }

  GetForecasterNetworkRegret(
    request: QueryForecasterNetworkRegretRequest,
  ): Promise<QueryForecasterNetworkRegretResponse> {
    const data = QueryForecasterNetworkRegretRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetForecasterNetworkRegret", data);
    return promise.then((data) => QueryForecasterNetworkRegretResponse.decode(new BinaryReader(data)));
  }

  GetOneInForecasterNetworkRegret(
    request: QueryOneInForecasterNetworkRegretRequest,
  ): Promise<QueryOneInForecasterNetworkRegretResponse> {
    const data = QueryOneInForecasterNetworkRegretRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetOneInForecasterNetworkRegret", data);
    return promise.then((data) => QueryOneInForecasterNetworkRegretResponse.decode(new BinaryReader(data)));
  }

  IsWhitelistAdmin(request: QueryIsWhitelistAdminRequest): Promise<QueryIsWhitelistAdminResponse> {
    const data = QueryIsWhitelistAdminRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "IsWhitelistAdmin", data);
    return promise.then((data) => QueryIsWhitelistAdminResponse.decode(new BinaryReader(data)));
  }

  GetTopicLastWorkerCommitInfo(request: QueryTopicLastCommitRequest): Promise<QueryTopicLastCommitResponse> {
    const data = QueryTopicLastCommitRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetTopicLastWorkerCommitInfo", data);
    return promise.then((data) => QueryTopicLastCommitResponse.decode(new BinaryReader(data)));
  }

  GetTopicLastReputerCommitInfo(request: QueryTopicLastCommitRequest): Promise<QueryTopicLastCommitResponse> {
    const data = QueryTopicLastCommitRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetTopicLastReputerCommitInfo", data);
    return promise.then((data) => QueryTopicLastCommitResponse.decode(new BinaryReader(data)));
  }

  GetTopicRewardNonce(request: QueryTopicRewardNonceRequest): Promise<QueryTopicRewardNonceResponse> {
    const data = QueryTopicRewardNonceRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetTopicRewardNonce", data);
    return promise.then((data) => QueryTopicRewardNonceResponse.decode(new BinaryReader(data)));
  }

  GetReputerLossBundlesAtBlock(
    request: QueryReputerLossBundlesAtBlockRequest,
  ): Promise<QueryReputerLossBundlesAtBlockResponse> {
    const data = QueryReputerLossBundlesAtBlockRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetReputerLossBundlesAtBlock", data);
    return promise.then((data) => QueryReputerLossBundlesAtBlockResponse.decode(new BinaryReader(data)));
  }

  GetStakeReputerAuthority(request: QueryStakeReputerAuthorityRequest): Promise<QueryStakeReputerAuthorityResponse> {
    const data = QueryStakeReputerAuthorityRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetStakeReputerAuthority", data);
    return promise.then((data) => QueryStakeReputerAuthorityResponse.decode(new BinaryReader(data)));
  }

  GetDelegateStakePlacement(request: QueryDelegateStakePlacementRequest): Promise<QueryDelegateStakePlacementResponse> {
    const data = QueryDelegateStakePlacementRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetDelegateStakePlacement", data);
    return promise.then((data) => QueryDelegateStakePlacementResponse.decode(new BinaryReader(data)));
  }

  GetDelegateStakeUponReputer(
    request: QueryDelegateStakeUponReputerRequest,
  ): Promise<QueryDelegateStakeUponReputerResponse> {
    const data = QueryDelegateStakeUponReputerRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetDelegateStakeUponReputer", data);
    return promise.then((data) => QueryDelegateStakeUponReputerResponse.decode(new BinaryReader(data)));
  }

  GetDelegateRewardPerShare(request: QueryDelegateRewardPerShareRequest): Promise<QueryDelegateRewardPerShareResponse> {
    const data = QueryDelegateRewardPerShareRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetDelegateRewardPerShare", data);
    return promise.then((data) => QueryDelegateRewardPerShareResponse.decode(new BinaryReader(data)));
  }

  GetStakeRemovalForReputerAndTopicId(
    request: QueryStakeRemovalForReputerAndTopicIdRequest,
  ): Promise<QueryStakeRemovalForReputerAndTopicIdResponse> {
    const data = QueryStakeRemovalForReputerAndTopicIdRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetStakeRemovalForReputerAndTopicId", data);
    return promise.then((data) => QueryStakeRemovalForReputerAndTopicIdResponse.decode(new BinaryReader(data)));
  }

  GetDelegateStakeRemoval(request: QueryDelegateStakeRemovalRequest): Promise<QueryDelegateStakeRemovalResponse> {
    const data = QueryDelegateStakeRemovalRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetDelegateStakeRemoval", data);
    return promise.then((data) => QueryDelegateStakeRemovalResponse.decode(new BinaryReader(data)));
  }

  GetPreviousTopicWeight(request: QueryPreviousTopicWeightRequest): Promise<QueryPreviousTopicWeightResponse> {
    const data = QueryPreviousTopicWeightRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetPreviousTopicWeight", data);
    return promise.then((data) => QueryPreviousTopicWeightResponse.decode(new BinaryReader(data)));
  }

  TopicExists(request: QueryTopicExistsRequest): Promise<QueryTopicExistsResponse> {
    const data = QueryTopicExistsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "TopicExists", data);
    return promise.then((data) => QueryTopicExistsResponse.decode(new BinaryReader(data)));
  }

  IsTopicActive(request: QueryIsTopicActiveRequest): Promise<QueryIsTopicActiveResponse> {
    const data = QueryIsTopicActiveRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "IsTopicActive", data);
    return promise.then((data) => QueryIsTopicActiveResponse.decode(new BinaryReader(data)));
  }

  GetTopicFeeRevenue(request: QueryTopicFeeRevenueRequest): Promise<QueryTopicFeeRevenueResponse> {
    const data = QueryTopicFeeRevenueRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetTopicFeeRevenue", data);
    return promise.then((data) => QueryTopicFeeRevenueResponse.decode(new BinaryReader(data)));
  }

  GetRewardableTopics(request: QueryRewardableTopicsRequest): Promise<QueryRewardableTopicsResponse> {
    const data = QueryRewardableTopicsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetRewardableTopics", data);
    return promise.then((data) => QueryRewardableTopicsResponse.decode(new BinaryReader(data)));
  }

  GetLatestInfererScore(request: QueryLatestInfererScoreRequest): Promise<QueryLatestInfererScoreResponse> {
    const data = QueryLatestInfererScoreRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetLatestInfererScore", data);
    return promise.then((data) => QueryLatestInfererScoreResponse.decode(new BinaryReader(data)));
  }

  GetLatestForecasterScore(request: QueryLatestForecasterScoreRequest): Promise<QueryLatestForecasterScoreResponse> {
    const data = QueryLatestForecasterScoreRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetLatestForecasterScore", data);
    return promise.then((data) => QueryLatestForecasterScoreResponse.decode(new BinaryReader(data)));
  }

  GetLatestReputerScore(request: QueryLatestReputerScoreRequest): Promise<QueryLatestReputerScoreResponse> {
    const data = QueryLatestReputerScoreRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetLatestReputerScore", data);
    return promise.then((data) => QueryLatestReputerScoreResponse.decode(new BinaryReader(data)));
  }

  GetInferenceScoresUntilBlock(
    request: QueryInferenceScoresUntilBlockRequest,
  ): Promise<QueryInferenceScoresUntilBlockResponse> {
    const data = QueryInferenceScoresUntilBlockRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetInferenceScoresUntilBlock", data);
    return promise.then((data) => QueryInferenceScoresUntilBlockResponse.decode(new BinaryReader(data)));
  }

  GetWorkerInferenceScoresAtBlock(
    request: QueryWorkerInferenceScoresAtBlockRequest,
  ): Promise<QueryWorkerInferenceScoresAtBlockResponse> {
    const data = QueryWorkerInferenceScoresAtBlockRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetWorkerInferenceScoresAtBlock", data);
    return promise.then((data) => QueryWorkerInferenceScoresAtBlockResponse.decode(new BinaryReader(data)));
  }

  GetForecastScoresUntilBlock(
    request: QueryForecastScoresUntilBlockRequest,
  ): Promise<QueryForecastScoresUntilBlockResponse> {
    const data = QueryForecastScoresUntilBlockRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetForecastScoresUntilBlock", data);
    return promise.then((data) => QueryForecastScoresUntilBlockResponse.decode(new BinaryReader(data)));
  }

  GetWorkerForecastScoresAtBlock(
    request: QueryWorkerForecastScoresAtBlockRequest,
  ): Promise<QueryWorkerForecastScoresAtBlockResponse> {
    const data = QueryWorkerForecastScoresAtBlockRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetWorkerForecastScoresAtBlock", data);
    return promise.then((data) => QueryWorkerForecastScoresAtBlockResponse.decode(new BinaryReader(data)));
  }

  GetReputersScoresAtBlock(request: QueryReputersScoresAtBlockRequest): Promise<QueryReputersScoresAtBlockResponse> {
    const data = QueryReputersScoresAtBlockRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetReputersScoresAtBlock", data);
    return promise.then((data) => QueryReputersScoresAtBlockResponse.decode(new BinaryReader(data)));
  }

  GetListeningCoefficient(request: QueryListeningCoefficientRequest): Promise<QueryListeningCoefficientResponse> {
    const data = QueryListeningCoefficientRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetListeningCoefficient", data);
    return promise.then((data) => QueryListeningCoefficientResponse.decode(new BinaryReader(data)));
  }

  GetPreviousReputerRewardFraction(
    request: QueryPreviousReputerRewardFractionRequest,
  ): Promise<QueryPreviousReputerRewardFractionResponse> {
    const data = QueryPreviousReputerRewardFractionRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetPreviousReputerRewardFraction", data);
    return promise.then((data) => QueryPreviousReputerRewardFractionResponse.decode(new BinaryReader(data)));
  }

  GetPreviousInferenceRewardFraction(
    request: QueryPreviousInferenceRewardFractionRequest,
  ): Promise<QueryPreviousInferenceRewardFractionResponse> {
    const data = QueryPreviousInferenceRewardFractionRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetPreviousInferenceRewardFraction", data);
    return promise.then((data) => QueryPreviousInferenceRewardFractionResponse.decode(new BinaryReader(data)));
  }

  GetPreviousForecastRewardFraction(
    request: QueryPreviousForecastRewardFractionRequest,
  ): Promise<QueryPreviousForecastRewardFractionResponse> {
    const data = QueryPreviousForecastRewardFractionRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetPreviousForecastRewardFraction", data);
    return promise.then((data) => QueryPreviousForecastRewardFractionResponse.decode(new BinaryReader(data)));
  }

  GetPreviousPercentageRewardToStakedReputers(
    request: QueryPreviousPercentageRewardToStakedReputersRequest,
  ): Promise<QueryPreviousPercentageRewardToStakedReputersResponse> {
    const data = QueryPreviousPercentageRewardToStakedReputersRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetPreviousPercentageRewardToStakedReputers", data);
    return promise.then((data) => QueryPreviousPercentageRewardToStakedReputersResponse.decode(new BinaryReader(data)));
  }

  GetTotalRewardToDistribute(
    request: QueryTotalRewardToDistributeRequest,
  ): Promise<QueryTotalRewardToDistributeResponse> {
    const data = QueryTotalRewardToDistributeRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetTotalRewardToDistribute", data);
    return promise.then((data) => QueryTotalRewardToDistributeResponse.decode(new BinaryReader(data)));
  }

  GetNaiveInfererNetworkRegret(
    request: QueryNaiveInfererNetworkRegretRequest,
  ): Promise<QueryNaiveInfererNetworkRegretResponse> {
    const data = QueryNaiveInfererNetworkRegretRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetNaiveInfererNetworkRegret", data);
    return promise.then((data) => QueryNaiveInfererNetworkRegretResponse.decode(new BinaryReader(data)));
  }

  GetOneOutInfererInfererNetworkRegret(
    request: QueryOneOutInfererInfererNetworkRegretRequest,
  ): Promise<QueryOneOutInfererInfererNetworkRegretResponse> {
    const data = QueryOneOutInfererInfererNetworkRegretRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetOneOutInfererInfererNetworkRegret", data);
    return promise.then((data) => QueryOneOutInfererInfererNetworkRegretResponse.decode(new BinaryReader(data)));
  }

  GetOneOutInfererForecasterNetworkRegret(
    request: QueryOneOutInfererForecasterNetworkRegretRequest,
  ): Promise<QueryOneOutInfererForecasterNetworkRegretResponse> {
    const data = QueryOneOutInfererForecasterNetworkRegretRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetOneOutInfererForecasterNetworkRegret", data);
    return promise.then((data) => QueryOneOutInfererForecasterNetworkRegretResponse.decode(new BinaryReader(data)));
  }

  GetOneOutForecasterInfererNetworkRegret(
    request: QueryOneOutForecasterInfererNetworkRegretRequest,
  ): Promise<QueryOneOutForecasterInfererNetworkRegretResponse> {
    const data = QueryOneOutForecasterInfererNetworkRegretRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetOneOutForecasterInfererNetworkRegret", data);
    return promise.then((data) => QueryOneOutForecasterInfererNetworkRegretResponse.decode(new BinaryReader(data)));
  }

  GetOneOutForecasterForecasterNetworkRegret(
    request: QueryOneOutForecasterForecasterNetworkRegretRequest,
  ): Promise<QueryOneOutForecasterForecasterNetworkRegretResponse> {
    const data = QueryOneOutForecasterForecasterNetworkRegretRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetOneOutForecasterForecasterNetworkRegret", data);
    return promise.then((data) => QueryOneOutForecasterForecasterNetworkRegretResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
